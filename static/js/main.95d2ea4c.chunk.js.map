{"version":3,"sources":["asset/wallet sync /^/.//.*$","asset/wallet/metamask.svg","asset/wallet/walletconnect.svg","serviceWorker.ts","constant/amm.ts","constant/position.ts","constant/stage.ts","constant/number.ts","constant/storage.ts","util/is.ts","connector/index.ts","constant/network.ts","constant/wallet.ts","container/connection/index.tsx","container/metadata/index.tsx","types/contracts/factories/ERC20PresetMinterPauserUpgradeSafe__factory.ts","types/contracts/factories/ERC20UpgradeSafe__factory.ts","types/contracts/factories/PausableUpgradeSafe__factory.ts","types/contracts/factories/Amm__factory.ts","types/contracts/factories/AmmReader__factory.ts","types/contracts/factories/RootBridge__factory.ts","types/contracts/factories/ClientBridge__factory.ts","types/contracts/factories/ChainlinkL1__factory.ts","types/contracts/factories/ChainlinkPriceFeed__factory.ts","types/contracts/factories/ClearingHouse__factory.ts","types/contracts/factories/ClearingHouseViewer__factory.ts","types/contracts/factories/ExchangeWrapper__factory.ts","types/contracts/factories/InflationMonitor__factory.ts","types/contracts/factories/InsuranceFund__factory.ts","types/contracts/factories/KeeperRewardL1__factory.ts","types/contracts/factories/KeeperRewardL2__factory.ts","types/contracts/factories/L2PriceFeed__factory.ts","types/contracts/factories/MetaTxGateway__factory.ts","types/contracts/factories/Minter__factory.ts","types/contracts/factories/AmmFake__factory.ts","types/contracts/factories/ChainlinkL1Fake__factory.ts","types/contracts/factories/ChainlinkPriceFeedFake__factory.ts","types/contracts/factories/ClearingHouseFake__factory.ts","types/contracts/factories/DecimalERC20Fake__factory.ts","types/contracts/factories/DecimalFake__factory.ts","types/contracts/factories/ERC20Fake__factory.ts","types/contracts/factories/ERC20MinimalFake__factory.ts","types/contracts/factories/FeeRewardPoolL1Fake__factory.ts","types/contracts/factories/InflationMonitorFake__factory.ts","types/contracts/factories/InsuranceFundFake__factory.ts","types/contracts/factories/L2PriceFeedFake__factory.ts","types/contracts/factories/MixedDecimalFake__factory.ts","types/contracts/factories/AMBBridgeMock__factory.ts","types/contracts/factories/AmmMock__factory.ts","types/contracts/factories/BalancerMock__factory.ts","types/contracts/factories/ChainlinkAggregatorMock__factory.ts","types/contracts/factories/ChainlinkL1Mock__factory.ts","types/contracts/factories/ClearingHouseMock__factory.ts","types/contracts/factories/CUsdtMock__factory.ts","types/contracts/factories/ExchangeWrapperMock__factory.ts","types/contracts/factories/FeeRewardPoolMock__factory.ts","types/contracts/factories/L2PriceFeedMock__factory.ts","types/contracts/factories/MetaTxRecipientMock__factory.ts","types/contracts/factories/MultiTokenMediatorMock__factory.ts","types/contracts/factories/PerpTokenMock__factory.ts","types/contracts/factories/PriceFeedMock__factory.ts","types/contracts/factories/RootBridgeMock__factory.ts","types/contracts/factories/StakedPerpTokenMock__factory.ts","types/contracts/factories/PerpFiOwnableUpgradeFake__factory.ts","types/contracts/factories/PerpRewardVestingFake__factory.ts","types/contracts/factories/ERC20__factory.ts","types/contracts/factories/PerpToken__factory.ts","types/contracts/factories/RewardsDistributionFake__factory.ts","types/contracts/factories/SignedDecimalFake__factory.ts","types/contracts/factories/StakedPerpTokenFake__factory.ts","types/contracts/factories/StakingReserveFake__factory.ts","types/contracts/factories/SupplyScheduleFake__factory.ts","types/contracts/factories/Ownable__factory.ts","types/contracts/factories/Pausable__factory.ts","types/contracts/factories/TetherToken__factory.ts","types/contracts/factories/TraderWallet__factory.ts","types/contracts/factories/UpgradableContractV1__factory.ts","types/contracts/factories/UpgradableContractV2__factory.ts","types/contracts/factories/OwnerPausableUpgradeSafe__factory.ts","types/contracts/factories/RewardsDistribution__factory.ts","types/contracts/factories/MerkleRedeemUpgradeSafe__factory.ts","types/contracts/factories/FeeRewardPoolL1__factory.ts","types/contracts/factories/FeeTokenPoolDispatcherL1__factory.ts","types/contracts/factories/PerpRewardVesting__factory.ts","types/contracts/factories/StakedPerpToken__factory.ts","types/contracts/factories/StakingReserve__factory.ts","types/contracts/factories/SupplySchedule__factory.ts","types/contracts/factories/TollPool__factory.ts","types/contracts/factories/PerpFiOwnableUpgrade__factory.ts","container/contract/index.tsx","util/format.ts","container/amm/index.ts","asset/check.svg","lib/segment/base.ts","lib/bugsnag/logger.ts","hook/useLocalStorage.ts","container/user/index.tsx","hook/useNotification.ts","hook/usePrevious.ts","container/global/index.tsx","component/WalletModal/WalletButton.tsx","component/WalletModal/DisconnectButton.tsx","component/WalletModal/index.tsx","component/Icon/WalletFill.tsx","util/getShortenAddress.ts","component/Header/ConnectBtn.tsx","component/Header/index.tsx","component/ExternalLink/index.tsx","page/Home/component/GetStarted/index.tsx","page/Home/component/Position/NoPosition.tsx","page/Home/component/Position/NoWallet.tsx","page/Home/component/Position/DataUnit.tsx","container/position/index.tsx","page/Home/component/Position/PositionUnit.tsx","page/Home/component/Position/index.tsx","util/error.ts","util/link.ts","container/transaction/index.tsx","hook/useContractCall.ts","hook/useContractEvent.ts","hook/useToken.ts","page/Home/component/Trade/MyBalance.tsx","component/SmallFormLabel/index.tsx","container/trade/index.tsx","hook/useDebounce.ts","page/Home/component/Trade/Collateral.tsx","page/Home/component/Trade/Leverage.tsx","page/Home/component/Trade/MarketSelector.tsx","hook/useRealtimeAmm.ts","page/Home/component/Trade/usePositionSize.ts","page/Home/component/Trade/Position.tsx","page/Home/component/Trade/SideSwitcher.tsx","page/Home/component/Trade/Slippage.tsx","container/clearingHouse/ContractExecutor.ts","container/clearingHouse/index.tsx","page/Home/component/Trade/SendTxButton.tsx","page/Home/component/Trade/TxInfoTable.tsx","page/Home/component/Trade/useOpenedPositionSize.ts","page/Home/component/Trade/Summary.tsx","page/Home/component/Trade/index.tsx","page/Home/index.tsx","hook/useInterval.ts","component/ClosePositionModal/index.tsx","component/AdjustMarginModal/container/margin.tsx","component/AdjustMarginModal/AdjustButton.tsx","component/AdjustMarginModal/MarginDirSwitcher.tsx","component/AdjustMarginModal/MarginInput.tsx","component/AdjustMarginModal/UpdatedInfo.tsx","component/AdjustMarginModal/index.tsx","component/BlockedRegionModal/useIsBlockedRegion.ts","component/BlockedRegionModal/index.tsx","component/UserAgreementModal/index.tsx","App.tsx","component/Font/index.tsx","util/getLibrary.ts","container/web3/index.tsx","hook/useActiveWeb3React.ts","reportWebVitals.ts","lib/segment/tracks.ts","theme/index.ts","theme/config.ts","theme/colors.ts","theme/styles.ts","theme/fonts.ts","theme/components.ts","theme/radii.ts","lib/bugsnag/index.tsx","index.tsx"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","Boolean","window","location","hostname","match","Dir","Side","MarginDir","PnlCalcOption","Stage","ERC20_DECIMAL_DIGITS","BIG_ZERO","Big","getStage","Staging","IS_MAINNET","Production","STORAGE_KEY","name","defaultValue","isWebsocket","url","split","CHAIN_ID","process","REACT_APP_MAINNET_RPC_URL","REACT_APP_RINKEBY_RPC_URL","REACT_APP_XDAI_RPC_URL","RPC_URLS","Ethereum","Rinkeby","XDai","NetworkConnector","urls","defaultChainId","Network","injected","InjectedConnector","supportedChainIds","walletConnect","WalletConnectConnector","rpc","pollingInterval","SUPPORTED_WALLETS","connector","iconName","description","Connection","createContainer","useWeb3React","account","library","active","chainId","useState","ethMulticallProvider","setMulticallProvider","xDaiMulticallProvider","setXDaiMulticallProvider","useEffect","_ethMulticallProvider","MulticallProvider","ethReadOnlyProvider","_xDaiMulticallProvider","xDaiReadOnlyProvider","Promise","all","init","then","ethProvider","xDaiProvider","signer","getSigner","rpcUrl","providers","WebSocketProvider","JsonRpcProvider","getNetworkLibrary","getXDaiNetworkLibrary","MetaData","undefined","config","setConfig","isLoading","setIsLoading","fetch","configUrl","res","json","data","catch","console","error","finally","_abi","ContractFactory","anonymous","inputs","indexed","internalType","type","outputs","stateMutability","_bytecode","Amm__factory","overrides","address","signerOrProvider","Contract","components","AmmReader__factory","ClearingHouse__factory","ClearingHouseViewer__factory","_clearingHouse","InsuranceFund__factory","MetaTxGateway__factory","ERC20__factory","useContainer","useMemo","defaultContractInstance","contractAddress","layers","layer2","contracts","ClearingHouseViewer","ClearingHouse","InsuranceFund","AmmReader","MetaTxGateway","externalContracts","XDaiTether","tether","XDaiUsdc","usdc","getAddressFromConfig","isInitialized","erc20","Eth","Erc20Factory","connect","constants","AddressZero","insuranceFund","InsuranceFundFactory","ammReader","AmmReaderFactory","amm","AmmFactory","addressMap","clearingHouseViewer","ClearingHouseViewerFactory","clearingHouse","ClearingHouseFactory","metaTxGateway","MetaTxGatewayFactory","PRODUCTION_CONTRACTS","STAGING_CONTRACTS","stage","Development","bigNum2Big","val","decimals","toString","div","pow","bigNum2Decimal","d","big2BigNum","BigNumber","from","mul","toFixed","big2Decimal","decimal2Big","decimal","regexUSLocaleNumber","RegExp","numberWithCommas","number","replace","numberWithCommasUsdc","formatInput","input","digits","firstDotIndex","indexOf","formattedString","filter","alphabet","index","join","includes","length","substr","Amm","ammMap","setAmmMap","selectedAmm","setSelectedAmm","a","isAddress","getAllAmms","rawAmmAddressList","rawAmmContractList","ammAddress","MulticallContract","interface","fragments","open","ammOpenList","ammAddressList","_","ammContractList","ammContract","tollRatio","spreadRatio","ammRatioData","tollRatioList","splice","spreadRatioList","ammReaderContract","AmmReaderArtifact","abi","getAmmStates","ammRawData","_ammMap","forEach","baseAssetSymbol","quoteAssetSymbol","tradeLimitRatio","getRawAmmList","getAnalytics","analytics","Logger","Bugsnag","setUser","log","info","args","msg","notify","message","warn","err","metadataSet","event","entries","section","metadata","addMetadata","this","instance","logger","useLocalStorage","key","initialValue","item","localStorage","getItem","JSON","parse","storedValue","setStoredValue","setValue","useCallback","value","valueToStore","Function","setItem","stringify","ACTIONS","defaultConfig","position","duration","isClosable","useNotification","toast","useToast","notifySuccess","payload","status","notifyInfo","notifyError","closeNotify","toastRef","close","initialState","User","useReducer","reducer","state","dispatch","activate","deactivate","CONNECTOR_ID","setConnectorId","wrongNetworkRef","useRef","onLogout","previousSession","ref","current","usePrevious","usePostLogout","LOGOUT","reset","login","connectorId","onActivate","LOGIN_REQUEST","LOGIN_FAIL","logout","LOGIN_SUCCESS","accountAddress","identify","title","isTried","setIsTried","find","walletInfo","actions","action","modal","isWalletOpen","TOGGLE_WALLET_MODAL","Global","useImmerReducer","toggleWalletModal","WalletButton","src","activeConnector","isActiveConnector","handleOnClick","fontWeight","fontSize","justifyContent","bg","onClick","_hover","width","alignItems","mr","boxSize","CheckSvg","DisconnectButton","color","WalletListModal","isCentered","size","isOpen","onClose","pb","spacing","require","default","WalletFill","props","height","viewBox","fill","xmlns","getShortenAccount","ConnectBtn","colorScheme","variant","leftIcon","Header","h","to","ExternalLink","href","children","target","rel","GetStarted","isExternal","mx","isFullWidth","isDisabled","NoPosition","NoWallet","DataUnit","dir","textTransform","label","isClosePositionModalOpen","isAdjustMarginModalOpen","Position","openClosePositionModal","OPEN_CLOSE_POSITION_MODAL","closeClosePositionModal","CLOSE_CLOSE_POSITION_MODAL","openAdjustMarginModal","OPEN_ADJUST_MARGIN_MODAL","closeAdjustMarginModal","CLOSE_ADJUST_MARGIN_MODAL","PositionUnit","unrealizedPnl","margin","marginRatio","openNotional","isLongSide","gte","handleOnClosePositionClick","handleOnAdjustMarginClick","pnlStr","absSizeStr","abs","leverageStr","entryPriceStr","marginStr","marginRatioStr","direction","borderRadius","borderWidth","borderColor","p","minChildWidth","display","mb","positionInfo","setPositionInfo","getTraderPositionInfo","clearingHouseViewerContract","ClearingHouseViewerArtifact","sortedAmmList","values","sort","b","localeCompare","getPersonalPositionWithFundingPayment","getUnrealizedPnl","SpotPrice","rawPositionInfo","dataGroup1","dataGroup2","processedPositionInfo","_positionInfo","eq","getMarginRatio","marginRatioList","useInterval","columns","TxRejectError","BiconomyError","AmmError","ammName","funcName","getEtherscanTxLink","txId","prefix","TransactionAction","Transaction","setError","receipts","setReceipts","latestTx","setLatestTx","LATEST_TX_DATA","latestTxData","setLatestTxData","setIsInitialized","provider","resetTxStatus","checkReceipt","triedTimes","txHash","successTitle","successDesc","getTransactionReceipt","setTimeout","preExecute","option","infoTitle","infoMsg","defaultOption","infoDesc","successMsg","errorTitle","errorMsg","errorDesc","userConfirmTx","txAction","metaData","isRejected","isMetaTx","tx","hash","execute","latestTxMetaData","receipt","wait","prev","executeWithGasLimit","contract","gasLimitRatio","estimateGas","gasLimit","GENERAL","useContractCall","fn","deps","savedCallback","_fn","useContractEvent","eventName","callback","listener","on","off","useToken","erc20Contract","balance","setBalance","allowance","setAllowance","totalSupply","setTotalSupply","multicallProvider","attach","fetchToken","balanceOf","fetchBalance","queryAllowanceBySpender","spender","_allowance","approve","amount","APPROVE","approveInfinity","MaxUint256","owner","MyBalance","setCollateral","fixedBalance","w","SmallFormLabel","Trade","Long","side","setSide","leverage","setLeverage","slippage","setSlippage","collateral","useDebounce","delay","onBeforeDebounce","onAfterDebounce","debouncedValue","setDebouncedValue","handler","clearTimeout","Collateral","_collateral","_setCollateral","debouncedCollateral","handleOnInput","formattedValue","b_debouncedCollateral","onInput","textAlign","Leverage","_leverage","_setLeverage","debouncedLeverage","handleOnChange","px","pt","onChange","min","max","step","_focus","boxShadow","_highlighted","_grabbed","_pressed","_active","userSelect","transform","MarketSelector","isLoadingAmmMap","useRealtimeAmm","baseAssetReserve","setBaseAssetReserve","quoteAssetReserve","setQuoteAssetReserve","getInputPrice","notional","getOutputPrice","gt","AddToAmm","RemoveFromAmm","multiContract","getAssetReserve","usePositionSize","positionSize","setPositionSize","isCalculating","setIsCalculating","positionReceived","updatePositionByUserControl","isReadOnly","SideSwitcher","handleLongOnClick","handleShortOnClick","Short","isAttached","Slippage","allowMouseWheel","clampValueOnBlur","focusInputOnChange","ContractExecutor","increaseMargin","quoteAssetAmountLimit","quoteAssetAmount","minBaseAssetAmount","decreaseMargin","getAddress","executors","Xdai","currentExecutor","closePosition","openPosition","addMargin","d_increaseMargin","removeMargin","reduceMargin","d_reduceMargin","SendTxButton","isTxExecuting","handleOnTrade","_positionSize","_slippage","minPositionSizeReceived","disabled","TxInfoTable","setSize","setMargin","setUnrealizedPnl","outputPrice","setOutputPrice","updatePositionSize","b_size","_outputPrice","useOpenedPositionSize","openedSize","openedMargin","entryPrice","b_positionSize","fee","tollFee","spreadFee","add","priceImpactStr","spotPrice","sub","feeStr","totalStr","remainMargin","collateralToPay","overflow","isNumeric","Summary","borderStyle","theme","autosize","Home","tabIndex","setTabIndex","mt","py","setInterval","clearInterval","ClosePositionModal","isTxLoading","closePositionInfo","setClosePositionInfo","slippageLimit","quoteLimit","getClosePositionInfo","rawClearingHouseViewerData","AmmArtifact","rawAmmData","b_tollRatio","b_spreadRatio","b_notional","exitPriceStr","motionPreset","Margin","Add","marginDir","setMarginDir","AdjustButton","Reduce","MarginDirSwitcher","MarginInput","_margin","_setMargin","debouncedMargin","b_debouncedMargin","UpdatedInfo","adjustMarginDir","adjustMargin","marginInfo","setMarginInfo","getMarginInfo","rawData","newMarginRatio","AdjustMarginModal","Provider","IS_DEBUG_MODE","BlockedRegionModal","isBlockedRegion","setIsBlockedRegion","isDebugMode","blockedList","REACT_APP_BLOCKED_REGION","text","ret","line","isBlocked","some","loc","useIsBlockedRegion","scrollBehavior","closeOnEsc","closeOnOverlayClick","IS_TOS_AGREED","UserAgreementModal","isRead","setIsRead","isTosAgreed","setIsTosAgreed","handleOnCheck","App","maxW","path","Fonts","styles","getLibrary","Web3Provider","Web3ReactManager","suppress","useWeb3ReactCore","ethereum","handleConnect","handleChainChanged","handleAccountsChanged","accounts","removeListener","useInactiveListener","EventType","reportWebVitals","onPerfEntry","getCLS","getFID","getFCP","getLCP","getTTFB","initialColorMode","useSystemColorMode","colors","red","500","600","700","800","900","400","300","200","100","50","gray","green","teal","perpetual","orange","logo","main","accent","textMain","textSub","global","h1","fontFamily","letterSpacing","h2","h3","h4","h5","lineHeight","colorMode","textDecoration","opacity","li","ml","fonts","heading","subHeading","body","mono","Button","sizes","lg","md","sm","xs","Heading","radii","none","base","xl","full","extendTheme","writeKey","load","start","apiKey","appType","appVersion","REACT_APP_GITHUB_TAG","releaseStage","enabledReleaseStages","plugins","BugsnagPluginReact","ErrorBoundary","plugin","getPlugin","createErrorBoundary","React","Providers","reduceRight","component","ChakraProvider","BrowserRouter","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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M,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,mBACNkF,KAAM,SAER,CACES,WAAY,CACV,CACEV,aAAc,SACdjF,KAAM,IACNkF,KAAM,WAGVD,aAAc,qCACdjF,KAAM,gBACNkF,KAAM,UAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,gBACdjF,KAAM,OACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,UACNkF,KAAM,YAGVlF,KAAM,wBACNmF,QAAS,CACP,CACEQ,WAAY,CACV,CACEA,WAAY,CACV,CACEV,aAAc,SACdjF,KAAM,IACNkF,KAAM,WAGVD,aAAc,qCACdjF,KAAM,OACNkF,KAAM,SAER,CACES,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,SACNkF,KAAM,SAER,CACES,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,eACNkF,KAAM,SAER,CACES,WAAY,CACV,CACEV,aAAc,SACdjF,KAAM,IACNkF,KAAM,WAGVD,aAAc,qCACdjF,KAAM,uCACNkF,KAAM,SAER,CACED,aAAc,UACdjF,KAAM,wBACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,cACNkF,KAAM,YAGVD,aAAc,gCACdjF,KAAM,WACNkF,KAAM,UAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,kBACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,mBACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,0BACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,uBACNkF,KAAM,WAER,CACED,aAAc,0BACdjF,KAAM,iBACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,oBACNkF,KAAM,YAGVlF,KAAM,aACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,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F,KAAM,UAER,CACED,aAAc,SACdjF,KAAM,SACNkF,KAAM,UAER,CACED,aAAc,UACdjF,KAAM,YACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,YACNkF,KAAM,WAER,CACED,aAAc,SACdjF,KAAM,kBACNkF,KAAM,WAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,SACdjF,KAAM,WACNkF,KAAM,UAER,CACED,aAAc,SACdjF,KAAM,UACNkF,KAAM,UAER,CACED,aAAc,UACdjF,KAAM,aACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,aACNkF,KAAM,WAER,CACED,aAAc,SACdjF,KAAM,mBACNkF,KAAM,WAGVlF,KAAM,gBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,UACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,cAIJG,GACJ,mrECxJIT,IA7BwCC,KA6BjC,CACX,CACEC,WAAW,EACXC,OAAQ,CACN,CACEC,SAAS,EACTC,aAAc,UACdjF,KAAM,UACNkF,KAAM,WAER,CACEF,SAAS,EACTC,aAAc,UACdjF,KAAM,QACNkF,KAAM,WAER,CACEF,SAAS,EACTC,aAAc,UACdjF,KAAM,YACNkF,KAAM,YAGVlF,KAAM,eACNkF,KAAM,SAER,CACEH,OAAQ,GACR/E,KAAM,WACNmF,QAAS,CACP,CACEF,aAAc,QACdjF,KAAM,GACNkF,KAAM,UAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,cACNmF,QAAS,CACP,CACEF,aAAc,SACdjF,KAAM,GACNkF,KAAM,WAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,SACdjF,KAAM,WACNkF,KAAM,WAGVlF,KAAM,eACNmF,QAAS,CACP,CACEF,aAAc,SACdjF,KAAM,UACNkF,KAAM,UAER,CACED,aAAc,SACdjF,KAAM,SACNkF,KAAM,UAER,CACED,aAAc,UACdjF,KAAM,YACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,YACNkF,KAAM,WAER,CACED,aAAc,SACdjF,KAAM,kBACNkF,KAAM,WAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,kBACNmF,QAAS,CACP,CACEF,aAAc,SACdjF,KAAM,UACNkF,KAAM,UAER,CACED,aAAc,SACdjF,KAAM,SACNkF,KAAM,UAER,CACED,aAAc,UACdjF,KAAM,YACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,YACNkF,KAAM,WAER,CACED,aAAc,SACdjF,KAAM,kBACNkF,KAAM,WAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,SACdjF,KAAM,WACNkF,KAAM,UAER,CACED,aAAc,SACdjF,KAAM,UACNkF,KAAM,UAER,CACED,aAAc,UACdjF,KAAM,aACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,aACNkF,KAAM,WAER,CACED,aAAc,SACdjF,KAAM,mBACNkF,KAAM,WAGVlF,KAAM,gBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVlF,KAAM,wBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,UACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,cAIJG,GACJ,64FC1LIT,IA7B0CC,KA6BnC,CACX,CACEC,WAAW,EACXC,OAAQ,CACN,CACEC,SAAS,EACTC,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVlF,KAAM,yBACNkF,KAAM,SAER,CACEH,OAAQ,CACN,CACEE,aAAc,gBACdjF,KAAM,OACNkF,KAAM,WAER,CACES,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,eACNkF,KAAM,UAGVlF,KAAM,YACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,gBACdjF,KAAM,OACNkF,KAAM,WAER,CACES,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,yBACNkF,KAAM,UAGVlF,KAAM,gBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,gBACdjF,KAAM,OACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,UACNkF,KAAM,YAGVlF,KAAM,iBACNmF,QAAS,CACP,CACEQ,WAAY,CACV,CACEV,aAAc,SACdjF,KAAM,IACNkF,KAAM,WAGVD,aAAc,qCACdjF,KAAM,GACNkF,KAAM,UAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,gBACdjF,KAAM,OACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,UACNkF,KAAM,YAGVlF,KAAM,cACNmF,QAAS,CACP,CACEQ,WAAY,CACV,CACEA,WAAY,CACV,CACEV,aAAc,SACdjF,KAAM,IACNkF,KAAM,WAGVD,aAAc,qCACdjF,KAAM,OACNkF,KAAM,SAER,CACES,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,SACNkF,KAAM,SAER,CACES,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,eACNkF,KAAM,SAER,CACES,WAAY,CACV,CACEV,aAAc,SACdjF,KAAM,IACNkF,KAAM,WAGVD,aAAc,qCACdjF,KAAM,uCACNkF,KAAM,SAER,CACED,aAAc,UACdjF,KAAM,wBACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,cACNkF,KAAM,YAGVD,aAAc,iCACdjF,KAAM,GACNkF,KAAM,UAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,gBACdjF,KAAM,OACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,UACNkF,KAAM,YAGVlF,KAAM,YACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,gBACdjF,KAAM,OACNkF,KAAM,WAER,CACED,aAAc,2BACdjF,KAAM,QACNkF,KAAM,SAER,CACES,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,oBACNkF,KAAM,SAER,CACES,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,YACNkF,KAAM,SAER,CACES,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,wBACNkF,KAAM,UAGVlF,KAAM,eACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,gBACdjF,KAAM,OACNkF,KAAM,YAGVlF,KAAM,aACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,gBACdjF,KAAM,OACNkF,KAAM,WAER,CACES,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,iBACNkF,KAAM,UAGVlF,KAAM,eACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,gBACdjF,KAAM,OACNkF,KAAM,YAGVlF,KAAM,iBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,cAIJG,GACJ,y8DCjTIT,IA7BkCC,KA6B3B,CACX,CACEC,WAAW,EACXC,OAAQ,CACN,CACEC,SAAS,EACTC,aAAc,UACdjF,KAAM,QACNkF,KAAM,WAER,CACEF,SAAS,EACTC,aAAc,UACdjF,KAAM,UACNkF,KAAM,WAER,CACEF,SAAS,EACTC,aAAc,UACdjF,KAAM,QACNkF,KAAM,YAGVlF,KAAM,WACNkF,KAAM,SAER,CACEJ,WAAW,EACXC,OAAQ,CACN,CACEC,SAAS,EACTC,aAAc,UACdjF,KAAM,UACNkF,KAAM,YAGVlF,KAAM,SACNkF,KAAM,SAER,CACEJ,WAAW,EACXC,OAAQ,CACN,CACEC,SAAS,EACTC,aAAc,UACdjF,KAAM,OACNkF,KAAM,WAER,CACEF,SAAS,EACTC,aAAc,UACdjF,KAAM,UACNkF,KAAM,WAER,CACEF,SAAS,EACTC,aAAc,UACdjF,KAAM,SACNkF,KAAM,YAGVlF,KAAM,cACNkF,KAAM,SAER,CACEJ,WAAW,EACXC,OAAQ,CACN,CACEC,SAAS,EACTC,aAAc,UACdjF,KAAM,OACNkF,KAAM,WAER,CACEF,SAAS,EACTC,aAAc,UACdjF,KAAM,UACNkF,KAAM,WAER,CACEF,SAAS,EACTC,aAAc,UACdjF,KAAM,SACNkF,KAAM,YAGVlF,KAAM,cACNkF,KAAM,SAER,CACEJ,WAAW,EACXC,OAAQ,CACN,CACEC,SAAS,EACTC,aAAc,UACdjF,KAAM,OACNkF,KAAM,WAER,CACEF,SAAS,EACTC,aAAc,UACdjF,KAAM,KACNkF,KAAM,WAER,CACEF,SAAS,EACTC,aAAc,UACdjF,KAAM,QACNkF,KAAM,YAGVlF,KAAM,WACNkF,KAAM,SAER,CACEJ,WAAW,EACXC,OAAQ,CACN,CACEC,SAAS,EACTC,aAAc,UACdjF,KAAM,UACNkF,KAAM,YAGVlF,KAAM,WACNkF,KAAM,SAER,CACEH,OAAQ,GACR/E,KAAM,qBACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,cACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,cACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,QACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,UACNkF,KAAM,YAGVlF,KAAM,YACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,UACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,SACNkF,KAAM,YAGVlF,KAAM,UACNmF,QAAS,CACP,CACEF,aAAc,OACdjF,KAAM,GACNkF,KAAM,SAGVE,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,UACNkF,KAAM,YAGVlF,KAAM,YACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,SACNkF,KAAM,YAGVlF,KAAM,OACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,UACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,SACNkF,KAAM,YAGVlF,KAAM,WACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,WACNmF,QAAS,CACP,CACEF,aAAc,QACdjF,KAAM,GACNkF,KAAM,UAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,UACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,kBACNkF,KAAM,YAGVlF,KAAM,oBACNmF,QAAS,CACP,CACEF,aAAc,OACdjF,KAAM,GACNkF,KAAM,SAGVE,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,qBACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,OACNkF,KAAM,YAGVlF,KAAM,eACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,OACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,QACNkF,KAAM,YAGVlF,KAAM,gBACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,OACNkF,KAAM,YAGVlF,KAAM,qBACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,OACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,UACNkF,KAAM,YAGVlF,KAAM,YACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,OACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,UACNkF,KAAM,YAGVlF,KAAM,UACNmF,QAAS,CACP,CACEF,aAAc,OACdjF,KAAM,GACNkF,KAAM,SAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,UACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,aACNkF,KAAM,YAGVlF,KAAM,oBACNmF,QAAS,CACP,CACEF,aAAc,OACdjF,KAAM,GACNkF,KAAM,SAGVE,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,SACdjF,KAAM,OACNkF,KAAM,UAER,CACED,aAAc,SACdjF,KAAM,SACNkF,KAAM,WAGVlF,KAAM,aACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,gBACNkF,KAAM,WAER,CACED,aAAc,SACdjF,KAAM,OACNkF,KAAM,UAER,CACED,aAAc,SACdjF,KAAM,SACNkF,KAAM,UAER,CACED,aAAc,QACdjF,KAAM,UACNkF,KAAM,UAGVlF,KAAM,sBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,KACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,SACNkF,KAAM,YAGVlF,KAAM,OACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,gBACNkF,KAAM,YAGVlF,KAAM,4BACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,cACNkF,KAAM,YAGVlF,KAAM,oBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,OACNmF,QAAS,CACP,CACEF,aAAc,SACdjF,KAAM,GACNkF,KAAM,WAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,QACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,SACNmF,QAAS,CACP,CACEF,aAAc,OACdjF,KAAM,GACNkF,KAAM,SAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,OACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,UACNkF,KAAM,YAGVlF,KAAM,eACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,OACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,UACNkF,KAAM,YAGVlF,KAAM,aACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,SACNmF,QAAS,CACP,CACEF,aAAc,SACdjF,KAAM,GACNkF,KAAM,WAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,cACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,YACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,SACNkF,KAAM,YAGVlF,KAAM,WACNmF,QAAS,CACP,CACEF,aAAc,OACdjF,KAAM,GACNkF,KAAM,SAGVE,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,SACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,YACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,SACNkF,KAAM,YAGVlF,KAAM,eACNmF,QAAS,CACP,CACEF,aAAc,OACdjF,KAAM,GACNkF,KAAM,SAGVE,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,aACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,UACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,cAIJG,GACJ,6zfC/rBIT,IA7B4CC,KA6BrC,CACX,CACEE,OAAQ,CACN,CACEE,aAAc,kBACdjF,KAAM,GACNkF,KAAM,WAER,CACED,aAAc,kBACdjF,KAAM,GACNkF,KAAM,WAER,CACES,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,iBACNkF,KAAM,UAGVlF,KAAM,gBACNmF,QAAS,CACP,CACEQ,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,GACNkF,KAAM,UAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,kBACdjF,KAAM,GACNkF,KAAM,WAER,CACED,aAAc,kBACdjF,KAAM,GACNkF,KAAM,WAER,CACES,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,oBACNkF,KAAM,UAGVlF,KAAM,iBACNmF,QAAS,CACP,CACEQ,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,GACNkF,KAAM,UAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,kBACdjF,KAAM,GACNkF,KAAM,WAER,CACED,aAAc,kBACdjF,KAAM,GACNkF,KAAM,YAGVlF,KAAM,eACNmF,QAAS,CACP,CACEQ,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,GACNkF,KAAM,UAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,mBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEY,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,SACNkF,KAAM,UAGVlF,KAAM,mBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEY,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,SACNkF,KAAM,UAGVlF,KAAM,gBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,kBACdjF,KAAM,aACNkF,KAAM,WAER,CACED,aAAc,kBACdjF,KAAM,cACNkF,KAAM,WAER,CACES,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,iBACNkF,KAAM,SAER,CACES,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,GACNkF,KAAM,SAER,CACES,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,GACNkF,KAAM,UAGVlF,KAAM,YACNmF,QAAS,CACP,CACEQ,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,GACNkF,KAAM,UAGVE,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,kBACdjF,KAAM,aACNkF,KAAM,WAER,CACED,aAAc,kBACdjF,KAAM,cACNkF,KAAM,WAER,CACES,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,oBACNkF,KAAM,SAER,CACES,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,GACNkF,KAAM,SAER,CACES,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,GACNkF,KAAM,UAGVlF,KAAM,aACNmF,QAAS,CACP,CACEQ,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,GACNkF,KAAM,UAGVE,gBAAiB,aACjBF,KAAM,cAIJG,GACJ,2zPC9SIT,IA7B0CC,KA6BnC,CACX,CACEC,WAAW,EACXC,OAAQ,CACN,CACEC,SAAS,EACTC,aAAc,UACdjF,KAAM,SACNkF,KAAM,YAGVlF,KAAM,0BACNkF,KAAM,SAER,CACEJ,WAAW,EACXC,OAAQ,CACN,CACEC,SAAS,EACTC,aAAc,UACdjF,KAAM,SACNkF,KAAM,YAGVlF,KAAM,uBACNkF,KAAM,SAER,CACEH,OAAQ,CACN,CACEY,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,UACNkF,KAAM,UAGVlF,KAAM,qBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,SACNkF,KAAM,YAGVlF,KAAM,qBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,SACNkF,KAAM,YAGVlF,KAAM,WACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,QACNmF,QAAS,CACP,CACEF,aAAc,kBACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,cAIJG,GACJ,2qCCjFIT,IA/BwCC,KA+BjC,CACX,CACEE,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,SACNkF,KAAM,YAGVE,gBAAiB,aACjBF,KAAM,eAER,CACEJ,WAAW,EACXC,OAAQ,CACN,CACEC,SAAS,EACTC,aAAc,UACdjF,KAAM,MACNkF,KAAM,WAER,CACEF,SAAS,EACTC,aAAc,UACdjF,KAAM,QACNkF,KAAM,WAER,CACEF,SAAS,EACTC,aAAc,UACdjF,KAAM,YACNkF,KAAM,WAER,CACEF,SAAS,EACTC,aAAc,UACdjF,KAAM,UACNkF,KAAM,YAGVlF,KAAM,mBACNkF,KAAM,SAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVlF,KAAM,WACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,GACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVlF,KAAM,eACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,gBACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,SACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,aACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,WACNkF,KAAM,YAGVlF,KAAM,gBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,SACNkF,KAAM,YAGVlF,KAAM,WACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,SACNkF,KAAM,YAGVlF,KAAM,eACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,cAIJG,GACJ,ugCClJIT,IAlC4CC,KAkCrC,CACX,CACEE,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,oBACNkF,KAAM,YAGVE,gBAAiB,aACjBF,KAAM,eAER,CACEH,OAAQ,GACR/E,KAAM,QACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,YACNkF,KAAM,YAGVlF,KAAM,qBACNmF,QAAS,CACP,CACEF,aAAc,OACdjF,KAAM,GACNkF,KAAM,SAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,OACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,UACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,mBACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,mBACNmF,QAAS,CACP,CACEF,aAAc,SACdjF,KAAM,GACNkF,KAAM,WAGVE,gBAAiB,OACjBF,KAAM,cAIJG,GACJ,mkECxFIT,IAjC+CC,KAiCxC,CACX,CACEE,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,QACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,WACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,SACNkF,KAAM,YAGVlF,KAAM,cACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,cAIJG,GACJ,i5BC/BIT,IA7BsCC,KA6B/B,CACX,CACEE,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,eACNkF,KAAM,YAGVlF,KAAM,iBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,cACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,cAIJG,GACJ,ycCtBIT,IA/BsCC,KA+B/B,CACX,CACEE,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,SACNkF,KAAM,YAGVE,gBAAiB,aACjBF,KAAM,eAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVlF,KAAM,WACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,SACNkF,KAAM,YAGVlF,KAAM,WACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,cAIJG,GACJ,mhBCvDIT,IA7BuCC,KA6BhC,CACX,CACEE,OAAQ,GACR/E,KAAM,YACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,OACNkF,KAAM,YAGVlF,KAAM,mBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,QACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,qBACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,gBACNkF,KAAM,WAER,CACES,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,SACNkF,KAAM,SAER,CACED,aAAc,UACdjF,KAAM,aACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,WACNkF,KAAM,YAGVlF,KAAM,kBACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,aACjBF,KAAM,cAIJG,GACJ,mzBCzFIT,IA7B4CC,KA6BrC,CACX,CACEE,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVlF,KAAM,UACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,UACNkF,KAAM,YAGVlF,KAAM,YACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,UACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,WACNkF,KAAM,YAGVlF,KAAM,kBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,eACNkF,KAAM,YAGVlF,KAAM,sBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,cACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,cAIJG,GACJ,6/BClFIT,IAjCiDC,KAiC1C,CACX,CACEE,OAAQ,GACRK,gBAAiB,aACjBF,KAAM,eAER,CACEJ,WAAW,EACXC,OAAQ,CACN,CACEC,SAAS,EACTC,aAAc,UACdjF,KAAM,gBACNkF,KAAM,WAER,CACEF,SAAS,EACTC,aAAc,UACdjF,KAAM,WACNkF,KAAM,YAGVlF,KAAM,uBACNkF,KAAM,SAER,CACEH,OAAQ,GACR/E,KAAM,YACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,aACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,QACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,oBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,WACNkF,KAAM,YAGVlF,KAAM,WACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,cACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,cAIJG,GACJ,izHCxFIT,IAjC8CC,KAiCvC,CACX,CACEC,WAAW,EACXC,OAAQ,CACN,CACEC,SAAS,EACTC,aAAc,UACdjF,KAAM,YACNkF,KAAM,WAER,CACEF,SAAS,EACTC,aAAc,UACdjF,KAAM,WACNkF,KAAM,YAGVlF,KAAM,UACNkF,KAAM,SAER,CACEJ,WAAW,EACXC,OAAQ,CACN,CACEC,SAAS,EACTC,aAAc,UACdjF,KAAM,gBACNkF,KAAM,WAER,CACEF,SAAS,EACTC,aAAc,UACdjF,KAAM,WACNkF,KAAM,YAGVlF,KAAM,uBACNkF,KAAM,SAER,CACEH,OAAQ,GACR/E,KAAM,YACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,qBACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,SACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,OACNkF,KAAM,YAGVlF,KAAM,cACNmF,QAAS,CACP,CACEF,aAAc,SACdjF,KAAM,GACNkF,KAAM,WAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,WACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,QACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,kBACNkF,KAAM,WAER,CACED,aAAc,YACdjF,KAAM,eACNkF,KAAM,cAGVlF,KAAM,YACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,WACNkF,KAAM,WAER,CACES,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,OACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,UACNkF,KAAM,WAER,CACED,aAAc,YACdjF,KAAM,cACNkF,KAAM,cAGVD,aAAc,yCACdjF,KAAM,UACNkF,KAAM,YAGVlF,KAAM,aACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,GACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVlF,KAAM,UACNmF,QAAS,CACP,CACEF,aAAc,OACdjF,KAAM,GACNkF,KAAM,SAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,yBACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,kBACdjF,KAAM,SACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,iBACNkF,KAAM,YAGVlF,KAAM,aACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVlF,KAAM,oBACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVlF,KAAM,yBACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,SACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,OACNkF,KAAM,YAGVlF,KAAM,cACNmF,QAAS,CACP,CACEF,aAAc,YACdjF,KAAM,GACNkF,KAAM,cAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,6BACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,2BACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,UACNkF,KAAM,YAGVlF,KAAM,sBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,aACNkF,KAAM,YAGVlF,KAAM,yBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,QACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,oBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,QACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,cACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,mBACNkF,KAAM,YAGVlF,KAAM,kBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,WACNkF,KAAM,YAGVlF,KAAM,WACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,QACNmF,QAAS,CACP,CACEF,aAAc,kBACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,cACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,qBACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,QACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,kBACNkF,KAAM,WAER,CACED,aAAc,YACdjF,KAAM,eACNkF,KAAM,cAGVlF,KAAM,cACNmF,QAAS,CACP,CACEF,aAAc,OACdjF,KAAM,QACNkF,KAAM,SAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,gBACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVlF,KAAM,kBACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,cAIJG,GACJ,+8WC3eWa,GAAb,6FACE,SAAeV,EAAiBC,GAC9B,OAAO,IAAIC,KAASF,EAASZ,GAAMa,OAFvC,KAMMb,GAAO,CACX,CACEE,WAAW,EACXC,OAAQ,CACN,CACEC,SAAS,EACTC,aAAc,UACdjF,KAAM,QACNkF,KAAM,WAER,CACEF,SAAS,EACTC,aAAc,UACdjF,KAAM,UACNkF,KAAM,WAER,CACEF,SAAS,EACTC,aAAc,UACdjF,KAAM,QACNkF,KAAM,YAGVlF,KAAM,WACNkF,KAAM,SAER,CACEJ,WAAW,EACXC,OAAQ,CACN,CACEC,SAAS,EACTC,aAAc,UACdjF,KAAM,OACNkF,KAAM,WAER,CACEF,SAAS,EACTC,aAAc,UACdjF,KAAM,KACNkF,KAAM,WAER,CACEF,SAAS,EACTC,aAAc,UACdjF,KAAM,QACNkF,KAAM,YAGVlF,KAAM,WACNkF,KAAM,SAER,CACEH,OAAQ,GACR/E,KAAM,eACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,QACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,UACNkF,KAAM,YAGVlF,KAAM,YACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,UACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,QACNkF,KAAM,YAGVlF,KAAM,UACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,MACNkF,KAAM,YAGVlF,KAAM,YACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,cACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,KACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,QACNkF,KAAM,YAGVlF,KAAM,WACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,OACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,KACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,QACNkF,KAAM,YAGVlF,KAAM,eACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,aClJJN,IA/BkCC,KA+B3B,CACX,CACEE,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,iBACNkF,KAAM,YAGVE,gBAAiB,aACjBF,KAAM,eAER,CACEJ,WAAW,EACXC,OAAQ,CACN,CACEC,SAAS,EACTC,aAAc,UACdjF,KAAM,QACNkF,KAAM,WAER,CACEF,SAAS,EACTC,aAAc,UACdjF,KAAM,UACNkF,KAAM,WAER,CACEF,SAAS,EACTC,aAAc,UACdjF,KAAM,QACNkF,KAAM,YAGVlF,KAAM,WACNkF,KAAM,SAER,CACEJ,WAAW,EACXC,OAAQ,CACN,CACEC,SAAS,EACTC,aAAc,UACdjF,KAAM,gBACNkF,KAAM,WAER,CACEF,SAAS,EACTC,aAAc,UACdjF,KAAM,WACNkF,KAAM,YAGVlF,KAAM,uBACNkF,KAAM,SAER,CACEJ,WAAW,EACXC,OAAQ,CACN,CACEC,SAAS,EACTC,aAAc,UACdjF,KAAM,OACNkF,KAAM,WAER,CACEF,SAAS,EACTC,aAAc,UACdjF,KAAM,KACNkF,KAAM,WAER,CACEF,SAAS,EACTC,aAAc,UACdjF,KAAM,QACNkF,KAAM,YAGVlF,KAAM,WACNkF,KAAM,SAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,UACNkF,KAAM,YAGVlF,KAAM,YACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,QACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,UACNkF,KAAM,YAGVlF,KAAM,YACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,UACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,SACNkF,KAAM,YAGVlF,KAAM,UACNmF,QAAS,CACP,CACEF,aAAc,OACdjF,KAAM,GACNkF,KAAM,SAGVE,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,UACNkF,KAAM,YAGVlF,KAAM,YACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,YACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,WACNmF,QAAS,CACP,CACEF,aAAc,QACdjF,KAAM,GACNkF,KAAM,UAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,UACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,kBACNkF,KAAM,YAGVlF,KAAM,oBACNmF,QAAS,CACP,CACEF,aAAc,OACdjF,KAAM,GACNkF,KAAM,SAGVE,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,UACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,aACNkF,KAAM,YAGVlF,KAAM,oBACNmF,QAAS,CACP,CACEF,aAAc,OACdjF,KAAM,GACNkF,KAAM,SAGVE,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,UACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,SACNkF,KAAM,YAGVlF,KAAM,OACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVlF,KAAM,UACNmF,QAAS,CACP,CACEF,aAAc,OACdjF,KAAM,GACNkF,KAAM,SAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,OACNmF,QAAS,CACP,CACEF,aAAc,SACdjF,KAAM,GACNkF,KAAM,WAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,QACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,UACNkF,KAAM,YAGVlF,KAAM,eACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,oBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,WACNkF,KAAM,YAGVlF,KAAM,WACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,SACNmF,QAAS,CACP,CACEF,aAAc,SACdjF,KAAM,GACNkF,KAAM,WAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,cACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,YACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,SACNkF,KAAM,YAGVlF,KAAM,WACNmF,QAAS,CACP,CACEF,aAAc,OACdjF,KAAM,GACNkF,KAAM,SAGVE,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,SACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,YACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,SACNkF,KAAM,YAGVlF,KAAM,eACNmF,QAAS,CACP,CACEF,aAAc,OACdjF,KAAM,GACNkF,KAAM,SAGVE,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,cACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,cAIJG,GACJ,+oVCxaIT,IAjCgDC,KAiCzC,CACX,CACEC,WAAW,EACXC,OAAQ,CACN,CACEC,SAAS,EACTC,aAAc,UACdjF,KAAM,gBACNkF,KAAM,WAER,CACEF,SAAS,EACTC,aAAc,UACdjF,KAAM,WACNkF,KAAM,YAGVlF,KAAM,uBACNkF,KAAM,SAER,CACEJ,WAAW,EACXC,OAAQ,CACN,CACEC,SAAS,EACTC,aAAc,UACdjF,KAAM,SACNkF,KAAM,WAER,CACEF,SAAS,EACTC,aAAc,UACdjF,KAAM,YACNkF,KAAM,YAGVlF,KAAM,oBACNkF,KAAM,SAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,eACNkF,KAAM,WAER,CACES,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,UACNkF,KAAM,UAGVlF,KAAM,yBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,YACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,kBACdjF,KAAM,aACNkF,KAAM,WAER,CACES,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,UACNkF,KAAM,UAGVlF,KAAM,oBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVlF,KAAM,gBACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,cACNkF,KAAM,WAER,CACES,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,SACNkF,KAAM,UAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,SACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,eACNkF,KAAM,WAER,CACES,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,UACNkF,KAAM,UAGVlF,KAAM,0BACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,qBACNkF,KAAM,WAER,CACED,aAAc,4BACdjF,KAAM,oBACNkF,KAAM,YAGVlF,KAAM,aACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,2BACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,UACNkF,KAAM,YAGVlF,KAAM,sBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,aACNkF,KAAM,YAGVlF,KAAM,yBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,QACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,SACNkF,KAAM,YAGVlF,KAAM,4BACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,oBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,WACNkF,KAAM,YAGVlF,KAAM,WACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,cACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,cAIJG,GACJ,2gbCxRIT,IA7B0CC,KA6BnC,CACX,CACEE,OAAQ,GACRK,gBAAiB,aACjBF,KAAM,eAER,CACEH,OAAQ,CACN,CACEY,WAAY,CACV,CACEV,aAAc,SACdjF,KAAM,IACNkF,KAAM,WAGVD,aAAc,qCACdjF,KAAM,IACNkF,KAAM,SAER,CACES,WAAY,CACV,CACEV,aAAc,SACdjF,KAAM,IACNkF,KAAM,WAGVD,aAAc,qCACdjF,KAAM,IACNkF,KAAM,UAGVlF,KAAM,MACNmF,QAAS,CACP,CACEQ,WAAY,CACV,CACEV,aAAc,SACdjF,KAAM,IACNkF,KAAM,WAGVD,aAAc,qCACdjF,KAAM,IACNkF,KAAM,UAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEY,WAAY,CACV,CACEV,aAAc,SACdjF,KAAM,IACNkF,KAAM,WAGVD,aAAc,qCACdjF,KAAM,IACNkF,KAAM,SAER,CACED,aAAc,SACdjF,KAAM,IACNkF,KAAM,WAGVlF,KAAM,YACNmF,QAAS,CACP,CACEQ,WAAY,CACV,CACEV,aAAc,SACdjF,KAAM,IACNkF,KAAM,WAGVD,aAAc,qCACdjF,KAAM,IACNkF,KAAM,UAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEY,WAAY,CACV,CACEV,aAAc,SACdjF,KAAM,IACNkF,KAAM,WAGVD,aAAc,qCACdjF,KAAM,IACNkF,KAAM,SAER,CACES,WAAY,CACV,CACEV,aAAc,SACdjF,KAAM,IACNkF,KAAM,WAGVD,aAAc,qCACdjF,KAAM,IACNkF,KAAM,UAGVlF,KAAM,MACNmF,QAAS,CACP,CACEQ,WAAY,CACV,CACEV,aAAc,SACdjF,KAAM,IACNkF,KAAM,WAGVD,aAAc,qCACdjF,KAAM,IACNkF,KAAM,UAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEY,WAAY,CACV,CACEV,aAAc,SACdjF,KAAM,IACNkF,KAAM,WAGVD,aAAc,qCACdjF,KAAM,IACNkF,KAAM,SAER,CACED,aAAc,SACdjF,KAAM,IACNkF,KAAM,WAGVlF,KAAM,YACNmF,QAAS,CACP,CACEQ,WAAY,CACV,CACEV,aAAc,SACdjF,KAAM,IACNkF,KAAM,WAGVD,aAAc,qCACdjF,KAAM,IACNkF,KAAM,UAGVE,gBAAiB,OACjBF,KAAM,cAIJG,GACJ,q5EC/KIT,IA7B4CC,KA6BrC,CACX,CACEC,WAAW,EACXC,OAAQ,CACN,CACEC,SAAS,EACTC,aAAc,UACdjF,KAAM,QACNkF,KAAM,WAER,CACEF,SAAS,EACTC,aAAc,UACdjF,KAAM,UACNkF,KAAM,WAER,CACEF,SAAS,EACTC,aAAc,UACdjF,KAAM,QACNkF,KAAM,YAGVlF,KAAM,WACNkF,KAAM,SAER,CACEJ,WAAW,EACXC,OAAQ,CACN,CACEC,SAAS,EACTC,aAAc,UACdjF,KAAM,gBACNkF,KAAM,WAER,CACEF,SAAS,EACTC,aAAc,UACdjF,KAAM,WACNkF,KAAM,YAGVlF,KAAM,uBACNkF,KAAM,SAER,CACEJ,WAAW,EACXC,OAAQ,CACN,CACEC,SAAS,EACTC,aAAc,UACdjF,KAAM,eACNkF,KAAM,YAGVlF,KAAM,mBACNkF,KAAM,SAER,CACEJ,WAAW,EACXC,OAAQ,CACN,CACEC,SAAS,EACTC,aAAc,UACdjF,KAAM,eACNkF,KAAM,YAGVlF,KAAM,qBACNkF,KAAM,SAER,CACEJ,WAAW,EACXC,OAAQ,CACN,CACEC,SAAS,EACTC,aAAc,UACdjF,KAAM,SACNkF,KAAM,WAER,CACEF,SAAS,EACTC,aAAc,UACdjF,KAAM,SACNkF,KAAM,YAGVlF,KAAM,SACNkF,KAAM,SAER,CACEJ,WAAW,EACXC,OAAQ,CACN,CACEC,SAAS,EACTC,aAAc,UACdjF,KAAM,OACNkF,KAAM,WAER,CACEF,SAAS,EACTC,aAAc,UACdjF,KAAM,KACNkF,KAAM,WAER,CACEF,SAAS,EACTC,aAAc,UACdjF,KAAM,QACNkF,KAAM,YAGVlF,KAAM,WACNkF,KAAM,SAER,CACEJ,WAAW,EACXC,OAAQ,CACN,CACEC,SAAS,EACTC,aAAc,UACdjF,KAAM,SACNkF,KAAM,WAER,CACEF,SAAS,EACTC,aAAc,UACdjF,KAAM,SACNkF,KAAM,YAGVlF,KAAM,WACNkF,KAAM,SAER,CACEJ,WAAW,EACXC,OAAQ,CACN,CACEC,SAAS,EACTC,aAAc,UACdjF,KAAM,SACNkF,KAAM,WAER,CACEF,SAAS,EACTC,aAAc,UACdjF,KAAM,SACNkF,KAAM,YAGVlF,KAAM,YACNkF,KAAM,SAER,CACEH,OAAQ,GACR/E,KAAM,qBACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,wBACdjF,KAAM,eACNkF,KAAM,YAGVlF,KAAM,iBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,GACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVlF,KAAM,YACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,GACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVlF,KAAM,UACNmF,QAAS,CACP,CACEF,aAAc,OACdjF,KAAM,GACNkF,KAAM,SAGVE,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,SACNkF,KAAM,YAGVlF,KAAM,YACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,SACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,gBACNkF,KAAM,YAGVlF,KAAM,cACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,YACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,iBACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,WACNmF,QAAS,CACP,CACEF,aAAc,QACdjF,KAAM,GACNkF,KAAM,UAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,uBACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,kBACdjF,KAAM,aACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,kBACNkF,KAAM,YAGVlF,KAAM,aACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,wBACdjF,KAAM,eACNkF,KAAM,YAGVlF,KAAM,uBACNmF,QAAS,CACP,CACEF,aAAc,OACdjF,KAAM,GACNkF,KAAM,SAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,6BACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,2BACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,UACNkF,KAAM,YAGVlF,KAAM,sBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,aACNkF,KAAM,YAGVlF,KAAM,yBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,OACNmF,QAAS,CACP,CACEF,aAAc,SACdjF,KAAM,GACNkF,KAAM,WAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,QACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,YACNmF,QAAS,CACP,CACEF,aAAc,kBACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,wBACdjF,KAAM,eACNkF,KAAM,YAGVlF,KAAM,oBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,oBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,WACNkF,KAAM,YAGVlF,KAAM,WACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEY,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,UACNkF,KAAM,UAGVlF,KAAM,QACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVlF,KAAM,eACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVlF,KAAM,iBACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVlF,KAAM,+BACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,SACNmF,QAAS,CACP,CACEF,aAAc,SACdjF,KAAM,GACNkF,KAAM,WAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,cACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,gBACNkF,KAAM,YAGVlF,KAAM,gBACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,GACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVlF,KAAM,WACNmF,QAAS,CACP,CACEF,aAAc,OACdjF,KAAM,GACNkF,KAAM,SAGVE,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,GACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,GACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVlF,KAAM,eACNmF,QAAS,CACP,CACEF,aAAc,OACdjF,KAAM,GACNkF,KAAM,SAGVE,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,UACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,cACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,WACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,cAIJG,GACJ,untBC1qBIT,IA7B2CC,KA6BpC,CACX,CACEC,WAAW,EACXC,OAAQ,CACN,CACEC,SAAS,EACTC,aAAc,UACdjF,KAAM,QACNkF,KAAM,WAER,CACEF,SAAS,EACTC,aAAc,UACdjF,KAAM,MACNkF,KAAM,WAER,CACEF,SAAS,EACTC,aAAc,UACdjF,KAAM,QACNkF,KAAM,YAGVlF,KAAM,aACNkF,KAAM,SAER,CACEJ,WAAW,EACXC,OAAQ,CACN,CACEC,SAAS,EACTC,aAAc,UACdjF,KAAM,gBACNkF,KAAM,WAER,CACEF,SAAS,EACTC,aAAc,UACdjF,KAAM,WACNkF,KAAM,YAGVlF,KAAM,uBACNkF,KAAM,SAER,CACEJ,WAAW,EACXC,OAAQ,CACN,CACEC,SAAS,EACTC,aAAc,UACdjF,KAAM,SACNkF,KAAM,WAER,CACEF,SAAS,EACTC,aAAc,UACdjF,KAAM,SACNkF,KAAM,YAGVlF,KAAM,kBACNkF,KAAM,SAER,CACEH,OAAQ,GACR/E,KAAM,YACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,2BACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEY,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,UACNkF,KAAM,UAGVlF,KAAM,kBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVlF,KAAM,qBACNmF,QAAS,CACP,CACEQ,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,aACNkF,KAAM,UAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,kBACdjF,KAAM,GACNkF,KAAM,YAGVlF,KAAM,SACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,cACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVlF,KAAM,YACNmF,QAAS,CACP,CACEF,aAAc,kBACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,8BACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,UACNkF,KAAM,YAGVlF,KAAM,oBACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,SACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,SACNkF,KAAM,YAGVlF,KAAM,gBACNmF,QAAS,CACP,CACEQ,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,GACNkF,KAAM,UAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,UACNkF,KAAM,YAGVlF,KAAM,gBACNmF,QAAS,CACP,CACEQ,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,QACNkF,KAAM,WAER,CACES,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,UACNkF,KAAM,UAGVD,aAAc,qCACdjF,KAAM,aACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,UACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,cACNkF,KAAM,YAGVlF,KAAM,mBACNmF,QAAS,CACP,CACEQ,WAAY,CACV,CACEV,aAAc,OACdjF,KAAM,QACNkF,KAAM,QAER,CACES,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,SACNkF,KAAM,SAER,CACES,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,qBACNkF,KAAM,UAGVD,aAAc,sCACdjF,KAAM,GACNkF,KAAM,UAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,UACNkF,KAAM,YAGVlF,KAAM,uBACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,kBACNmF,QAAS,CACP,CACEQ,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,GACNkF,KAAM,UAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,cACNkF,KAAM,YAGVlF,KAAM,yBACNmF,QAAS,CACP,CACEQ,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,GACNkF,KAAM,UAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,UACNkF,KAAM,YAGVlF,KAAM,qBACNmF,QAAS,CACP,CACEQ,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,GACNkF,KAAM,UAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,UACNkF,KAAM,YAGVlF,KAAM,uBACNmF,QAAS,CACP,CACEQ,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,GACNkF,KAAM,UAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,UACNkF,KAAM,YAGVlF,KAAM,kBACNmF,QAAS,CACP,CACEQ,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,SACNkF,KAAM,UAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,aACNkF,KAAM,WAER,CACED,aAAc,0BACdjF,KAAM,kBACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,eACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,iBACNkF,KAAM,YAGVlF,KAAM,aACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,kBACdjF,KAAM,SACNkF,KAAM,YAGVlF,KAAM,oBACNmF,QAAS,CACP,CACEF,aAAc,OACdjF,KAAM,GACNkF,KAAM,SAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,2BACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,UACNkF,KAAM,YAGVlF,KAAM,sBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,aACNkF,KAAM,YAGVlF,KAAM,yBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,iBACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEY,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,UACNkF,KAAM,UAGVlF,KAAM,qBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,kBACdjF,KAAM,SACNkF,KAAM,WAER,CACES,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,UACNkF,KAAM,UAGVlF,KAAM,oBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,QACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,YACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,oBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,sBACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,YACNkF,KAAM,YAGVlF,KAAM,iBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,WACNkF,KAAM,YAGVlF,KAAM,WACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,uBACNkF,KAAM,YAGVlF,KAAM,yBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,iBACNkF,KAAM,YAGVlF,KAAM,mBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEY,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,UACNkF,KAAM,UAGVlF,KAAM,QACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVlF,KAAM,kBACNmF,QAAS,CACP,CACEF,aAAc,OACdjF,KAAM,QACNkF,KAAM,QAER,CACES,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,eACNkF,KAAM,SAER,CACED,aAAc,UACdjF,KAAM,oBACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,iBACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVlF,KAAM,UACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,QACNmF,QAAS,CACP,CACEF,aAAc,kBACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEY,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,UACNkF,KAAM,UAGVlF,KAAM,UACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,cACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,gBACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEY,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,UACNkF,KAAM,UAGVlF,KAAM,WACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,cAIJG,GACJ,6w2BC92BIT,IA7B2CC,KA6BpC,CACX,CACEC,WAAW,EACXC,OAAQ,CACN,CACEC,SAAS,EACTC,aAAc,UACdjF,KAAM,gBACNkF,KAAM,WAER,CACEF,SAAS,EACTC,aAAc,UACdjF,KAAM,WACNkF,KAAM,YAGVlF,KAAM,uBACNkF,KAAM,SAER,CACEH,OAAQ,GACR/E,KAAM,YACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,YACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,gBACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,mBACdjF,KAAM,UACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,iBACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,aACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,gBACNkF,KAAM,YAGVlF,KAAM,aACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,aACNmF,QAAS,CACP,CACEF,aAAc,OACdjF,KAAM,GACNkF,KAAM,SAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,YACNmF,QAAS,CACP,CACEF,aAAc,OACdjF,KAAM,GACNkF,KAAM,SAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,eACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,iBACNmF,QAAS,CACP,CACEQ,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,GACNkF,KAAM,UAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,2BACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,UACNkF,KAAM,YAGVlF,KAAM,sBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,aACNkF,KAAM,YAGVlF,KAAM,yBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,eACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,QACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,kBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,oBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEY,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,aACNkF,KAAM,UAGVlF,KAAM,eACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,WACNkF,KAAM,YAGVlF,KAAM,WACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,gBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,qBACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,cACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,cAIJG,GACJ,qxRChSIT,IA7BgCC,KA6BzB,CACX,CACEE,OAAQ,GACRK,gBAAiB,aACjBF,KAAM,eAER,CACEH,OAAQ,GACR/E,KAAM,QACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,WACNkF,KAAM,YAGVlF,KAAM,oBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,cAIJG,GACJ,6rBCnCIT,IA7BiCC,KA6B1B,CACX,CACEC,WAAW,EACXC,OAAQ,GACR/E,KAAM,QACNkF,KAAM,SAER,CACEJ,WAAW,EACXC,OAAQ,GACR/E,KAAM,UACNkF,KAAM,SAER,CACEH,OAAQ,GACR/E,KAAM,QACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,QACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,SACNmF,QAAS,CACP,CACEF,aAAc,OACdjF,KAAM,GACNkF,KAAM,SAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,WACNkF,KAAM,YAGVlF,KAAM,oBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,UACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,cAIJG,GACJ,m1CC3CIT,IAjDoCC,KAiD7B,CACX,CACEE,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,iBACNkF,KAAM,WAER,CACED,aAAc,SACdjF,KAAM,QACNkF,KAAM,UAER,CACED,aAAc,SACdjF,KAAM,UACNkF,KAAM,UAER,CACED,aAAc,UACdjF,KAAM,YACNkF,KAAM,YAGVE,gBAAiB,aACjBF,KAAM,eAER,CACEJ,WAAW,EACXC,OAAQ,CACN,CACEC,SAAS,EACTC,aAAc,UACdjF,KAAM,QACNkF,KAAM,YAGVlF,KAAM,iBACNkF,KAAM,SAER,CACEJ,WAAW,EACXC,OAAQ,CACN,CACEC,SAAS,EACTC,aAAc,UACdjF,KAAM,QACNkF,KAAM,WAER,CACEF,SAAS,EACTC,aAAc,UACdjF,KAAM,UACNkF,KAAM,WAER,CACEF,SAAS,EACTC,aAAc,UACdjF,KAAM,QACNkF,KAAM,YAGVlF,KAAM,WACNkF,KAAM,SAER,CACEJ,WAAW,EACXC,OAAQ,CACN,CACEC,SAAS,EACTC,aAAc,UACdjF,KAAM,aACNkF,KAAM,YAGVlF,KAAM,YACNkF,KAAM,SAER,CACEJ,WAAW,EACXC,OAAQ,CACN,CACEC,SAAS,EACTC,aAAc,UACdjF,KAAM,mBACNkF,KAAM,WAER,CACEF,SAAS,EACTC,aAAc,UACdjF,KAAM,WACNkF,KAAM,YAGVlF,KAAM,sBACNkF,KAAM,SAER,CACEJ,WAAW,EACXC,OAAQ,CACN,CACEC,SAAS,EACTC,aAAc,UACdjF,KAAM,SACNkF,KAAM,YAGVlF,KAAM,QACNkF,KAAM,SAER,CACEJ,WAAW,EACXC,OAAQ,CACN,CACEC,SAAS,EACTC,aAAc,UACdjF,KAAM,iBACNkF,KAAM,WAER,CACEF,SAAS,EACTC,aAAc,UACdjF,KAAM,SACNkF,KAAM,YAGVlF,KAAM,SACNkF,KAAM,SAER,CACEJ,WAAW,EACXC,OAAQ,GACR/E,KAAM,QACNkF,KAAM,SAER,CACEJ,WAAW,EACXC,OAAQ,CACN,CACEC,SAAS,EACTC,aAAc,UACdjF,KAAM,SACNkF,KAAM,YAGVlF,KAAM,SACNkF,KAAM,SAER,CACEJ,WAAW,EACXC,OAAQ,CACN,CACEC,SAAS,EACTC,aAAc,UACdjF,KAAM,QACNkF,KAAM,YAGVlF,KAAM,mBACNkF,KAAM,SAER,CACEJ,WAAW,EACXC,OAAQ,CACN,CACEC,SAAS,EACTC,aAAc,UACdjF,KAAM,OACNkF,KAAM,WAER,CACEF,SAAS,EACTC,aAAc,UACdjF,KAAM,KACNkF,KAAM,WAER,CACEF,SAAS,EACTC,aAAc,UACdjF,KAAM,QACNkF,KAAM,YAGVlF,KAAM,WACNkF,KAAM,SAER,CACEJ,WAAW,EACXC,OAAQ,GACR/E,KAAM,UACNkF,KAAM,SAER,CACEH,OAAQ,GACR/E,KAAM,WACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,eACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,YACNkF,KAAM,YAGVlF,KAAM,eACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,SACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,WACNkF,KAAM,YAGVlF,KAAM,YACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,YACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,GACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVlF,KAAM,UACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,WACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,SACNkF,KAAM,YAGVlF,KAAM,UACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,MACNkF,KAAM,YAGVlF,KAAM,YACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVlF,KAAM,WACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,kBACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,WACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,mBACNkF,KAAM,YAGVlF,KAAM,YACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,aACNmF,QAAS,CACP,CACEF,aAAc,OACdjF,KAAM,GACNkF,KAAM,SAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,mBACNkF,KAAM,YAGVlF,KAAM,oBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,SACNkF,KAAM,YAGVlF,KAAM,qBACNmF,QAAS,CACP,CACEF,aAAc,OACdjF,KAAM,GACNkF,KAAM,SAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,WACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVlF,KAAM,gBACNmF,QAAS,CACP,CACEF,aAAc,OACdjF,KAAM,GACNkF,KAAM,SAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,SACNkF,KAAM,YAGVlF,KAAM,QACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,aACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,OACNmF,QAAS,CACP,CACEF,aAAc,SACdjF,KAAM,GACNkF,KAAM,WAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,QACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,QACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,SACNmF,QAAS,CACP,CACEF,aAAc,OACdjF,KAAM,GACNkF,KAAM,SAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,SACNkF,KAAM,YAGVlF,KAAM,SACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,eACNkF,KAAM,YAGVlF,KAAM,kBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,iBACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,YACNkF,KAAM,YAGVlF,KAAM,YACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,SACNmF,QAAS,CACP,CACEF,aAAc,SACdjF,KAAM,GACNkF,KAAM,WAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,cACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,MACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,SACNkF,KAAM,YAGVlF,KAAM,WACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,QACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,MACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,SACNkF,KAAM,YAGVlF,KAAM,eACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,WACNkF,KAAM,YAGVlF,KAAM,oBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,UACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,kBACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,cAIJG,GACJ,2rYChrBIT,IArCqCC,KAqC9B,CACX,CACEE,OAAQ,CACN,CACEE,aAAc,6BACdjF,KAAM,iBACNkF,KAAM,WAER,CACED,aAAc,kBACdjF,KAAM,SACNkF,KAAM,YAGVE,gBAAiB,aACjBF,KAAM,eAER,CACEH,OAAQ,GACR/E,KAAM,gBACNmF,QAAS,CACP,CACEF,aAAc,6BACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,eACdjF,KAAM,OACNkF,KAAM,YAGVlF,KAAM,gBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,eACdjF,KAAM,OACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,UACNkF,KAAM,YAGVlF,KAAM,YACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,+BACdjF,KAAM,WACNkF,KAAM,SAER,CACED,aAAc,OACdjF,KAAM,kBACNkF,KAAM,QAER,CACED,aAAc,+BACdjF,KAAM,WACNkF,KAAM,SAER,CACED,aAAc,eACdjF,KAAM,OACNkF,KAAM,WAER,CACED,aAAc,0BACdjF,KAAM,QACNkF,KAAM,SAER,CACES,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,oBACNkF,KAAM,SAER,CACES,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,YACNkF,KAAM,SAER,CACES,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,wBACNkF,KAAM,SAER,CACED,aAAc,UACdjF,KAAM,UACNkF,KAAM,YAGVlF,KAAM,eACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,eACdjF,KAAM,OACNkF,KAAM,WAER,CACED,aAAc,0BACdjF,KAAM,QACNkF,KAAM,SAER,CACES,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,oBACNkF,KAAM,SAER,CACES,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,YACNkF,KAAM,SAER,CACES,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,sBACNkF,KAAM,UAGVlF,KAAM,eACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,eACdjF,KAAM,OACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,WACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,WACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,WACNkF,KAAM,YAGV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kF,KAAM,SAER,CACEH,OAAQ,GACR/E,KAAM,YACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,qBACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,SACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,OACNkF,KAAM,YAGVlF,KAAM,cACNmF,QAAS,CACP,CACEF,aAAc,SACdjF,KAAM,GACNkF,KAAM,WAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,WACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,QACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,kBACNkF,KAAM,WAER,CACED,aAAc,YACdjF,KAAM,eACNkF,KAAM,cAGVlF,KAAM,YACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,WACNkF,KAAM,WAER,CACES,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,OACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,UACNkF,KAAM,WAER,CACED,aAAc,YACdjF,KAAM,cACNkF,KAAM,cAGVD,aAAc,yCACdjF,KAAM,UACNkF,KAAM,YAGVlF,KAAM,aACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,GACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVlF,KAAM,UACNmF,QAAS,CACP,CACEF,aAAc,OACdjF,KAAM,GACNkF,KAAM,SAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,yBACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,kBACdjF,KAAM,SACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,iBACNkF,KAAM,YAGVlF,KAAM,aACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVlF,KAAM,oBACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVlF,KAAM,yBACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,SACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,OACNkF,KAAM,YAGVlF,KAAM,cACNmF,QAAS,CACP,CACEF,aAAc,YACdjF,KAAM,GACNkF,KAAM,cAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,QACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,oBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,QACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,cACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,mBACNkF,KAAM,YAGVlF,KAAM,kBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,WACNkF,KAAM,YAGVlF,KAAM,WACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,QACNmF,QAAS,CACP,CACEF,aAAc,kBACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,cACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,qBACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,QACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,kBACNkF,KAAM,WAER,CACED,aAAc,YACdjF,KAAM,eACNkF,KAAM,cAGVlF,KAAM,cACNmF,QAAS,CACP,CACEF,aAAc,OACdjF,KAAM,QACNkF,KAAM,SAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,gBACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVlF,KAAM,kBACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,cAIJG,GACJ,isXCtZIT,IA7BwCC,KA6BjC,CACX,CACEC,WAAW,EACXC,OAAQ,CACN,CACEC,SAAS,EACTC,aAAc,UACdjF,KAAM,QACNkF,KAAM,WAER,CACEF,SAAS,EACTC,aAAc,UACdjF,KAAM,UACNkF,KAAM,WAER,CACEF,SAAS,EACTC,aAAc,UACdjF,KAAM,QACNkF,KAAM,YAGVlF,KAAM,WACNkF,KAAM,SAER,CACEJ,WAAW,EACXC,OAAQ,CACN,CACEC,SAAS,EACTC,aAAc,UACdjF,KAAM,gBACNkF,KAAM,WAER,CACEF,SAAS,EACTC,aAAc,UACdjF,KAAM,WACNkF,KAAM,YAGVlF,KAAM,uBACNkF,KAAM,SAER,CACEJ,WAAW,EACXC,OAAQ,CACN,CACEC,SAAS,EACTC,aAAc,UACdjF,KAAM,eACNkF,KAAM,YAGVlF,KAAM,mBACNkF,KAAM,SAER,CACEJ,WAAW,EACXC,OAAQ,CACN,CACEC,SAAS,EACTC,aAAc,UACdjF,KAAM,eACNkF,KAAM,YAGVlF,KAAM,qBACNkF,KAAM,SAER,CACEJ,WAAW,EACXC,OAAQ,CACN,CACEC,SAAS,EACTC,aAAc,UACdjF,KAAM,SACNkF,KAAM,WAER,CACEF,SAAS,EACTC,aAAc,UACdjF,KAAM,SACNkF,KAAM,YAGVlF,KAAM,SACNkF,KAAM,SAER,CACEJ,WAAW,EACXC,OAAQ,CACN,CACEC,SAAS,EACTC,aAAc,UACdjF,KAAM,OACNkF,KAAM,WAER,CACEF,SAAS,EACTC,aAAc,UACdjF,KAAM,KACNkF,KAAM,WAER,CACEF,SAAS,EACTC,aAAc,UACdjF,KAAM,QACNkF,KAAM,YAGVlF,KAAM,WACNkF,KAAM,SAER,CACEJ,WAAW,EACXC,OAAQ,CACN,CACEC,SAAS,EACTC,aAAc,UACdjF,KAAM,SACNkF,KAAM,WAER,CACEF,SAAS,EACTC,aAAc,UACdjF,KAAM,SACNkF,KAAM,YAGVlF,KAAM,WACNkF,KAAM,SAER,CACEJ,WAAW,EACXC,OAAQ,CACN,CACEC,SAAS,EACTC,aAAc,UACdjF,KAAM,SACNkF,KAAM,WAER,CACEF,SAAS,EACTC,aAAc,UACdjF,KAAM,SACNkF,KAAM,YAGVlF,KAAM,YACNkF,KAAM,SAER,CACEH,OAAQ,GACR/E,KAAM,qBACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,wBACdjF,KAAM,eACNkF,KAAM,YAGVlF,KAAM,iBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,GACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVlF,KAAM,YACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,GACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVlF,KAAM,UACNmF,QAAS,CACP,CACEF,aAAc,OACdjF,KAAM,GACNkF,KAAM,SAGVE,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,SACNkF,KAAM,YAGVlF,KAAM,YACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,SACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,gBACNkF,KAAM,YAGVlF,KAAM,cACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,YACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,iBACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,WACNmF,QAAS,CACP,CACEF,aAAc,QACdjF,KAAM,GACNkF,KAAM,UAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,uBACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,kBACdjF,KAAM,aACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,kBACNkF,KAAM,YAGVlF,KAAM,aACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,wBACdjF,KAAM,eACNkF,KAAM,YAGVlF,KAAM,uBACNmF,QAAS,CACP,CACEF,aAAc,OACdjF,KAAM,GACNkF,KAAM,SAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,OACNmF,QAAS,CACP,CACEF,aAAc,SACdjF,KAAM,GACNkF,KAAM,WAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,QACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,YACNmF,QAAS,CACP,CACEF,aAAc,kBACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,wBACdjF,KAAM,eACNkF,KAAM,YAGVlF,KAAM,oBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,oBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,WACNkF,KAAM,YAGVlF,KAAM,WACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEY,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,UACNkF,KAAM,UAGVlF,KAAM,QACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVlF,KAAM,eACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVlF,KAAM,iBACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVlF,KAAM,+BACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,SACNmF,QAAS,CACP,CACEF,aAAc,SACdjF,KAAM,GACNkF,KAAM,WAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,cACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,gBACNkF,KAAM,YAGVlF,KAAM,gBACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,GACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVlF,KAAM,WACNmF,QAAS,CACP,CACEF,aAAc,OACdjF,KAAM,GACNkF,KAAM,SAGVE,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,GACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,GACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVlF,KAAM,eACNmF,QAAS,CACP,CACEF,aAAc,OACdjF,KAAM,GACNkF,KAAM,SAGVE,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,UACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,cACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,WACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,cAIJG,GACJ,q0sBCtnBIT,IA7BuCC,KA6BhC,CACX,CACEC,WAAW,EACXC,OAAQ,CACN,CACEC,SAAS,EACTC,aAAc,UACdjF,KAAM,QACNkF,KAAM,WAER,CACEF,SAAS,EACTC,aAAc,UACdjF,KAAM,MACNkF,KAAM,WAER,CACEF,SAAS,EACTC,aAAc,UACdjF,KAAM,QACNkF,KAAM,YAGVlF,KAAM,aACNkF,KAAM,SAER,CACEJ,WAAW,EACXC,OAAQ,CACN,CACEC,SAAS,EACTC,aAAc,UACdjF,KAAM,gBACNkF,KAAM,WAER,CACEF,SAAS,EACTC,aAAc,UACdjF,KAAM,WACNkF,KAAM,YAGVlF,KAAM,uBACNkF,KAAM,SAER,CACEJ,WAAW,EACXC,OAAQ,CACN,CACEC,SAAS,EACTC,aAAc,UACdjF,KAAM,SACNkF,KAAM,WAER,CACEF,SAAS,EACTC,aAAc,UACdjF,KAAM,SACNkF,KAAM,YAGVlF,KAAM,kBACNkF,KAAM,SAER,CACEH,OAAQ,GACR/E,KAAM,YACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,2BACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEY,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,UACNkF,KAAM,UAGVlF,KAAM,kBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVlF,KAAM,qBACNmF,QAAS,CACP,CACEQ,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,aACNkF,KAAM,UAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,kBACdjF,KAAM,GACNkF,KAAM,YAGVlF,KAAM,SACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,cACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVlF,KAAM,YACNmF,QAAS,CACP,CACEF,aAAc,kBACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,8BACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,UACNkF,KAAM,YAGVlF,KAAM,oBACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,SACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,SACNkF,KAAM,YAGVlF,KAAM,gBACNmF,QAAS,CACP,CACEQ,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,GACNkF,KAAM,UAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,UACNkF,KAAM,YAGVlF,KAAM,gBACNmF,QAAS,CACP,CACEQ,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,QACNkF,KAAM,WAER,CACES,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,UACNkF,KAAM,UAGVD,aAAc,qCACdjF,KAAM,aACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,UACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,cACNkF,KAAM,YAGVlF,KAAM,mBACNmF,QAAS,CACP,CACEQ,WAAY,CACV,CACEV,aAAc,OACdjF,KAAM,QACNkF,KAAM,QAER,CACES,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,SACNkF,KAAM,SAER,CACES,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,qBACNkF,KAAM,UAGVD,aAAc,sCACdjF,KAAM,GACNkF,KAAM,UAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,UACNkF,KAAM,YAGVlF,KAAM,uBACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,kBACNmF,QAAS,CACP,CACEQ,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,GACNkF,KAAM,UAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,cACNkF,KAAM,YAGVlF,KAAM,yBACNmF,QAAS,CACP,CACEQ,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,GACNkF,KAAM,UAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,UACNkF,KAAM,YAGVlF,KAAM,qBACNmF,QAAS,CACP,CACEQ,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,GACNkF,KAAM,UAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,UACNkF,KAAM,YAGVlF,KAAM,uBACNmF,QAAS,CACP,CACEQ,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,GACNkF,KAAM,UAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,UACNkF,KAAM,YAGVlF,KAAM,kBACNmF,QAAS,CACP,CACEQ,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,SACNkF,KAAM,UAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,aACNkF,KAAM,WAER,CACED,aAAc,0BACdjF,KAAM,kBACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,eACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,iBACNkF,KAAM,YAGVlF,KAAM,aACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,kBACdjF,KAAM,SACNkF,KAAM,YAGVlF,KAAM,oBACNmF,QAAS,CACP,CACEF,aAAc,OACdjF,KAAM,GACNkF,KAAM,SAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,iBACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEY,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,UACNkF,KAAM,UAGVlF,KAAM,qBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,kBACdjF,KAAM,SACNkF,KAAM,WAER,CACES,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,UACNkF,KAAM,UAGVlF,KAAM,oBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,QACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,YACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,oBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,sBACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,YACNkF,KAAM,YAGVlF,KAAM,iBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,WACNkF,KAAM,YAGVlF,KAAM,WACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,uBACNkF,KAAM,YAGVlF,KAAM,yBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,iBACNkF,KAAM,YAGVlF,KAAM,mBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEY,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,UACNkF,KAAM,UAGVlF,KAAM,QACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVlF,KAAM,kBACNmF,QAAS,CACP,CACEF,aAAc,OACdjF,KAAM,QACNkF,KAAM,QAER,CACES,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,eACNkF,KAAM,SAER,CACED,aAAc,UACdjF,KAAM,oBACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,iBACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVlF,KAAM,UACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,QACNmF,QAAS,CACP,CACEF,aAAc,kBACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEY,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,UACNkF,KAAM,UAGVlF,KAAM,UACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,cACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,gBACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEY,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,UACNkF,KAAM,UAGVlF,KAAM,WACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,cAIJG,GACJ,qh2BCv0BIT,IA7BuCC,KA6BhC,CACX,CACEC,WAAW,EACXC,OAAQ,CACN,CACEC,SAAS,EACTC,aAAc,UACdjF,KAAM,gBACNkF,KAAM,WAER,CACEF,SAAS,EACTC,aAAc,UACdjF,KAAM,WACNkF,KAAM,YAGVlF,KAAM,uBACNkF,KAAM,SAER,CACEH,OAAQ,GACR/E,KAAM,YACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,YACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,gBACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,mBACdjF,KAAM,UACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,iBACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,aACNkF,KAAM,WAER,CACED,aAAc,UACdjF,KAAM,gBACNkF,KAAM,YAGVlF,KAAM,aACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,aACNmF,QAAS,CACP,CACEF,aAAc,OACdjF,KAAM,GACNkF,KAAM,SAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,YACNmF,QAAS,CACP,CACEF,aAAc,OACdjF,KAAM,GACNkF,KAAM,SAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,eACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,iBACNmF,QAAS,CACP,CACEQ,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,GACNkF,KAAM,UAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,eACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,QACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,kBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,oBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEY,WAAY,CACV,CACEV,aAAc,UACdjF,KAAM,IACNkF,KAAM,YAGVD,aAAc,yBACdjF,KAAM,aACNkF,KAAM,UAGVlF,KAAM,eACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,WACNkF,KAAM,YAGVlF,KAAM,WACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,gBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,qBACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,cACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,cAIJG,GACJ,6+QCzPIT,IA7BiCC,KA6B1B,CACX,CACEC,WAAW,EACXC,OAAQ,CACN,CACEC,SAAS,EACTC,aAAc,UACdjF,KAAM,QACNkF,KAAM,YAGVlF,KAAM,gBACNkF,KAAM,SAER,CACEJ,WAAW,EACXC,OAAQ,CACN,CACEC,SAAS,EACTC,aAAc,UACdjF,KAAM,yBACNkF,KAAM,YAGVlF,KAAM,4BACNkF,KAAM,SAER,CACEJ,WAAW,EACXC,OAAQ,CACN,CACEC,SAAS,EACTC,aAAc,UACdjF,KAAM,QACNkF,KAAM,YAGVlF,KAAM,kBACNkF,KAAM,SAER,CACEJ,WAAW,EACXC,OAAQ,CACN,CACEC,SAAS,EACTC,aAAc,UACdjF,KAAM,gBACNkF,KAAM,WAER,CACEF,SAAS,EACTC,aAAc,UACdjF,KAAM,WACNkF,KAAM,YAGVlF,KAAM,uBACNkF,KAAM,SAER,CACEJ,WAAW,EACXC,OAAQ,CACN,CACEC,SAAS,EACTC,aAAc,UACdjF,KAAM,QACNkF,KAAM,WAER,CACEF,SAAS,EACTC,aAAc,UACdjF,KAAM,SACNkF,KAAM,YAGVlF,KAAM,gBACNkF,KAAM,SAER,CACEJ,WAAW,EACXC,OAAQ,CACN,CACEC,SAAS,EACTC,aAAc,UACdjF,KAAM,QACNkF,KAAM,WAER,CACEF,SAAS,EACTC,aAAc,UACdjF,KAAM,SACNkF,KAAM,YAGVlF,KAAM,mBACNkF,KAAM,SAER,CACEH,OAAQ,GACR/E,KAAM,qBACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,kBACdjF,KAAM,SACNkF,KAAM,YAGVlF,KAAM,cACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,YACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,gBACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,eACNmF,QAAS,CACP,CACEF,aAAc,wBACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,2BACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVlF,KAAM,YACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,oBACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,iBACNkF,KAAM,WAER,CACED,aAAc,wBACdjF,KAAM,gBACNkF,KAAM,YAGVlF,KAAM,aACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,kBACdjF,KAAM,SACNkF,KAAM,YAGVlF,KAAM,oBACNmF,QAAS,CACP,CACEF,aAAc,OACdjF,KAAM,GACNkF,KAAM,SAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,QACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,kBACdjF,KAAM,SACNkF,KAAM,YAGVlF,KAAM,iBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,oBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,4BACNkF,KAAM,YAGVlF,KAAM,4BACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,WACNkF,KAAM,YAGVlF,KAAM,WACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,mCACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,cACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,cAIJG,GACJ,ixaC5TIT,IAjC6CC,KAiCtC,CACX,CACEC,WAAW,EACXC,OAAQ,CACN,CACEC,SAAS,EACTC,aAAc,UACdjF,KAAM,gBACNkF,KAAM,WAER,CACEF,SAAS,EACTC,aAAc,UACdjF,KAAM,WACNkF,KAAM,YAGVlF,KAAM,uBACNkF,KAAM,SAER,CACEH,OAAQ,GACR/E,KAAM,YACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,QACNmF,QAAS,CACP,CACEF,aAAc,UACdjF,KAAM,GACNkF,KAAM,YAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,oBACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACdjF,KAAM,WACNkF,KAAM,YAGVlF,KAAM,WACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,YAER,CACEH,OAAQ,GACR/E,KAAM,cACNmF,QAAS,GACTC,gBAAiB,aACjBF,KAAM,cAIJG,GACJ,ikFCrGWK,GAAW5D,aAuDxB,WAAwB,IACZiC,EAAWF,GAASsC,eAApBpC,OADW,EAEmBlC,EAAWsE,eAAzChD,EAFW,EAEXA,YAAaC,EAFF,EAEEA,aAErB,OAAOgD,mBAAQ,WACX,IAAKrC,EACD,OAAOsC,GAEX,IAAMC,EAtCd,SAA8BvC,GAA0B,IAAD,EAQ/CA,EANAwC,OACIC,OAH2C,IAIvCC,UAAaC,EAJ0B,EAI1BA,oBAAqBC,EAJK,EAILA,cAAeC,EAJV,EAIUA,cAAeC,EAJzB,EAIyBA,UAAWC,EAJpC,EAIoCA,cAJpC,IAKvCC,kBAA6BC,EALU,EAKlBC,OAA0BC,EALR,EAKEC,KAIrD,MAAO,CACHT,oBAAqBA,EAAoBlB,QACzCoB,cAAeA,EAAcpB,QAC7BqB,UAAWA,EAAUrB,QACrBmB,cAAeA,EAAcnB,QAC7B0B,SAAUA,GAAYF,EACtBF,cAAeA,EAActB,SAuBL4B,CAAqBrD,GAC7C,MAAO,CACHsD,eAAe,EACfC,MAAO,CACHC,IAAKC,GAAaC,QAAQC,YAAUC,YAAaxE,GACjDtC,KAAM2G,GAAaC,QAAQC,YAAUC,YAAavE,IAEtDwE,cAAeC,GAAqBJ,QAAQnB,EAAgBM,cAAexD,GAC3E0E,UAAWC,GAAiBN,QAAQnB,EAAgBO,UAAWzD,GAC/D4E,IAAKC,GAAWR,QAAQC,YAAUC,YAAavE,GAC/C8E,WAAY5B,EACZ6B,oBAAqBC,GAA2BX,QAAQnB,EAAgBI,oBAAqBtD,GAC7FiF,cAAeC,GAAqBb,QAAQnB,EAAgBK,cAAevD,GAC3EmF,cAAeC,GAAqBf,QAAQnB,EAAgBQ,cAAe1D,MAEhF,CAACW,EAAQZ,EAAaC,OAzEvBqF,GAAuB,GACvBC,GAAoB,IAEO,SAACC,GAAD,MAC5B,mBACIpJ,EAAMO,WAAa2I,IADvB,cAEIlJ,EAAMK,QAAU8I,IAFpB,cAGInJ,EAAMqJ,YAAcF,IAJI,CAKlB/I,KA+Bf,IAAM0G,GAA0B,CAC5BgB,eAAe,EACfC,MAAO,KACPa,oBAAqB,KACrBE,cAAe,KACfT,cAAe,KACfW,cAAe,KACfP,IAAK,KACLE,WAAY,M,uBClDT,SAASW,GAAWC,GAA+D,IAA/CC,EAA8C,uDAA3BvJ,EAC1D,OAAO,IAAIE,IAAIoJ,EAAIE,YAAYC,IAAI,IAAIvJ,IAAI,IAAIwJ,IAAIH,IAGhD,SAASI,GAAeL,GAC3B,MAAO,CAAEM,EAAGN,GAIT,SAASO,GAAWP,GAA+D,IAArDC,EAAoD,uDAAjCvJ,EACpD,OAAO8J,KAAUC,KAAKT,EAAIU,IAAI,IAAI9J,IAAI,IAAIwJ,IAAIH,IAAWU,QAAQ,IAG9D,SAASC,GAAYZ,GACxB,MAAO,CACHM,EAAGC,GAAWP,EAAKtJ,IAKpB,SAASmK,GAAYC,GACxB,OAAOf,GAAWe,EAAQR,GAK9B,IAAMS,GAAsB,IAAIC,OAAO,qBAGhC,SAASC,KAAuC,IAAtBC,EAAqB,uDAAJ,GAC9C,OAAOA,EAAOC,QAAQJ,GAAqB,OAGxC,SAASK,KAAgD,IAA3BF,EAA0B,uDAAZ,IAAItK,IAAI,GACvD,OAAOqK,GAAiBC,EAAOP,QnF/CL,ImFsDvB,SAASU,GAAYC,EAAeC,GACvC,IAAMC,EAAgBF,EAAMG,QAAQ,KAC9BC,EAAkBJ,EACnBhK,MAAM,IACNqK,QAAO,SAACC,EAAUC,GACf,MAAoB,MAAbD,GAAoBC,IAAUL,KAExCM,KAAK,IACV,OAAOJ,EAAgBK,SAAS,MAAQL,EAAgBM,OAASN,EAAgBD,QAAQ,MAAQF,EAAS,GACpGG,EAAgBO,OAAO,EAAGP,EAAgBD,QAAQ,MAAQF,EAAS,IACnEG,E,aC3DGQ,GAAMlJ,aAEnB,WAAmB,IAAD,EAC6B4D,GAASS,eAA5CyB,EADM,EACNA,cAAeI,EADT,EACSA,IAAKE,EADd,EACcA,WACpB3F,EAA0BV,EAAWsE,eAArC5D,sBAFM,EAGcH,mBAAyC,MAHvD,mBAGP6I,EAHO,KAGCC,EAHD,OAIwB9I,mBAAyB,MAJjD,mBAIP+I,EAJO,KAIMC,EAJN,OAKoBhJ,oBAAkB,GALtC,mBAKP6B,EALO,KAKIC,EALJ,KA6Ed,OAtEAzB,qBAAU,WAAM,4CACZ,gDAAA4I,EAAA,yDAE0B,OAAlBzD,GAC0B,OAA1BrF,GACQ,OAARyF,GACe,OAAfE,GACCoD,qBAAUpD,EAAWrB,WAN9B,iEAYoCe,EAAc2D,aAZlD,WAYUC,EAZV,SAa2D,IAA7BA,EAAkBV,OAbhD,oDAuBsC,KAL5BW,EAAqBD,EAAkBzN,KACzC,SAAA2N,GAAU,OAAI,IAAIC,WAAkBD,EAAY1D,EAAI4D,UAAUC,eAI3Cf,OAvB3B,oEA0ByCvI,EAAuBS,IAAIyI,EAAmB1N,KAAI,SAAAiK,GAAG,OAAIA,EAAK8D,WA1BvG,WA0BUC,EA1BV,OA6BkC,KAFxBC,EAAiBR,EAAkBf,QAAO,SAACwB,EAAGtB,GAAJ,OAAcoB,EAAYpB,OAEvDG,OA7BvB,0DAkCUoB,EAAkBF,EAAejO,KACnC,SAAA2N,GAAU,OAAI,IAAIC,WAAkBD,EAAY1D,EAAI4D,UAAUC,cAnCtE,UAqC+BtJ,EAAsBS,IAAtB,sBACpBkJ,EAAgBnO,KAAI,SAAAoO,GAAW,OAAIA,EAAYC,gBAD3B,YAEpBF,EAAgBnO,KAAI,SAAAoO,GAAW,OAAIA,EAAYE,oBAvC1D,eAqCUC,EArCV,OAyCUC,EAAgBD,EAAaE,OAAO,EAAGN,EAAgBpB,QACvD2B,EAAkBH,EAAaE,OAAO,EAAGN,EAAgBpB,QAGzD4B,EAAoB,IAAIf,WAAkBzD,EAAWrB,UAAW8F,EAAkBC,KA7C5F,UA8C6BrK,EAAsBS,IAC3CgJ,EAAejO,KAAI,SAAA2N,GAAU,OAAIgB,EAAkBG,aAAanB,OA/CxE,QA8CUoB,EA9CV,OAiDUC,EAAmC,GACzCD,EAAWE,SAAQ,SAAChF,EAAK2C,GAErBoC,EAAQ/E,EAAI,IAAM,CACdxC,QAASwG,EAAerB,GACxBsC,gBAAiBjF,EAAI,GACrBkF,iBAAkBlF,EAAI,GACtBmF,gBAAiBtE,GAAWb,EAAI,IAChCoE,UAAWvD,GAAW0D,EAAc5B,IACpC0B,YAAaxD,GAAW4D,EAAgB9B,QAIhDO,EAAU6B,GACV7I,GAAa,GA/DjB,6CADY,uBAAC,WAAD,wBAmEZkJ,KACD,CAAClF,EAAYF,EAAKJ,EAAerF,IAE7B,CACH0B,YACAgH,SACAE,cACAC,qB,gEC9FO,OAA0B,kCCgDzC,SAASiC,KACL,OAAQtO,OAAeuO,U,IC1CrBC,G,WAEF,aAAuB,oB,4CAOvB,SAAQrP,GACJsP,IAAQC,QAAQvP,K,iBAEpB,WAC2C,IAAD,EAAlCyB,MAAeJ,EAAMqJ,cACrB,EAAAnE,SAAQiJ,IAAR,qB,kBAGR,WAAsB,IAAD,GAEjB,EAAAjJ,SAAQkJ,KAAR,qB,kBAEJ,WAAqB,IAAC,IAAD,qBAAbC,EAAa,yBAAbA,EAAa,gBACjB,IAAMC,EAAMD,EAAKhD,KAAK,KAEtB4C,IAAQM,OAAO,CACX9N,KAAM,OACN+N,QAASF,KAEb,EAAApJ,SAAQuJ,KAAR,QAAgBJ,K,mBAEpB,SAAMK,EAAYC,GAEdV,IAAQM,OAAOG,GAAK,SAAAE,GACZD,GACAxP,OAAO0P,QAAQF,GAAalB,SAAQ,YAA0B,IAAD,mBAAvBqB,EAAuB,KAAdC,EAAc,KACzDH,EAAMI,YAAYF,EAASC,SAIvC7J,QAAQC,MAAMuJ,M,mBApClB,WAII,OAHsB,OAAlBO,KAAKC,WACLD,KAAKC,SAAW,IAAIlB,GAEjBiB,KAAKC,a,KAPdlB,GACakB,SAA0B,KA0CtC,IAAMC,GAASnB,GAAOtK,OChDtB,SAAS0L,GAAgBC,EAAaC,GAAmE,IAAD,EACrEzM,oBAAiB,WACnD,IACI,IAAM0M,EAAO/P,OAAOgQ,aAAaC,QAAQJ,GACzC,OAAOE,EAAOG,KAAKC,MAAMJ,GAAQD,EACnC,MAAOnK,GAEL,OADAD,QAAQC,MAAM,+BAAgCA,GACvCmK,MAP4F,mBACpGM,EADoG,KACvFC,EADuF,KAWrGC,EAAWC,uBACb,SAACC,GACG,IACI,IAAMC,EAAeD,aAAiBE,SAAWF,EAAMJ,GAAeI,EACtEH,EAAeI,GACfzQ,OAAOgQ,aAAaW,QAAQd,EAAKK,KAAKU,UAAUH,IAClD,MAAO9K,GACLD,QAAQC,MAAM,+BAAgCA,MAGtD,CAACkK,EAAKO,IAGV,MAAO,CAACA,EAAaE,G,ICZpBO,G,UCXCC,GAAgB,CAClBC,SAAU,SACVC,SAAU,IACVC,YAAY,GAGT,SAASC,KACZ,IAAMC,EAAQC,eAiDd,MAAO,CACHC,cAhDkBd,uBAClB,SAAAe,GAAO,OACHH,EAAM,uCACCL,IACAQ,GAFF,IAGDC,OAAQ,eAEhB,CAACJ,IA0CDK,WAvCejB,uBACf,SAAAe,GAAO,OACHH,EAAM,uCACCL,IACAQ,GAFF,IAGDC,OAAQ,YAEhB,CAACJ,IAiCDM,YA9BgBlB,uBAChB,SAAAe,GAAO,OACHH,EAAM,uCACCL,IACAQ,GAFF,IAGDC,OAAQ,aAEhB,CAACJ,IAwBDO,YArBgBnB,uBAChB,SAAAoB,GACIR,EAAMS,MAAMD,KAEhB,CAACR,IAkBDpC,OAfWwB,uBACX,SAAAe,GACIH,EAAM,2BACCL,IACAQ,MAGX,CAACH,M,SD1CJN,K,8BAAAA,E,8BAAAA,E,wBAAAA,E,iBAAAA,Q,KAaL,IAAMgB,GAAe,CACjB3M,WAAW,EACXuB,QAAS,IAGAqL,GAAO/O,aAgBpB,WAAoB,IAAD,EACWgP,qBAAWC,GAASH,IAD/B,mBACRI,EADQ,KACDC,EADC,OAE4ClP,cAAnDG,EAFO,EAEPA,OAAQF,EAFD,EAECA,QAASkP,EAFV,EAEUA,SAAUC,EAFpB,EAEoBA,WAAYhP,EAFhC,EAEgCA,QAFhC,EAGYwM,GAAgByC,GAAapR,KAAMoR,GAAanR,cAAlEoR,EAHM,sBAIsBpB,KAA7BO,EAJO,EAIPA,YAAaC,EAJN,EAIMA,YACfa,EAAkBC,oBAjB5B,SAAuBC,GAAqB,IAChCtP,EAAWH,cAAXG,OACFuP,EEpCH,SAAqBlC,GAGxB,IAAMmC,EAAMH,mBAQZ,OALA9O,qBAAU,WACNiP,EAAIC,QAAUpC,IACf,CAACA,IAGGmC,EAAIC,QFyBaC,CAAY1P,GAEpCO,qBAAU,WACFgP,IAAoBvP,GAEpBsP,MAEL,CAACC,EAAiBvP,EAAQsP,IAW7BK,EAAc,WACVR,EAAe,IACfJ,EAAS,CAAE/L,KAAM0K,GAAQkC,SH5B1B,WACH,IAAMxE,EAAYD,KACbC,GACLA,EAAUyE,QG0BNA,MAGJ,IAAMC,EAAQ1C,uBACV,SAACb,EAA6BwD,EAAqBC,GAC/CjB,EAAS,CAAE/L,KAAM0K,GAAQuC,gBACzBd,EAAeY,GACff,EAASzC,GAAU,eAAU,GACxBvL,MAAK,WACEgP,GACAA,IAEJxD,GAAOf,KAAK,sBAEfnJ,OAAM,SAAAyJ,GACHoD,EAAe,IACfJ,EAAS,CAAE/L,KAAM0K,GAAQwC,aACzB1D,GAAOhK,MAAMuJ,QAGzB,CAACgD,EAAUI,EAAgBH,IAGzBmB,EAAS/C,uBAAY,WACvB6B,MACD,CAACA,IAEJ1O,qBAAU,WACFP,GAAUF,GAAWG,IACrB8O,EAAS,CAAE/L,KAAM0K,GAAQ0C,cAAejC,QAAS,CAAE7K,QAASxD,KHhEjE,SAAkBuQ,GACrB,IAAMjF,EAAYD,KACbC,GACLA,EAAUkF,SAASD,GG8DXC,CAASxQ,GACcG,IAAY9B,EAASQ,KAGxCyQ,EAAgBK,QAAUnB,EAAY,CAClCiC,MAAO,gBACP7Q,YAAY,iCACZoO,YAAY,EACZD,SAAU,OAGVuB,EAAgBK,SAChBlB,EAAYa,EAAgBK,YAIzC,CAAC3P,EAASE,EAAQC,EAASqO,EAAaC,IAzD5B,MA4DerO,oBAAS,GA5DxB,mBA4DRsQ,EA5DQ,KA4DCC,EA5DD,OA6DOhE,GAAgByC,GAAapR,KAAMoR,GAAanR,cAA/DgS,EA7DQ,oBAuEf,OATAxP,qBAAU,WAAO,IAAD,EACNf,EAAS,UAAGD,EAAkBmR,MAAK,SAAAC,GAAU,OAAIA,EAAW3U,KAAO+T,YAA1D,aAAG,EAAqEvQ,WAClFgR,GAAWhR,IACZgN,GAAOf,KAAK,iBACZqE,EAAMtQ,EAAWuQ,GACjBU,GAAW,MAEhB,CAACV,EAAaS,EAASV,IAEnB,CACHhB,QACA8B,QAAS,CACLd,QACAK,cAzFJjB,GAAiBrR,EA8FzB,SAASgR,GAAQC,EAA4B+B,GACzC,OAAQA,EAAO7N,MACX,KAAK0K,GAAQuC,cACT,OAAO,2BAAKnB,GAAZ,IAAmB/M,WAAW,IAElC,KAAK2L,GAAQ0C,cAAgB,IACjB9M,EAAYuN,EAAO1C,QAAnB7K,QACR,OAAO,2BAAKwL,GAAZ,IAAmB/M,WAAW,EAAOuB,YAEzC,KAAKoK,GAAQwC,WACT,OAAO,2BACApB,GADP,IAEI/M,WAAW,IAGnB,KAAK2L,GAAQkC,OACT,OAAO,2BACAd,GADP,IAEIxL,QAAS,KAGjB,QACI,MAAM,IAAIjH,O,IGlJjBqR,G,oBAAAA,K,2CAAAA,Q,KASL,IAAMgB,GAAe,CACjBoC,MAAO,CACHC,cAAc,IAItB,SAASlC,GAAQC,EAA4B+B,GACzC,OAAQA,EAAO7N,MACX,KAAK0K,GAAQsD,oBACT,OAAO,2BACAlC,GADP,IAEIgC,MAAO,CACHC,cAAejC,EAAMgC,MAAMC,gBAIvC,QACI,MAAM,IAAI1U,OAmBf,IAAM4U,GAASrR,aAftB,WAAsB,IAAD,EACSsR,aAAgBrC,GAASH,IADlC,mBACVI,EADU,KACHC,EADG,KAOjB,MAAO,CACHD,QACA8B,QAAS,CACLO,kBAPkB/D,uBAAY,WAClC2B,EAAS,CAAE/L,KAAM0K,GAAQsD,wBAC1B,CAACjC,SCiBOqC,OAhDf,YAUI,IATAC,EASD,EATCA,IACAvT,EAQD,EARCA,KACA0B,EAOD,EAPCA,UACAxD,EAMD,EANCA,GAQe8T,EACXnB,GAAK1K,eADL2M,QAAWd,MAEIwB,EAAoBzR,cAA/BL,UAGO2R,EACXF,GAAOhN,eADP2M,QAAWO,kBAGTI,EAAoBD,IAAoB9R,EAExCgS,EAAgBpE,uBAAY,WACzBmE,GACDzB,EAAMtQ,EAAWxD,GAErBmV,MACD,CAAC3R,EAAWsQ,EAAOqB,EAAmBnV,EAAIuV,IAE7C,OACI,cAAC,KAAD,CACIE,WAAW,MACXC,SAAS,KACTC,eAAe,OACfC,GAAG,WACHC,QAASL,EACTM,OAAQ,CAAEF,GAAI,6BANlB,SAQI,eAAC,KAAD,CAAMG,MAAM,OAAOC,WAAW,SAA9B,UACI,cAAC,KAAD,CAAOC,GAAG,OAAOZ,IAAKA,EAAKa,QAAS,IACnCpU,EACD,cAAC,KAAD,IACCyT,GAAqB,cAAC,KAAD,CAAOF,IAAKc,WChBnCC,OA7Bf,WAA6B,IAEVjC,EACXxB,GAAK1K,eADL2M,QAAWT,OAIAgB,EACXF,GAAOhN,eADP2M,QAAWO,kBAGTK,EAAgBpE,uBAAY,WAC9B+C,IACAgB,MACD,CAAChB,EAAQgB,IAEZ,OACI,cAAC,KAAD,CACIM,WAAW,MACXC,SAAS,KACTC,eAAe,OACfC,GAAG,WACHS,MAAM,UACNR,QAASL,EACTM,OAAQ,CAAEF,GAAI,6BAPlB,yBC6BOU,OAzCf,WAA4B,IAEXhP,EACTqL,GAAK1K,eADL6K,MAASxL,QAFU,EAUnB2N,GAAOhN,eAHM8M,EAPM,EAMnBjC,MACIgC,MAASC,aAEFI,EATQ,EASnBP,QAAWO,kBAGf,OACI,eAAC,KAAD,CAAOoB,YAAY,EAAMC,KAAK,KAAKC,OAAQ1B,EAAc2B,QAASvB,EAAlE,UACI,cAAC,KAAD,IACA,eAAC,KAAD,CAAcS,GAAG,WAAWS,MAAM,WAAlC,UACI,cAAC,KAAD,CAAaZ,WAAW,MAAMC,SAAS,KAAvC,4BAGA,cAAC,KAAD,IACA,cAAC,KAAD,CAAWiB,GAAG,SAAd,SACI,eAAC,KAAD,CAAOC,QAAS,EAAhB,UACKrT,EAAkB1D,KAAI,SAACwR,GACpB,OACI,cAAC,GAAD,CAEIrR,GAAIqR,EAAMrR,GACV8B,KAAMuP,EAAMvP,KACZ0B,UAAW6N,EAAM7N,UACjB6R,IAAKwB,OAAQ,YAAsBxF,EAAM5N,WAAYqT,SAJhDzF,EAAMrR,OAQtBsH,GAAW,cAAC,GAAD,gB,6BC3BrByP,GAXI,SAACC,GAChB,OACI,cAAC,KAAD,yBAAMjB,MAAM,KAAKkB,OAAO,KAAKC,QAAQ,YAAYC,KAAK,OAAOC,MAAM,8BAAiCJ,GAApG,aACI,sBACI9L,EAAE,wOACFiM,KAAK,qBCRd,SAASE,GAAkB/P,GAC9B,OAAOA,EAAQuF,OAAO,EAAG,GAAK,MAAQvF,EAAQuF,QAAQ,GC4B3CyK,OAtBf,WAAuB,IAENhQ,EACTqL,GAAK1K,eADL6K,MAASxL,QAIE6N,EACXF,GAAOhN,eADP2M,QAAWO,kBAGf,OACI,cAAC,KAAD,CACIqB,KAAK,KACLX,QAASV,EACToC,YAAY,OACZC,QAAQ,UACRC,SAAU,cAAC,GAAD,CAAYvB,QAAS,IALnC,SAOK5O,EAAU+P,GAAkB/P,GAAW,a,UCNrCoQ,OAZf,WACI,OACI,eAAC,KAAD,CAAMC,EAAE,OAAO3B,WAAW,SAA1B,UACI,cAAC,KAAD,CAAM4B,GAAG,IAAT,SACI,cAAC,KAAD,CAASpB,KAAK,KAAd,8BAEJ,cAAC,KAAD,IACA,cAAC,GAAD,Q,kDCLL,SAASqB,GAAT,GAA4D,IAApCC,EAAmC,EAAnCA,KAAMC,EAA6B,EAA7BA,SAAaf,EAAgB,oCAC9D,OACI,cAAC,KAAD,yBAAMc,KAAMA,EAAME,OAAO,SAASC,IAAI,uBAA0BjB,GAAhE,aACKe,K,cC6BEG,OAnCf,WACI,OACI,eAAC,KAAD,CAAOtB,QAAS,GAAhB,UACI,eAAC,KAAD,CAAOA,QAAS,EAAhB,UACI,cAAC,KAAD,CAASJ,KAAK,KAAd,mBACA,eAAC,KAAD,2HACkH,IAC9G,kDAFJ,gBAIA,eAAC,KAAD,WACI,eAACqB,GAAD,CAAcxB,MAAM,WAAWyB,KAAK,kDAAkDK,YAAU,EAAhG,oBACW,cAAC,KAAD,CAAkBC,GAAG,WAChB,IAChB,eAACP,GAAD,CAAcxB,MAAM,WAAWyB,KAAK,qCAAqCK,YAAU,EAAnF,qBACY,cAAC,KAAD,CAAkBC,GAAG,iBAIzC,cAAC,KAAD,IACA,eAAC,KAAD,CAAOxB,QAAS,EAAhB,UACI,cAAC,KAAD,CAASJ,KAAK,KAAd,4BACA,eAAC,KAAD,kCACwB,sDAAkC,OAE1D,cAAC,KAAD,CAAQ6B,aAAW,EAACC,YAAU,EAACf,YAAY,OAA3C,0CAGA,cAAC,KAAD,CAAM7B,SAAS,KAAKW,MAAM,WAA1B,2D,mBCpBDkC,OAVf,WACI,OACI,cAAC,KAAD,UACI,cAAC,KAAD,CAAM/B,KAAK,KAAKH,MAAM,WAAtB,mCCOGmC,OAVf,WACI,OACI,cAAC,KAAD,UACI,cAAC,KAAD,CAAMhC,KAAK,KAAKH,MAAM,WAAtB,qC,oBCgBGoC,ICjBV/G,GDiBU+G,GAbf,SAAkBzB,GACd,OACI,eAAC,KAAD,CAAOJ,QAAS,EAAG8B,IAAI,SAAvB,UACI,cAAC,KAAD,CAAMhD,SAAS,KAAKW,MAAM,WAAWsC,cAAc,YAAnD,SACK3B,EAAM4B,QAEX,cAAC,KAAD,CAAMlD,SAAS,KAAKD,WAAW,OAA/B,SACKuB,EAAM3F,a,SCXlBK,K,sDAAAA,E,wDAAAA,E,oDAAAA,E,uDAAAA,Q,KAYL,IAAMgB,GAAe,CACjBpL,QAAS,KACTyH,gBAAiB,KACjBC,iBAAkB,KAClB6J,0BAA0B,EAC1BC,yBAAyB,GAGhBC,GAAWnV,aAExB,WAAwB,IAAD,EACOsR,aAAgBrC,GAASH,IADhC,mBACZI,EADY,KACLC,EADK,KAGbiG,EAAyB5H,uBAC3B,SAAC9J,EAAiByH,EAAyBC,GACvC+D,EAAS,CACL/L,KAAM0K,GAAQuH,0BACd9G,QAAS,CACL7K,UACAyH,kBACAC,wBAIZ,CAAC+D,IAGCmG,EAA0B9H,uBAAY,WACxC2B,EAAS,CAAE/L,KAAM0K,GAAQyH,+BAC1B,CAACpG,IAEEqG,EAAwBhI,uBAC1B,SAAC9J,EAAiByH,EAAyBC,GACvC+D,EAAS,CACL/L,KAAM0K,GAAQ2H,yBACdlH,QAAS,CACL7K,UACAyH,kBACAC,wBAIZ,CAAC+D,IAGCuG,EAAyBlI,uBAAY,WACvC2B,EAAS,CAAE/L,KAAM0K,GAAQ6H,8BAC1B,CAACxG,IAEJ,MAAO,CACHD,QACAkG,yBACAE,0BACAE,wBACAE,6BAIR,SAASzG,GAAQC,EAA4B+B,GACzC,OAAQA,EAAO7N,MACX,KAAK0K,GAAQuH,0BACT,OAAO,2BACAnG,GADP,IAEIxL,QAASuN,EAAO1C,QAAQ7K,QACxByH,gBAAiB8F,EAAO1C,QAAQpD,gBAChCC,iBAAkB6F,EAAO1C,QAAQnD,iBACjC6J,0BAA0B,IAGlC,KAAKnH,GAAQyH,2BACT,OAAO,2BACArG,GADP,IAEIxL,QAAS,KACTyH,gBAAiB,KACjBC,iBAAkB,KAClB6J,0BAA0B,IAGlC,KAAKnH,GAAQ2H,yBACT,OAAO,2BACAvG,GADP,IAEIxL,QAASuN,EAAO1C,QAAQ7K,QACxByH,gBAAiB8F,EAAO1C,QAAQpD,gBAChCC,iBAAkB6F,EAAO1C,QAAQnD,iBACjC8J,yBAAyB,IAGjC,KAAKpH,GAAQ6H,0BACT,OAAO,2BACAzG,GADP,IAEIxL,QAAS,KACTyH,gBAAiB,KACjBC,iBAAkB,KAClB8J,yBAAyB,IAGjC,QACI,MAAM,IAAIzY,OCrCPmZ,OA/Df,YAAoD,IAA5BnT,EAA2B,EAA3BA,KAA2B,EACW0S,GAAS9Q,eAA3D+Q,EADuC,EACvCA,uBAAwBI,EADe,EACfA,sBACxB9R,EAAuGjB,EAAvGiB,QAASyH,EAA8F1I,EAA9F0I,gBAAiBC,EAA6E3I,EAA7E2I,iBAAkByK,EAA2DpT,EAA3DoT,cAAejD,EAA4CnQ,EAA5CmQ,KAAMkD,EAAsCrT,EAAtCqT,OAAQC,EAA8BtT,EAA9BsT,YAAaC,EAAiBvT,EAAjBuT,aACxFC,EAAarD,EAAKsD,IAAI,GAEtBC,EAA6B3I,uBAAY,WAC3C4H,EAAuB1R,EAASyH,EAAiBC,KAClD,CAAC1H,EAASyH,EAAiBC,EAAkBgK,IAE1CgB,EAA4B5I,uBAAY,WAC1CgI,EAAsB9R,EAASyH,EAAiBC,KACjD,CAAC1H,EAASyH,EAAiBC,EAAkBoK,IAG1Ca,EAAS/R,mBAAQ,kBAAMuR,EAAclO,QAAQ,KAAI,CAACkO,IAClDS,EAAahS,mBAAQ,kBAAMsO,EAAK2D,MAAM5O,QAAQ,KAAI,CAACiL,IACnD4D,EAAclS,mBAAQ,2BAAS,IAAI1G,IAAI,GAAGuJ,IAAI4O,GAAapO,QAAQ,GAA7C,OAAoD,CAACoO,IAC3EU,EAAgBnS,mBAAQ,kBAAM8D,GAAqB4N,EAAa7O,IAAIyL,GAAM2D,SAAQ,CAACP,EAAcpD,IACjG8D,EAAYpS,mBAAQ,kBAAM8D,GAAqB0N,KAAS,CAACA,IACzDa,EAAiBrS,mBAAQ,2BAASyR,EAAYrO,IAAI,KAAKC,QAAQ,GAAtC,OAA6C,CAACoO,IAE7E,OAAOzR,mBACH,kBACI,cAAC,KAAD,UACI,eAAC,KAAD,CAAOsS,UAAU,SAAS5D,QAAS,EAAG6D,aAAa,MAAMC,YAAY,MAAMC,YAAY,WAAWC,EAAG,EAArG,UACI,eAAC,KAAD,WACI,cAAC,KAAD,CAASpE,KAAK,KAAd,SAAoBzH,IACpB,cAAC,KAAD,CAAOwI,YAAasC,EAAa,QAAU,MAA3C,SAAmDA,EAAa,OAAS,aAE7E,eAAC,KAAD,CAAYgB,cAAe,CAAC,MAAO,MAAO,OAAQjE,QAAS,EAA3D,UACI,cAAC,GAAD,CAAUgC,MAAM,MAAMvH,MAAO4I,IAC7B,cAAC,GAAD,CAAUrB,MAAM,gBAAgBvH,MAAO6I,IACvC,cAAC,GAAD,CAAUtB,MAAM,WAAWvH,MAAO+I,IAClC,cAAC,GAAD,CAAUxB,MAAM,cAAcvH,MAAOgJ,IAErC,cAAC,GAAD,CAAUzB,MAAM,SAASvH,MAAOiJ,IAChC,cAAC,GAAD,CAAU1B,MAAM,eAAevH,MAAOkJ,OAE1C,eAAC,KAAD,CAAKO,QAAS,CAAC,QAAS,QAAxB,UACI,cAAC,KAAD,CAAQjF,QAASkE,EAA4BgB,GAAI,CAAC,EAAG,GAAIxD,YAAY,OAArE,4BAGA,cAAC,KAAD,IACA,cAAC,KAAD,CAAQ1B,QAASmE,EAAjB,yCAKhB,CACIE,EACAnL,EACAsL,EACAL,EACAD,EACAF,EACAO,EACAG,EACAD,EACAL,K,UC2CGlB,OAnGf,WAAqB,IAAD,EAC2BpV,EAAWsE,eAA9CnE,EADQ,EACRA,QAASO,EADD,EACCA,sBACT2F,EAAexC,GAASS,eAAxB+B,WACA+C,EAAWD,GAAI7E,eAAf8E,OAHQ,EAIwB7I,mBAAyB,IAJjD,mBAIT8W,EAJS,KAIKC,EAJL,KAMVC,EAAwB9J,sBAAW,sBAAC,0CAAAjE,EAAA,2DACnB,OAAfnD,GAAuBA,EAAWxB,qBAAuBuE,GAAUjJ,GAAWO,GAD5C,iCAIxB8W,EAA8B,IAAI1N,WACpCzD,EAAWxB,oBACX4S,GAA4B1M,KAI1B2M,EAAgB7a,OAAO8a,OAAOvO,GAAQwO,MAAK,SAACpO,EAAGqO,GAAJ,OAC7CrO,EAAE4B,gBAAgB0M,cAAcD,EAAEzM,oBAXR,SAoBA1K,EAAsBS,IAAtB,sBAErBuW,EAAcxb,KAAI,SAAAiK,GAAG,OACtBqR,EAA4BO,sCAAsC5R,EAAIxC,QAASxD,OAHzD,YAMrBuX,EAAcxb,KAAI,SAAAiK,GAAG,OACtBqR,EAA4BQ,iBAAiB7R,EAAIxC,QAASxD,EAAS1C,EAAcwa,iBA3B3D,cAoBxBC,EApBwB,OA8BxBC,EAAaD,EAAgBvN,OAAO,EAAG+M,EAAczO,QACrDmP,EAAaF,EAAgBvN,OAAO,EAAG+M,EAAczO,SAGrDoP,EAA+BF,EAAWjc,KAAI,SAAC4P,EAAWhD,GAAZ,mBAAC,eAC9C4O,EAAc5O,IAD+B,IAEhD+J,KAAM/K,GAAYgE,EAAK+G,MACvBkD,OAAQjO,GAAYgE,EAAKiK,QACzBE,aAAcnO,GAAYgE,EAAKmK,oBAIb9K,SAAQ,SAACW,EAAMhD,GACjCgD,EAAKgK,cAAgBhO,GAAYsQ,EAAWtP,OAI1CwP,EAAgCD,EAAsBzP,QAAO,SAAAkD,GAAI,OAAKA,EAAK+G,KAAK0F,GAAG,MA/C3D,UAuDA7X,EAAsBS,IAC/CmX,EAAcpc,KAAI,SAAA+R,GAAQ,OACvBuJ,EAA4BgB,eAAevK,EAAStK,QAASxD,OAzDvC,QAuDxBsY,EAvDwB,OA4D9BH,EAAcnN,SAAQ,SAACW,EAAMhD,GACzBgD,EAAKkK,YAAclO,GAAY2Q,EAAgB3P,OAGnDwO,EAAgBgB,GAhEc,kDAkE9B1V,QAAQC,MAAM,gCAAd,MAlE8B,gCAoEH,IAAxBwU,EAAapO,QACpBqO,EAAgB,IArEkB,0DAuEvC,CAACnX,EAASkG,EAAY+C,EAAQiO,EAAapO,OAAQvI,IAStD,OAPAE,qBAAU,WACN2W,MACD,CAACA,IAGJmB,aAAYnB,EAAuB,KAG/B,eAAC,KAAD,CAAYoB,QAAS,EAAG1F,QAAS,EAAjC,WACM9S,GAAW,cAAC,GAAD,IACZA,GAAmC,IAAxBkX,EAAapO,QAAgB,cAAC,GAAD,IACxC9I,GAC2B,IAAxBkX,EAAapO,QACboO,EAAanb,KAAI,SAAC4P,EAAoBhD,GAArB,OACb,cAAC,GAAD,CAAyCpG,KAAMoJ,GAA5BA,EAAKV,wB,4DCxG/BwN,GAAb,oDACI,aAAe,IAAD,8BACV,gBACKza,KAAO,2BACZ,EAAK+N,QAAU,GAHL,EADlB,uBAAmCxP,QA2BtBmc,IAlBmCnc,MAUVA,MAQtC,oDACI,WAAYwP,GAAkB,IAAD,8BACzB,gBACK/N,KAAL,gBACA,EAAK+N,QAAL,UAAkBA,GAHO,EADjC,uBAAmCxP,SAQtBoc,GAAb,oDACI,WACWC,EACAC,EACAnP,GAER,IAAD,EADSqC,EACT,uDAD2B,GAC3B,4BACE,gBALO6M,UAIT,EAHSC,WAGT,EAFSnP,aAET,EADSqC,UAGP,EAAK/N,KAAL,mBAAwB4a,EAAxB,YAAmCC,GAFrC,EANN,uBAA8Btc,QCrCvB,SAASuc,KAAuC,IAApBC,EAAmB,uDAAJ,GACxCC,EAASnb,EAAa,GAAK,WACjC,MAAM,WAAN,OAAkBmb,EAAlB,2BAA2CD,GCcxC,IAcKE,GAdCC,GAAcpZ,aAsC3B,WAA2B,IAAD,EACIM,mBAAc,MADlB,mBACfsC,EADe,KACRyW,EADQ,OAEY/Y,oBAAS,GAFrB,mBAEf6B,EAFe,KAEJC,EAFI,OAGU9B,mBAA+B,IAHzC,mBAGfgZ,EAHe,KAGLC,EAHK,OAI6BpL,KAA3CO,EAJc,EAIdA,YAAaJ,EAJC,EAIDA,cAAeG,EAJd,EAIcA,WAJd,EAKUnO,mBAA0B,MALpC,mBAKfkZ,EALe,KAKLC,EALK,OAMkB5M,GAAgB6M,GAAexb,KAAMwb,GAAevb,cANtE,mBAMfwb,EANe,KAMDC,EANC,OAOoBtZ,oBAAkB,GAPtC,mBAOfiF,EAPe,KAOAsU,EAPA,KASTnW,EACTqL,GAAK1K,eADL6K,MAASxL,QATS,EAYyB3D,EAAWsE,eAAlD/C,EAZc,EAYdA,aAAcD,EAZA,EAYAA,YAChByY,EAbgB,EAYazZ,UACN9B,EAASQ,KAAOuC,EAAeD,EAEtD0Y,EAAgBvM,uBAAY,WAC9BpL,GAAa,GACbwX,EAAgB,MACjB,CAACA,IAIJjZ,qBAAU,WAAO,SACEqZ,EADH,8EACZ,WAA4BC,GAA5B,qBAAA1Q,EAAA,+DACkD4D,KAAKC,MAAMuM,GAAjDO,EADZ,EACYA,OAAQC,EADpB,EACoBA,aAAcC,EADlC,EACkCA,YADlC,kBAG8BN,EAASO,sBAAsBH,GAH7D,eAKYH,IACAzL,EAAc,CACVqC,MAAO,cAACsD,GAAD,CAAcC,KAAM8E,GAAmBkB,GAAvC,SAAiDC,IACxDra,YAAasa,KAEVH,EAnCH,GAoCJrN,GAAOf,KAAK,aAAcoO,GAC1BK,YAAW,WACPN,EAAaC,EAAa,KAC3B,OAEHF,IACArL,EAAY,CACRiC,MAAO,cAACsD,GAAD,CAAcC,KAAM8E,GAAmBkB,GAAvC,sCACPpa,YAAa,MAnB7B,gDAuBQia,IACAnN,GAAOhK,MAAP,MAxBR,0DADY,sBA4BP2C,IACDsU,GAAiB,GACbF,IACAvX,GAAa,GACb4X,EAAa,OAGtB,CAACD,EAAexU,EAAeoU,EAAcjL,EAAaJ,EAAewL,EAAUF,IAEtF,IAAMW,EAAa/M,uBAAY,SAACgN,GAAuB,IAAD,YAC5CC,GAAkB,OAAND,QAAM,IAANA,GAAA,UAAAA,EAAQE,eAAR,eAAiB/J,QAASgK,GAAcD,QAAQ/J,MAC5DiK,GAAiB,OAANJ,QAAM,IAANA,GAAA,UAAAA,EAAQE,eAAR,eAAiB5a,cAAe6a,GAAcD,QAAQ5a,YACjEqa,GAAqB,OAANK,QAAM,IAANA,GAAA,UAAAA,EAAQK,kBAAR,eAAoBlK,QAASgK,GAAcE,WAAWlK,MACrEyJ,GAAoB,OAANI,QAAM,IAANA,GAAA,UAAAA,EAAQK,kBAAR,eAAoB/a,cAAe6a,GAAcE,WAAW/a,YAC1Egb,GAAmB,OAANN,QAAM,IAANA,GAAA,UAAAA,EAAQO,gBAAR,eAAkBpK,QAASgK,GAAcI,SAASpK,MAC/DqK,GAAkB,OAANR,QAAM,IAANA,GAAA,UAAAA,EAAQO,gBAAR,eAAkBjb,cAAe6a,GAAcI,SAASjb,YAU1E,OARAuZ,EAAS,MACTI,EAAY,CACRxI,QAAc,OAANuJ,QAAM,IAANA,OAAA,EAAAA,EAAQvJ,SAAU0J,GAAc1J,OACxCyJ,QAAS,CAAE/J,MAAO8J,EAAW3a,YAAa8a,GAC1CC,WAAY,CAAElK,MAAOwJ,EAAcra,YAAasa,GAChDW,SAAU,CAAEpK,MAAOmK,EAAYhb,YAAakb,KAGzC,CACHP,YACAG,WACAT,eACAC,cACAU,aACAE,eAEL,IAEGC,EAAgBzN,sBAAW,uCAC7B,WAAO0N,EAAiDC,GAAxD,6BAAA5R,EAAA,6DACYkR,EAAmDU,EAAnDV,UAAWG,EAAwCO,EAAxCP,SAAUT,EAA8BgB,EAA9BhB,aAAcC,EAAgBe,EAAhBf,YAEvCgB,GAAa,EACbC,GAAW,EAJnB,SAMQjZ,GAAa,GANrB,SAOmB8Y,EAPnB,OAOQI,EAPR,OASQpB,GADAmB,EAAyB,kBAAPC,GACGA,EAAiBA,EAA2BC,KACjE3B,EACIzM,KAAKU,UAAL,2BACOsN,GADP,IAEIjB,aAGHmB,EAMD/M,EAAc,CACVqC,MAAO,cAACsD,GAAD,CAAcC,KAAM8E,GAAmBkB,GAAvC,SAAiDC,IACxDra,YAAasa,IAPjB3L,EAAW,CACPkC,MAAO,cAACsD,GAAD,CAAcC,KAAM8E,GAAmBkB,GAAvC,SAAiDO,IACxD3a,YAAa8a,IAnB7B,kDA4BY,KAAIle,MAAqB,OAAb,KAAIA,MAEhB0e,GAAa,EACb/B,EAAS,IAAIV,IACbjK,EAAY,CACRiC,MAAO,uBACP7Q,YAAa,6CAEV,gBAAe8Y,KAEtBlK,EAAY,CACRiC,MAAO,uBAGX0I,EAAS,EAAD,KAEZzM,GAAOhK,MAAP,MACAmX,IA7CR,iCA+CW,CACHqB,aACAC,WACAC,KACApB,WAnDR,0DAD6B,wDAuD7B,CAACzL,EAAYH,EAAeI,EAAakL,EAAiBG,IAGxDyB,EAAUhO,sBAAW,uCACvB,WAAO0N,EAAiDV,GAAxD,mCAAAjR,EAAA,6DACUkS,EAAmBlB,EAAWC,GAC5BL,EAAqDsB,EAArDtB,aAAcC,EAAuCqB,EAAvCrB,YAAaU,EAA0BW,EAA1BX,WAAYE,EAAcS,EAAdT,UAE3CU,EAAqC,KAJ7C,SAKuDT,EAAcC,EAAUO,GAL/E,mBAKYH,EALZ,EAKYA,GAAIF,EALhB,EAKgBA,WAAYC,EAL5B,EAK4BA,SAAUnB,EALtC,EAKsCA,QAE9BkB,IAAcC,EAPtB,8EAcyBC,EAA2BK,OAdpD,QAcQD,EAdR,OAeQnC,GAAY,SAAAqC,GAAI,4BAAQA,GAAR,CAAcF,OAC9BpN,EAAc,CACVqC,MAAO,cAACsD,GAAD,CAAcC,KAAM8E,GAAmBkB,GAAvC,SAAiDC,IACxDra,YAAasa,IAlBzB,mDAqBQxN,GAAOhK,MAAP,MACAyW,EAAS,EAAD,IACR3K,EAAY,CACRiC,MAAO,cAACsD,GAAD,CAAcC,KAAM8E,GAAmBkB,GAAvC,SAAiDY,IACxDhb,YAAakb,IAzBzB,eA4BIjB,IA5BJ,kBA6BW2B,GA7BX,2DADuB,wDAgCvB,CAAChN,EAAaJ,EAAeiM,EAAYR,EAAekB,IAGtDY,EAAsBrO,sBAAW,uCACnC,WAAOsO,EAAU/C,EAAUjN,EAAM0O,GAAjC,uBAAAjR,EAAA,6DACU9F,EAAY,CAAEgE,KAAM/D,GACpBqY,EAAgBvU,KAAUC,KAAK,GAEjCiU,EAAiD,KAJzD,mBAOyB,EAAAI,EAASE,aAAYjD,GAArB,oBAAkCjN,GAAlC,QAAwCrI,KAPjE,cAOQwY,EAPR,gBAQwBT,EACZM,EAAS/C,GAAT,MAAA+C,EAAQ,YAAchQ,GAAd,mCAAyBrI,GAAzB,IAAoCwY,SAAUF,EAAcrU,IAAIuU,QACxEzB,GAVZ,OAQQkB,EARR,yDAaQ9O,GAAOhK,MAAP,MACAyW,EAAS,EAAD,IAdhB,iCAgBWqC,GAhBX,0DADmC,4DAmBnC,CAACF,EAAS9X,IAGd,MAAO,CACHd,QACA0W,WACAnX,YACAqZ,UACAK,sBACArC,gB,SAtOIL,K,kBAAAA,E,mBAAAA,Q,KAKZ,IAAMwB,GAAgB,CAClB1J,OAAQkI,GAAkB+C,QAC1BrB,WAAY,CACRlK,MAAO,sBACP7Q,YAAa,sCAEjBib,SAAU,CACNpK,MAAO,qBACP7Q,YAAa,IAEjB4a,QAAS,CACL/J,MAAO,mBACP7Q,YAAa,gCAIb4Z,GAAmBzb,EClDpB,SAASke,GAAgBC,EAAcC,GAC1C,IAAMC,EAAgB7M,mBACdlK,EAAkB3B,GAASS,eAA3BkB,cAmBR,OAjBA5E,qBAAU,WACN2b,EAAczM,QAAUuM,IACzB,CAACA,IAEqB5O,uBACrB,WACI,GAAIjI,GAAiB+W,EAAczM,QAAS,CACxC,IAAM0M,EAAMD,EAAczM,QAC1B,OAAO0M,EAAG,WAAH,gBAJiB,CAU/BhX,GAV+B,mBAUb8W,KCjBpB,SAASG,GAAiBV,EAAeW,EAAmBC,GAC/D,IAAMJ,EAAgB7M,mBAGtB9O,qBAAU,WACN2b,EAAczM,QAAU6M,KAG5B/b,qBAAU,WACN,SAASgc,IACDL,EAAczM,SACdyM,EAAczM,QAAd,MAAAyM,EAAa,WAGrB,GAAIR,GAAYW,EAGZ,OAFAX,EAASc,GAAGH,EAAWE,GAEhB,WACHb,EAASe,IAAIJ,EAAWE,MAGjC,CAACb,EAAUW,ICXX,SAASK,GAASpZ,EAAiBuD,EAAkB5G,GAAoB,IAAD,EACFN,EAAWsE,eAA5E5D,EADmE,EACnEA,sBAAuBF,EAD4C,EAC5CA,qBAAsBL,EADsB,EACtBA,QAASqB,EADa,EACbA,OAC/Cwb,EAAkBnZ,GAASS,eAAlCmB,MACAqW,EAAwBzC,GAAY/U,eAApCwX,oBAHmE,EAI7Cvb,mBAAS3C,GAJoC,mBAIpEqf,EAJoE,KAI3DC,EAJ2D,OAKzC3c,mBAA8B,IALW,mBAKpE4c,EALoE,KAKzDC,EALyD,OAMrC7c,mBAAS3C,GAN4B,mBAMpEyf,EANoE,KAMvDC,EANuD,KAQrEC,EAAoBjd,IAAY9B,EAASQ,KAAO0B,EAAwBF,EACxEiF,EAAQnF,IAAY9B,EAASQ,KAArB,OAA4Bge,QAA5B,IAA4BA,OAA5B,EAA4BA,EAAehe,KAA3C,OAAkDge,QAAlD,IAAkDA,OAAlD,EAAkDA,EAAetX,IAEzEqW,EAAWxX,mBAAQ,WACrB,OAAOkF,qBAAU9F,KAAgB,OAAL8B,QAAK,IAALA,OAAA,EAAAA,EAAO+X,OAAO7Z,KAAmB,OAC9D,CAAC8B,EAAO9B,IAEX/C,qBAAU,WAAM,4CACZ,kCAAA4I,EAAA,2DACQ/D,GAAS8X,GAAqB5Z,GADtC,uBAEcoY,EAAW,IAAIjS,WAAkBnG,EAAS8B,EAAMsE,UAAUC,WAFxE,SAGoCuT,EAAkBpc,IAAI,CAAC4a,EAASsB,gBAHpE,mCAGeA,EAHf,KAIQC,EAAetW,GAAWqW,EAAanW,IAJ/C,4CADY,uBAAC,WAAD,wBAQZuW,KACD,CAAChY,EAAO8X,EAAmB5Z,EAASuD,IAEvCtG,qBAAU,WAAM,4CACZ,kCAAA4I,EAAA,2DACQ/D,GAAS8X,GAAqB5Z,GAAWxD,GADjD,uBAEc4b,EAAW,IAAIjS,WAAkBnG,EAAS8B,EAAMsE,UAAUC,WAFxE,SAGgCuT,EAAkBpc,IAAI,CAAC4a,EAAS2B,UAAUvd,KAH1E,mCAGe8c,EAHf,KAIQC,EAAWlW,GAAWiW,EAAS/V,IAJvC,4CADY,uBAAC,WAAD,wBAQZyW,KACD,CAAClY,EAAO8X,EAAmB5Z,EAASxD,EAAS+G,IAEhD,IAAM0W,EAA0BnQ,sBAAW,uCACvC,WAAOoQ,GAAP,eAAArU,EAAA,2DACQqU,GAAW9B,GAAY5b,GAD/B,gCAEiC4b,EAASoB,UAAUhd,EAAS0d,GAF7D,OAEcC,EAFd,OAGQV,GAAa,SAAAvB,GAAI,kCACVA,GADU,kBAEZgC,EAAU7W,GAAW8W,EAAY5W,QAL9C,2CADuC,sDAUvC,CAAC6U,EAAU5b,EAAS+G,IAGlB6W,EAAU3B,GAAe,uCAC3B,WAAO3X,EAAyBuZ,GAAhC,eAAAxU,EAAA,sEAC0BsS,EAClBC,EAAUnW,QAAQpE,GAClB,UACA,CAACiD,EAAiB+C,GAAWwW,IAC7B,CACI9M,OAAQkI,GAAkB6E,QAC1BnD,WAAY,CACR/a,YAAa,MAR7B,cACU4b,EADV,yBAYWA,GAZX,2CAD2B,wDAe3B,CAACG,EAAqBta,EAAQua,IAG5BmC,EAAkB9B,GAAe,uCACnC,WAAO3X,GAAP,eAAA+E,EAAA,sEAC0BsS,EAClBC,EAAUnW,QAAQpE,GAClB,UACA,CAACiD,EAAiBoB,YAAUsY,YAC5B,CACIjN,OAAQkI,GAAkB6E,QAC1BnD,WAAY,CACR/a,YAAa,MAR7B,cACU4b,EADV,yBAYWA,GAZX,2CADmC,sDAenC,CAACG,EAAqBta,EAAQua,IAoBlC,OAjBAU,GAAiBV,EAAU,WAAX,uCAAuB,WAAOrU,EAAcuM,GAArB,eAAAzK,EAAA,0DAC/BuS,GAAarU,IAASvH,GAAW8T,IAAO9T,EADT,gCAET4b,EAAS2B,UAAUvd,GAFV,OAEzB8c,EAFyB,OAG/BC,EAAWlW,GAAWiW,EAAS/V,IAHA,2CAAvB,yDAOhBuV,GAAiBV,EAAU,WAAX,uCAAuB,WAAOqC,EAAeP,GAAtB,eAAArU,EAAA,0DAC/BuS,GAAYqC,IAAUje,EADS,gCAEP4b,EAASoB,UAAUiB,EAAOP,GAFnB,OAEzBV,EAFyB,OAG/BC,GAAa,SAAAvB,GAAI,kCACVA,GADU,kBAEZgC,EAAU7W,GAAWmW,EAAWjW,QALN,2CAAvB,yDAUT,CACH6U,WACA7U,WACAmW,cACAJ,UACAE,YACAS,0BACAG,UACAG,mBCrFOG,OA3Bf,YAAuD,IAAlCC,EAAiC,EAAjCA,cACTne,EAAYH,EAAWsE,eAAvBnE,QACAkG,EAAexC,GAASS,eAAxB+B,WAGA4W,EAAYF,GAAS1W,EAAaA,EAAWhB,SAAW,GlHdjC,EkHc0D7G,EAASQ,MAA1Fie,QAEFpL,EAAgBpE,uBAAY,WAE9B,IAAM8Q,EAAetB,EAAQrV,QAAQ,GACrC0W,EAAcC,KACf,CAACtB,EAASqB,IAEb,OACI,cAAC,KAAD,UACI,eAAC,KAAD,CAAQE,EAAE,OAAOxM,eAAe,gBAAgBK,WAAW,aAA3D,UACI,eAAC,KAAD,2BAAmBlS,EAAUkI,GAAqB4U,GAAW,UAC5D9c,GACG,cAAC,KAAD,CAAQ2W,aAAa,KAAKjE,KAAK,KAAKgB,QAAQ,UAAU3B,QAASL,EAA/D,uB,UCdL4M,OAVf,SAAwBpL,GACpB,OACI,cAAC,KAAD,UACI,cAAC,KAAD,CAAMtB,SAAS,KAAKW,MAAM,WAAWsC,cAAc,YAAnD,SACK3B,EAAMe,cCNVsK,GAAQze,aAErB,WAAoB,MAEQM,mBAAehD,EAAKohB,MAF5B,mBAETC,EAFS,KAEHC,EAFG,OAKgBte,mBAAiB,GALjC,mBAKTue,EALS,KAKCC,EALD,OAQgBxe,mBAAiB,IARjC,mBAQTye,EARS,KAQCC,EARD,OAUoB1e,mBAAqB,MAVzC,mBAUT2e,EAVS,KAUGZ,EAVH,KAYhB,OAAO/Z,mBACH,iBAAO,CACHqa,OACAC,UACAC,WACAC,cACAC,WACAC,cACAC,aACAZ,mBAEJ,CAACQ,EAAUI,EAAYN,EAAMI,OCnB9B,SAASG,GAAT,GAA+G,IAArFzR,EAAoF,EAApFA,MAAoF,IAA7E0R,aAA6E,MAT/F,IAS+F,EAAtDC,EAAsD,EAAtDA,iBAAkBC,EAAoC,EAApCA,gBAAoC,EACrE/e,mBAAYmN,GADyD,mBAC1G6R,EAD0G,KAC1FC,EAD0F,KAoBjH,OAjBA5e,qBAAU,WACFye,GACAA,EAAiB3R,GAGrB,IAAM+R,EAAUlF,YAAW,WACvBiF,EAAkB9R,GACd4R,GACAA,EAAgB5R,KAErB0R,GAEH,OAAO,WACHM,aAAaD,MAElB,CAAC/R,EAAO0R,EAAOC,EAAkBC,IAE7BC,ECwCII,OA3Df,WAAuB,IACXrW,EAAgBH,GAAI7E,eAApBgF,YADU,EAEoBoV,GAAMpa,eAApC4a,EAFU,EAEVA,WAAYZ,EAFF,EAEEA,cAFF,EAGoB/d,mBAAiB,IAHrC,mBAGXqf,EAHW,KAGEC,EAHF,KAIZxU,GAA8B,OAAX/B,QAAW,IAAXA,OAAA,EAAAA,EAAa+B,mBAAoB,GACpDyU,EAAsBX,GAAY,CAAEzR,MAAOkS,EAAaR,MAAO,MAE/DW,EAAgBtS,uBAClB,SAAAhR,GACI,IAAMiR,EAAQjR,EAAE4X,OAAO3G,MACvB,GAAIA,GAAS,EAAG,CACZ,IAAMsS,EAAiB1X,GAAYoF,EtHjBrB,GsHkBdmS,EAAeG,MAGvB,CAACH,IAgBL,OAbAjf,qBAAU,WAEN,GAA4B,KAAxBkf,EAAJ,CAKA,IAAMG,EAAwB,IAAIpiB,IAAIiiB,IAClC,OAACZ,QAAD,IAACA,OAAD,EAACA,EAAY3G,GAAG0H,KAChB3B,EAAc2B,QANd3B,EAAc,QAQnB,CAACY,EAAYY,EAAqBxB,IAE9B/Z,mBACH,kBACI,eAAC,KAAD,CAAalI,GAAG,SAAhB,UACI,cAAC,GAAD,yBACA,cAAC,KAAD,CAAaqR,MAAOkS,EAAaM,QAASH,EAA1C,SACI,eAAC,KAAD,WACI,cAAC,KAAD,IACA,cAAC,KAAD,CAAmBvB,EAAE,OAArB,SACI,cAAC,KAAD,CACIA,EAAE,OACF2B,UAAU,SACVrO,WAAW,OACXC,SAAS,KACTW,MAAM,WACNsC,cAAc,YANlB,SAQK3J,WAKjB,cAAC,GAAD,CAAWiT,cAAeuB,SAGlC,CAACD,EAAaG,EAAe1U,K,UCiBtB+U,OArEf,WAAqB,IAAD,EACwB1B,GAAMpa,eAAtCsa,EADQ,EACRA,KAAME,EADE,EACFA,SAAUC,EADR,EACQA,YADR,EAEkBxe,mBAAiB,GAFnC,mBAET8f,EAFS,KAEEC,EAFF,KAGVC,EAAoBpB,GAAY,CAAEzR,MAAO2S,EAAWjB,MAAO,MAE3DoB,EAAiB/S,uBACnB,SAACC,GACOA,IAAU2S,GACVC,EAAa5S,KAGrB,CAAC2S,IASL,OANAzf,qBAAU,WACF2f,IAAsBzB,GACtBC,EAAYwB,KAEjB,CAACA,EAAmBzB,EAAUC,IAE1Bxa,mBACH,kBACI,eAAC,KAAD,CAAalI,GAAG,YAAhB,UACI,cAAC,GAAD,uBACA,cAAC,KAAD,CAAKokB,GAAI,GAAIC,GAAI,EAAG1N,GAAI,EAAGf,GAAG,gBAAgB6E,aAAa,KAA3D,SACI,eAAC,KAAD,CACI6J,SAAUH,EACVpiB,aAAciiB,EACdO,IAAK,EACLC,IAAK,GACLC,KAAM,GACNlN,YAAsB,IAATgL,EAAa,QAAU,MANxC,UAQI,cAAC,KAAD,CAAa3M,GAAG,WAAhB,SACI,cAAC,KAAD,MAEJ,cAAC,KAAD,CACI8O,OAAQ,CAAEC,UAAW,OACrB7O,OAAQ,CAAE6O,UAAW,OACrBC,aAAc,CAAED,UAAW,OAC3BE,SAAU,CAAEF,UAAW,OACvBG,SAAU,CAAEH,UAAW,OACvBI,QAAS,CACLC,WAAY,OACZrO,GAAI,CAAC,OAAQ,GACb0N,GAAI,CAAC,MAAO,GACZpN,OAAQ,CAAC,OAAQ,QACjBgO,UAAW,CAAC,wBAAyB,wBACrCN,UAAW,MAEfM,UAAW,CAAC,uBAAwB,wBACpCtN,EAAG,EACHwK,EAAG,GACHvM,GAAa,IAAT2M,EAAa,WAAa,SAC9BoC,UAAU,MAlBd,SAoBI,eAAC,KAAD,CAAMjP,SAAS,KAAKD,WAAW,OAAOY,MAAgB,IAATkM,EAAa,YAAc,UAAxE,UACKyB,EADL,iBAMZ,cAAC,KAAD,gCAGR,CAACG,EAAgB5B,EAAMyB,K,UChChBkB,OA1Cf,WAA2B,IAAD,EACyCpY,GAAI7E,eAAhDkd,EADG,EACdpf,UAA4BgH,EADd,EACcA,OAAQG,EADtB,EACsBA,eAEtCmO,EAAgBnT,mBAAQ,WAC1B,OAAK6E,EAGEvM,OAAO8a,OAAOvO,GAAQwO,MAAK,SAACpO,EAAGqO,GAAJ,OAAUrO,EAAE4B,gBAAgB0M,cAAcD,EAAEzM,oBAFnE,KAGZ,CAAChC,IAEJxI,qBAAU,WAKF8W,GAAiBA,EAAczO,OAAS,GAFxCM,EAAemO,EAAc,MAKlC,CAACnO,EAAgBmO,IAEpB,IAAM8I,EAAiB/S,uBACnB,SAAAhR,GACI,IAAMqM,EAAQrM,EAAE4X,OAAO3G,MACvBnE,EAAemO,EAAc5O,MAEjC,CAAC4O,EAAenO,IAGpB,OACI,eAAC,KAAD,CAAalN,GAAG,SAAhB,UACI,cAAC,GAAD,qBACA,cAAC,KAAD,CAAQskB,SAAUH,EAAgB7L,WAAY6M,EAA9C,SACK9J,EAAcxb,KAAI,SAACiK,EAAc2C,GAAf,OACf,yBAA+D4E,MAAO5E,EAAtE,UACK3C,EAAIiF,gBADT,MAC6BjF,EAAIkF,mBADjC,UAAgBlF,EAAIiF,gBAApB,YAAuCjF,EAAIkF,4B,UC3BxD,SAASoW,GAAe9d,EAAiBxF,GAAe,IACnDuC,EAA0BV,EAAWsE,eAArC5D,sBACAyF,EAAQtC,GAASS,eAAjB6B,IAFkD,EAGV5F,mBAAqB,MAHX,mBAGnDmhB,EAHmD,KAGjCC,EAHiC,OAIRphB,mBAAqB,MAJb,mBAInDqhB,EAJmD,KAIhCC,EAJgC,KAMpD9F,EAAWxX,mBAAQ,WACrB,OAAOkF,qBAAU9F,KAAc,OAAHwC,QAAG,IAAHA,OAAA,EAAAA,EAAKqX,OAAO7Z,KAAmB,OAC5D,CAACwC,EAAKxC,IAEHme,EAAgBrU,sBAAW,uCAC7B,WAAOsH,EAAUgN,GAAjB,SAAAvY,EAAA,0DACQuS,EADR,sCAGmBjU,GAHnB,SAGqCiU,EAAS+F,cAAc/M,EAAKlN,GAAYka,IAH7E,kGAKkB,IAAIjJ,GAAS3a,EAAM,gBAAiBwF,GALtD,iCAQW,MARX,yDAD6B,wDAW7B,CAACA,EAASoY,EAAU5d,IAGlB6jB,EAAiBvU,sBAAW,uCAC9B,WAAOoF,GAAP,eAAArJ,EAAA,0DACQuS,EADR,iCAGkBhH,EAAWlC,EAAKoP,GAAG,GAAK3kB,EAAI4kB,SAAW5kB,EAAI6kB,cAH7D,KAImBra,GAJnB,SAIqCiU,EAASiG,eAAejN,EAAKlN,GAAYgL,EAAK2D,QAJnF,oGAMkB,IAAIsC,GAAS3a,EAAM,iBAAkBwF,GANvD,iCASW,MATX,0DAD8B,sDAY9B,CAACA,EAASoY,EAAU5d,IAwBxB,OArBAyC,qBAAU,WAAM,4CACZ,oCAAA4I,EAAA,yDACkC,OAA1B9I,GAA0C,OAARyF,IAAgBsD,qBAAU9F,GADpE,wBAEcye,EAAgB,IAAItY,WAAkBnG,EAASwC,EAAI4D,UAAUC,WAF3E,SAG4DtJ,EAAsBS,IAAI,CAC1EihB,EAAcR,oBACdQ,EAAcV,qBAL1B,mCAGeE,EAHf,KAGkCF,EAHlC,KAOQG,EAAqB7a,GAAW4a,IAChCD,EAAoB3a,GAAW0a,IARvC,6CADY,uBAAC,WAAD,wBAYZW,KACD,CAAC1e,EAASwC,EAAKzF,IAGlB+b,GAAiBV,EAAU,sBAAsB,SAAC6F,EAAmBF,EAAkBtX,GACnFyX,EAAqB7a,GAAW4a,IAChCD,EAAoB3a,GAAW0a,OAG5B,CACH3F,WACA2F,mBACAE,oBACAE,gBACAE,kBCrED,SAASM,KAAmB,IACvBhZ,EAAgBH,GAAI7E,eAApBgF,YADsB,EAESoV,GAAMpa,eAArC4a,EAFsB,EAEtBA,WAAYJ,EAFU,EAEVA,SACd/J,EAHwB,EAEA6J,OACTrhB,EAAKohB,KAAOrhB,EAAI4kB,SAAW5kB,EAAI6kB,cAI5CL,EAAkBL,IAFI,OAAXnY,QAAW,IAAXA,OAAA,EAAAA,EAAa3F,UAAW,IAChB,OAAX2F,QAAW,IAAXA,OAAA,EAAAA,EAAa8B,kBAAmB,IACxC0W,cAPsB,EASUvhB,mBAAiB,IAT3B,mBASvBgiB,EATuB,KASTC,EATS,OAUYjiB,oBAAkB,GAV9B,mBAUvBkiB,EAVuB,KAURC,EAVQ,KAgD9B,OA9BA9hB,qBAAU,WAAM,4CACZ,gCAAA4I,EAAA,yDACuB,OAAf0V,EADR,uBAEQsD,EAAgB,IAFxB,8BAOQtD,EAAW3G,GAAG,GAPtB,uBAQQiK,EAAgB,KARxB,iCAYIE,GAAiB,GAGXX,EAAW7C,EAAWvX,IAAImX,GAfpC,UAgBmCgD,EAAc/M,EAAKgN,GAhBtD,QAgBUY,EAhBV,OAkBQ3C,EAAiB,GACI,OAArB2C,IACA3C,EAAiB1X,GAAYqa,EAAiBxb,WAAY,IAG9Dqb,EAAgBxC,GAChB0C,GAAiB,GAxBrB,6CADY,uBAAC,WAAD,wBA2BZE,KACD,CAAC7N,EAAK+M,EAAe5C,EAAYJ,IAE7B,CAAEyD,eAAcE,gBAAe1N,OCvB3BK,OA3Bf,WAAqB,IACT9L,EAAgBH,GAAI7E,eAApBgF,YADQ,EAEwBgZ,KAAhCC,EAFQ,EAERA,aAAcE,EAFN,EAEMA,cAChBrX,GAA6B,OAAX9B,QAAW,IAAXA,OAAA,EAAAA,EAAa8B,kBAAmB,GAExD,OACI,eAAC,KAAD,CAAa/O,GAAG,WAAhB,UACI,cAAC,GAAD,uBACA,eAAC,KAAD,WACI,cAAC,KAAD,CAAOwX,QAAQ,SAASgP,YAAU,EAACnV,MAAO+U,EAAgB,eAAOF,IACjE,cAAC,KAAD,CAAmB/D,EAAE,OAArB,SACI,cAAC,KAAD,CACIA,EAAE,OACF2B,UAAU,SACVrO,WAAW,OACXC,SAAS,KACTW,MAAM,WACNsC,cAAc,YANlB,SAQK5J,a,UCcV0X,OAlCf,WAAyB,IAAD,EACMpE,GAAMpa,eAAxBsa,EADY,EACZA,KAAMC,EADM,EACNA,QAERkE,EAAoBtV,uBAAY,WAC9BmR,IAASrhB,EAAKohB,MACdE,EAAQthB,EAAKohB,QAElB,CAACE,EAASD,IAEPoE,EAAqBvV,uBAAY,WAC/BmR,IAASrhB,EAAK0lB,OACdpE,EAAQthB,EAAK0lB,SAElB,CAACpE,EAASD,IAEb,OACI,eAAC,KAAD,CAAaJ,EAAE,OAAO0E,YAAU,EAACrP,QAAQ,QAAzC,UACI,cAAC,KAAD,CACIhB,KAAK,KACL6B,aAAW,EACXxC,QAAS6Q,EACTnP,YAAsB,IAATgL,EAAa,QAAU,OACpCtM,GAAG,MACHuB,QAAQ,QANZ,kBAUA,cAAC,KAAD,CAAQhB,KAAK,KAAK6B,aAAW,EAACxC,QAAS8Q,EAAoBpP,YAAsB,IAATgL,EAAa,MAAQ,OAA7F,uBCqCGuE,OArDf,WAAqB,IAAD,EACkBzE,GAAMpa,eAAhC0a,EADQ,EACRA,SAAUC,EADF,EACEA,YAEZuB,EAAiB/S,uBACnB,SAAAC,GACQA,GAAS,GACTuR,EAAYvR,KAGpB,CAACuR,IAEL,OAAO1a,mBACH,kBACI,eAAC,KAAD,CAAalI,GAAG,WAAhB,UACI,cAAC,GAAD,2BACA,eAAC,KAAD,CACI+mB,iBAAe,EACfxC,IAAK,EACLE,KAAM,GACND,IAAK,IACLwC,kBAAkB,EAClB1C,SAAUH,EACV9S,MAAOsR,EACPsE,oBAAoB,EARxB,UAUI,cAAC,KAAD,IACA,eAAC,KAAD,WACI,cAAC,KAAD,IACA,cAAC,KAAD,OAEJ,cAAC,KAAD,CAAmB9E,EAAE,OAAOlM,GAAI,EAAhC,SACI,cAAC,KAAD,CACIkM,EAAE,OACF2B,UAAU,SACVrO,WAAW,OACXC,SAAS,KACTW,MAAM,WACNsC,cAAc,YANlB,oBAYR,cAAC,KAAD,6HAMR,CAACwL,EAAgBxB,KC3DZuE,GAAb,WACI,WAAqBxH,EAAkCva,GAA6B,yBAA/Dua,WAA8D,KAA5Bva,SAC/CA,IACAmL,KAAKoP,SAAWA,EAASnW,QAAQpE,IAH7C,8CAOI,SAAUqI,EAAoB2Z,GAC1B,OAAO7W,KAAK8O,QAAQ,YAAa,CAAC5R,EAAY2Z,MARtD,4BAWI,SAAe3Z,GACX,OAAO8C,KAAK8O,QAAQ,iBAAkB,CAAC5R,MAZ/C,2BAeI,SAAcA,EAAoB4Z,GAC9B,OAAO9W,KAAK8O,QAAQ,gBAAiB,CAAC5R,EAAY4Z,MAhB1D,0BAmBI,SACI5Z,EACAkL,EACA2O,EACA5E,EACA6E,GAEA,OAAOhX,KAAK8O,QAAQ,eAAgB,CAAC5R,EAAYkL,EAAK2O,EAAkB5E,EAAU6E,MA1B1F,0BA6BI,SAAa9Z,EAAoB+Z,GAC7B,OAAOjX,KAAK8O,QAAQ,eAAgB,CAAC5R,EAAY+Z,MA9BzD,4DAiCI,WAAc5K,EAAkBjN,GAAhC,iBAAAvC,EAAA,6DACU9F,EAAY,CAAEgE,KAAMiF,KAAKoP,SAASva,OAAOqiB,cADnD,mBAGW,EAAAlX,KAAKoP,UAAS/C,GAAd,oBAA2BjN,GAA3B,mCACArI,GADA,IAGHwY,SAAUzU,KAAUC,KAAK,YANjC,gDAjCJ,gECOa5C,GAAgB7E,aAM7B,WAA6B,IACjBuB,EAAWxB,EAAWsE,eAAtB9C,OADgB,EAEiBqC,GAASS,eAA1CkC,EAFgB,EAEhBA,cAAeE,EAFC,EAEDA,cACf+U,EAAYpC,GAAY/U,eAAxBmX,QAEFqI,EAA8Bvf,mBAAQ,WACxC,OAAKiC,GAAkBE,GAAkBlF,EAGlC,eACFpC,EAAQ2kB,KAAO,IAAIR,GAAiB/c,EAAehF,IAH7C,OAKZ,CAACgF,EAAeE,EAAelF,IAE5BwiB,EAAkBzf,mBAAQ,WAC5B,OAAOuf,EAAYA,EAAU1kB,EAAQ2kB,MAAQ,OAC9C,CAACD,IAEEG,EAAgBxW,uBAClB,SAAC5D,EAAoB4Z,GACbO,GACAvI,EAAQuI,EAAgBC,cAAcpa,EAAYhC,GAAY4b,OAGtE,CAACO,EAAiBvI,IAGhByI,EAAezW,uBACjB,SAACsH,EAAUlL,EAAoB6Z,EAAuB5E,EAAe6E,GAC7DK,GACAvI,EACIuI,EAAgBE,aACZra,EACAkL,EACAlN,GAAY6b,GACZ7b,GAAYiX,GACZjX,GAAY8b,OAK5B,CAACK,EAAiBvI,IAGhB0I,EAAY1W,uBACd,SAAC5D,EAAoB2Z,GACjB,GAAIQ,EAAiB,CACjB,IAAMI,EAAmB9c,GAAekc,GACxC/H,EAAQuI,EAAgBG,UAAUta,EAAYua,OAGtD,CAACJ,EAAiBvI,IAGhB4I,EAAe5W,uBACjB,SAAC5D,EAAoBya,GACjB,GAAIN,EAAiB,CACjB,IAAMO,EAAiBjd,GAAegd,GACtC7I,EAAQuI,EAAgBK,aAAaxa,EAAY0a,OAGzD,CAACP,EAAiBvI,IAGtB,MAAO,CACHyI,eACAD,gBACAE,YACAE,mBCzCOG,OAnCf,WAAyB,IACblb,EAAgBH,GAAI7E,eAApBgF,YADY,EAE6BoV,GAAMpa,eAA/C0a,EAFY,EAEZA,SAAUJ,EAFE,EAEFA,KAAMM,EAFJ,EAEIA,WAAYJ,EAFhB,EAEgBA,SAC5BoF,EAAiBpf,GAAcR,eAA/B4f,aACWO,EAAkBpL,GAAY/U,eAAzClC,UAJY,EAKyBkgB,KAArCC,EALY,EAKZA,aAAcxN,EALF,EAKEA,IAAK0N,EALP,EAKOA,cACrB5Y,GAAwB,OAAXP,QAAW,IAAXA,OAAA,EAAAA,EAAa3F,UAAW,GAErCgR,EAAa8P,GAAiBhC,GAAgC,OAAfvD,GAAuBA,EAAW3G,GAAG,GAEpFmM,EAAgBjX,sBAAW,sBAAC,kCAAAjE,EAAA,sDAC1B0V,GAAczV,qBAAUI,KAClB8a,EAAgB,IAAI9mB,IAAI0kB,GACxBlC,EAAY,IAAIxiB,IAAIihB,GACpB8F,EAAY5F,EAAW,IACvB6F,EACFjG,IAASrhB,EAAKohB,KAAOgG,EAAchd,IAAI,EAAIid,GAAaD,EAAchd,IAAI,EAAIid,GAClFV,EAAanP,EAAKlL,EAAYqV,EAAYmB,EAAWwE,IAP3B,2CAS/B,CAAChb,EAAYqV,EAAYJ,EAAU/J,EAAKmP,EAAc3B,EAAc3D,EAAMI,IAE7E,OACI,cAAC,KAAD,CACInM,KAAK,KACLiS,SAAUnQ,EACVvS,UAAWqiB,EACX/P,aAAW,EACXd,YAAY,OACZ1B,QAASwS,EANb,+B,UC4GOK,OAjIf,WAAwB,IACZzb,EAAgBH,GAAI7E,eAApBgF,YADW,EAEoBoV,GAAMpa,eAArC4a,EAFW,EAEXA,WAAYJ,EAFD,EAECA,SAAUF,EAFX,EAEWA,KAFX,EAGqB0D,KAAhCC,EAHW,EAGXA,aAAcE,EAHH,EAGGA,cAEhB5Y,GAAwB,OAAXP,QAAW,IAAXA,OAAA,EAAAA,EAAa3F,UAAW,GALxB,EAO6B8d,GAAe5X,GADpC,OAAXP,QAAW,IAAXA,OAAA,EAAAA,EAAa8B,kBAAmB,IACxCwW,EAPW,EAOXA,kBAAmBF,EAPR,EAOQA,iBAPR,ECDhB,SAA+B/d,GAAkB,IAAD,EACvBE,GAASS,eAA7B+B,EAD2C,EAC3CA,WAAYF,EAD+B,EAC/BA,IAD+B,EAERnG,EAAWsE,eAA9CnE,EAF2C,EAE3CA,QAASO,EAFkC,EAElCA,sBAFkC,EAI3BH,mBAAqB,MAJM,mBAI5CsS,EAJ4C,KAItCmS,EAJsC,OAKvBzkB,mBAAqB,MALE,mBAK5CwV,EAL4C,KAKpCkP,EALoC,OAMT1kB,mBAAqB,MANZ,mBAM5CuV,EAN4C,KAM7BoP,EAN6B,OAOb3kB,mBAAqB,MAPR,mBAO5C4kB,EAP4C,KAO/BC,EAP+B,KAS7CC,EAAqB5X,sBAAW,sBAAC,4CAAAjE,EAAA,yDAEL,OAA1B9I,GACQ,OAARyF,GACe,OAAfE,IACAoD,qBAAUpD,EAAWxB,sBACT,OAAZ1E,IACAsJ,qBAAU9F,GAPqB,wBAUzB6T,EAA8B,IAAI1N,WACpCzD,EAAWxB,oBACX4S,GAA4B1M,KAZD,SAcZrK,EAAsBS,IAAI,CACzCqW,EAA4BO,sCAAsCpU,EAASxD,GAC3EqX,EAA4BQ,iBAAiBrU,EAASxD,EAAS1C,EAAcwa,aAhBlD,UAczBvV,EAdyB,SAmBNA,EAAK,GAAtBmQ,EAnBuB,EAmBvBA,KAAMkD,EAnBiB,EAmBjBA,OACRD,EAAgBpT,EAAK,GAErB4iB,EAASxd,GAAY+K,GAEvB0S,EAAe,MACfD,EAAO/M,GAAG,GAzBiB,iBA0B3BgN,EAAe3nB,EA1BY,+BA4BrBmX,EAAMuQ,EAAOrD,GAAG,GAAK3kB,EAAI4kB,SAAW5kB,EAAI6kB,cA5BnB,KA6BZra,GA7BY,UA6BM3B,EAAIqX,OAAO7Z,GAASqe,eAAejN,EAAKlN,GAAYyd,EAAO9O,QA7BjE,oBA6B3B+O,GA7B2B,sBAgC/BP,EAAQM,GACRL,EAAUnd,GAAYiO,IACtBmP,EAAiBpd,GAAYgO,IAC7BsP,EAAeG,GAnCgB,4CAqCpC,CAAC7kB,EAAuByF,EAAKE,EAAYlG,EAASwD,IAMrD,OAJA/C,qBAAU,WACNykB,MACD,CAACA,IAEG,CACHxS,OACAkD,SACAD,gBACAqP,eD/C2EK,CAAsB3b,GAAvF4b,EARK,EAQX5S,KAA0B6S,EARf,EAQO3P,OAAsBD,EAR7B,EAQ6BA,cAAeqP,EAR5C,EAQ4CA,YAGzDQ,EAAyBphB,mBAAQ,WACnC,IAAKke,GAAkC,KAAjBF,GAAsC,OAAfrD,EAAqB,CAC9D,IAAM0G,EAAiB,IAAI/nB,IAAI0kB,GAC/B,OAAIqD,EAAerN,GAAG,GACX,KAEJ2G,EAAWvX,IAAImX,GAAU1X,IAAIwe,GAExC,OAAO,OACR,CAAC1G,EAAYuD,EAAe3D,EAAUyD,IAEnCsD,EAAkBthB,mBAAQ,WAC5B,GAAmB,OAAf2a,GAAuC,OAAhB5V,EAAsB,CAAC,IACtCiB,EAA2BjB,EAA3BiB,UAAWC,EAAgBlB,EAAhBkB,YACbuX,EAAW7C,EAAWvX,IAAImX,GAC1BgH,EAAU/D,EAASpa,IAAI4C,GACvBwb,EAAYhE,EAASpa,IAAI6C,GAC/B,OAAOsb,EAAQE,IAAID,GAEvB,OAAO,OACR,CAAC7G,EAAYJ,EAAUxV,IAEpBoN,EAAgBnS,mBAAQ,WAC1B,OAAmB,OAAfohB,EACOtd,GAAqBsd,GAEzB,MACR,CAACA,IAEEM,EAAiB1hB,mBAAQ,WAC3B,GAAmB,OAAfohB,GAA6C,OAAtB/D,GAAmD,OAArBF,EAA2B,CAChF,IAAMwE,EAAYtE,EAAkBxa,IAAIsa,GACxC,OAAIwE,EAAU3N,GAAG,GACN,IAEJoN,EAAWQ,IAAID,GAAW9e,IAAI8e,GAAWve,IAAI,KAAKC,QAAQ,GAErE,MAAO,MACR,CAAC+d,EAAY/D,EAAmBF,IAE7B0E,EAAS7hB,mBAAQ,WACnB,OAAY,OAARshB,EACOxd,GAAqBwd,GAEzB,MACR,CAACA,IAEEQ,EAAW9hB,mBAAQ,WAErB,GAAmB,OAAf2a,GAA+B,OAAR2G,GAAiC,KAAjBtD,EAAqB,CAC5D,GACqB,OAAjBmD,GACe,OAAfD,GACgB,OAAhBN,GACkB,OAAlBrP,GACC2P,EAAWlN,GAAG,IACfqG,KAAU6G,EAAWxD,GAAG,GAAK1kB,EAAKohB,KAAOphB,EAAK0lB,OA4B9C,OAAO5a,GAAqBwd,EAAIG,IAAI9G,IAzBpC,GADuB,IAAIrhB,IAAI0kB,GACZN,GAAGwD,EAAWjP,OAAQ,CAWrC,IAAM8P,EAAeZ,EAAaM,IAAIlQ,GAChCyQ,EAAkBrH,EAAWiH,IAAIhB,EAAY/d,IAAI0X,IAAWqH,IAAIG,GACtE,OAAOje,GAAqBwd,EAAIG,IAAIO,IAKpC,OAAOle,GAAqBwd,GAUxC,MAAO,MACR,CAAC3G,EAAY2G,EAAK/G,EAAU4G,EAAcD,EAAYN,EAAa5C,EAAc3D,EAAM9I,IAE1F,OACI,cAAC,KAAD,CAAOjD,KAAK,KAAKiE,aAAa,OAAO0P,SAAS,SAAShI,EAAE,OAAO3K,QAAQ,SAAxE,SACI,eAAC,KAAD,WACI,eAAC,KAAD,WACI,cAAC,KAAD,0BACA,cAAC,KAAD,CAAI4S,WAAS,EAAb,SAAe/P,OAEnB,eAAC,KAAD,WACI,cAAC,KAAD,2BACA,eAAC,KAAD,CAAI+P,WAAS,EAAb,UAAeR,EAAf,UAMJ,eAAC,KAAD,WACI,cAAC,KAAD,8BACA,cAAC,KAAD,CAAIQ,WAAS,EAAb,SAAeL,OAEnB,eAAC,KAAD,CAAItU,WAAW,OAAf,UACI,cAAC,KAAD,yBACA,cAAC,KAAD,CAAI2U,WAAS,EAAb,SAAeJ,aE/GpBK,OAnBf,WACI,OACI,qCACI,cAAC,KAAD,CAASlI,EAAE,OAAO3L,KAAK,KAAvB,iCAGA,eAAC,KAAD,CAAQI,QAAS,EAAGb,MAAM,OAA1B,UACI,cAAC,GAAD,IACA,cAAC,KAAD,CAAML,SAAS,KAAKW,MAAM,WAA1B,oCAIJ,cAAC,KAAD,CAAKN,MAAM,OAAOuU,YAAY,QAAQ5P,YAAY,MAAMC,YAAY,WAAWF,aAAa,OAA5F,SACI,cAAC,GAAD,UCgBD4H,OArBf,WACI,OACI,eAAC,KAAD,CAAY/F,QAAS,CAAC,EAAG,KAAM,GAAI1F,QAAS,GAA5C,UACI,eAAC,KAAD,CAAQA,QAAS,EAAGgE,EAAG,EAAvB,UACI,cAAC,GAAD,IACA,cAAC,GAAD,IACA,cAAC,GAAD,IACA,cAAC,GAAD,IACA,cAAC,GAAD,IACA,cAAC,GAAD,OAEJ,eAAC,KAAD,CAAQA,EAAG,EAAGhE,QAAS,EAAvB,UACI,cAAC,GAAD,IACA,cAAC,KAAD,CAAKb,MAAM,OAAOkB,OAAO,OAAzB,SACI,cAAC,yBAAD,CAAuBsT,MAAM,OAAOC,UAAQ,aCmBjDC,GArCF,WAAM,MAEiBvmB,mBAAS,GAF1B,mBAERwmB,EAFQ,KAEEC,EAFF,KAGP7mB,EAAYH,EAAWsE,eAAvBnE,QASR,OARAS,qBAAU,WAEFomB,EADA7mB,EACY,EAEA,KAEjB,CAACA,IAGA,mCAEI,eAAC,KAAD,CAAM0S,KAAK,KAAKoU,GAAI,EAAGne,MAAOie,EAAUpG,SAAU,SAAA7X,GAAK,OAAIke,EAAYle,IAAQ+K,QAAQ,WAAvF,UACI,eAAC,KAAD,WACI,cAAC,KAAD,0BACA,cAAC,KAAD,oBACA,cAAC,KAAD,2BAEJ,eAAC,KAAD,WACI,cAAC,KAAD,CAAUqT,GAAI,EAAGzG,GAAI,EAArB,SACI,cAAC,GAAD,MAEJ,cAAC,KAAD,CAAUyG,GAAI,EAAGzG,GAAI,EAArB,SACI,cAAC,GAAD,MAEJ,cAAC,KAAD,CAAUyG,GAAI,EAAGzG,GAAI,EAArB,SACI,cAAC,GAAD,e,6BCnCjB,SAAS/H,GAAYiE,EAAsByC,GAC9C,IAAM7C,EAAgB7M,mBAGtB9O,qBAAU,WACN2b,EAAczM,QAAU6M,KAI5B/b,qBAAU,WAON,GAAc,OAAVwe,EAAgB,CAChB,IAAM/iB,EAAK8qB,aAPf,WAC0C,qBAAlC,OAAO5K,QAAP,IAAOA,OAAP,EAAOA,EAAezM,WACT,OAAbyM,QAAa,IAAbA,KAAezM,aAKUsP,GAC7B,OAAO,kBAAMgI,cAAc/qB,OAEhC,CAAC+iB,IC0OOiI,OAtNf,WAA+B,IAAD,EAItBjS,GAAS9Q,eAJa,IAEtB6K,MAAS/D,EAFa,EAEbA,gBAAiBC,EAFJ,EAEIA,iBAAkB1H,EAFtB,EAEsBA,QAASuR,EAF/B,EAE+BA,yBACrDK,EAHsB,EAGtBA,wBAHsB,EAKiBvV,EAAWsE,eAA9CnE,EALkB,EAKlBA,QAASO,EALS,EAKTA,sBACT2F,EAAexC,GAASS,eAAxB+B,WACA4d,EAAkBnf,GAAcR,eAAhC2f,cACWqD,EAAgBjO,GAAY/U,eAAvClC,UAEA4c,EAAaN,GAAMpa,eAAnB0a,SAVkB,EAYwBze,mBAAmC,MAZ3D,mBAYnBgnB,EAZmB,KAYAC,EAZA,KAcpB3V,EAAgBpE,sBAAW,sBAAC,kCAAAjE,EAAA,sDAC1B7F,GAAiC,OAAtB4jB,GAA8BA,EAAkBxF,UAAYwF,EAAkB1U,OACjFkP,EAAmBwF,EAAnBxF,SAAUlP,EAAS0U,EAAT1U,KACZ4U,EAAgB1F,EAASpa,IAAIqX,EAAW,KACxC0I,EAAa7U,EAAKoP,GAAG,GAAKF,EAASoE,IAAIsB,GAAiB1F,EAASiE,IAAIyB,GAC3ExD,EAActgB,EAAS+jB,IALG,2CAO/B,CAAC/jB,EAASsgB,EAAesD,EAAmBvI,IAEzC2I,EAAuBla,sBAAW,sBAAC,8DAAAjE,EAAA,2DACjCrJ,GAAWkG,GAAc1C,GAAWjD,GADH,wBAG3B8W,EAA8B,IAAI1N,WACpCzD,EAAWxB,oBACX4S,GAA4B1M,KALC,SAOQrK,EAAsBS,IAAI,CAC/DqW,EAA4BO,sCAAsCpU,EAASxD,GAC3EqX,EAA4BQ,iBAAiBrU,EAASxD,EAAS1C,EAAcwa,aAThD,cAO3B2P,EAP2B,OAW3B/U,EAAO/K,GAAY8f,EAA2B,GAAG/U,MACjDkD,EAASjO,GAAY8f,EAA2B,GAAG7R,QACnDD,EAAgBhO,GAAY8f,EAA2B,IAGvDtd,EAAc,IAAIR,WAAkBnG,EAASkkB,GAAY9c,KACzDgK,EAAWlC,EAAKoP,GAAG,GAAK3kB,EAAI4kB,SAAW5kB,EAAI6kB,cAjBhB,UAkBRzhB,EAAsBS,IAAI,CAC/CmJ,EAAY0X,eAAejN,EAAKlN,GAAYgL,EAAK2D,QACjDlM,EAAYC,YACZD,EAAYE,gBArBiB,QAkB3Bsd,EAlB2B,qBAuBUA,EAvBV,GAuB1B/F,EAvB0B,KAuBhBxX,EAvBgB,KAuBLC,EAvBK,KAwB3Bud,EAAc/gB,GAAWuD,GACzByd,EAAgBhhB,GAAWwD,GAC3Byd,EAAangB,GAAYia,GAGzB+D,EAAUmC,EAAWtgB,IAAIogB,GACzBhC,EAAYkC,EAAWtgB,IAAIqgB,GAC3BnC,EAAMC,EAAQE,IAAID,GAUxByB,EAR2B,CACvBzF,SAAUkG,EACVpV,OACAkD,SACAD,gBACA+P,QAtC6B,wBA2CjC2B,EAAqB,MA3CY,4CA6CtC,CAACrnB,EAASwD,EAAS0C,EAAY3F,IAElCE,qBAAU,WACN+mB,MACD,CAACA,IAMJjP,GAAYiP,EAAsB,KAGlC,IAAMO,EAAe3jB,mBAAQ,WACzB,GAA0B,OAAtBgjB,EACA,MAAO,IAFoB,IAIvBxF,EAAmBwF,EAAnBxF,SAAUlP,EAAS0U,EAAT1U,KAClB,OAAIA,EAAK0F,GAAG,GACD,IAEJlQ,GAAqB0Z,EAAS3a,IAAIyL,EAAK2D,UAC/C,CAAC+Q,IACEjR,EAAS/R,mBAAQ,WACnB,OAA0B,OAAtBgjB,GAA8BA,EAAkBzR,cACzCyR,EAAkBzR,cAAclO,QAAQ,GAE5C,MACR,CAAC2f,IACE5Q,EAAYpS,mBAAQ,WACtB,OAA0B,OAAtBgjB,GAA8BA,EAAkBxR,OACzC1N,GAAqBkf,EAAkBxR,QAE3C,MACR,CAACwR,IACEnB,EAAS7hB,mBAAQ,WACnB,OAA0B,OAAtBgjB,GAA8BA,EAAkB1B,IACzC0B,EAAkB1B,IAAIje,QAAQ,GAElC,MACR,CAAC2f,IACElB,EAAW9hB,mBAAQ,WACrB,GAC0B,OAAtBgjB,GACAA,EAAkBxR,QAClBwR,EAAkBzR,eAClByR,EAAkB1B,IACpB,CAAC,IACS9P,EAA+BwR,EAA/BxR,OAAQD,EAAuByR,EAAvBzR,cAAe+P,EAAQ0B,EAAR1B,IAC/B,OAAOxd,GAAqB0N,EAAOiQ,IAAIlQ,GAAeqQ,IAAIN,IAE9D,MAAO,MACR,CAAC0B,IAEJ,OAAOhjB,mBACH,kBACI,eAAC,KAAD,CACIqO,YAAU,EACVuV,aAAa,gBACbrV,OAAQoC,EACRnC,QAASwC,EAJb,UAMI,cAAC,KAAD,IACA,eAAC,KAAD,CAAcuB,aAAa,MAAM9D,GAAI,EAArC,UACI,eAAC,KAAD,8BAA8B5H,EAA9B,OACA,cAAC,KAAD,IACA,cAAC,KAAD,UACI,eAAC,KAAD,CAAQ6H,QAAS,EAAjB,UACI,cAAC,KAAD,CAASuL,EAAE,OAAO3L,KAAK,KAAvB,iCAGA,cAAC,KAAD,CACIT,MAAM,OACNuU,YAAY,QACZ5P,YAAY,MACZC,YAAY,WACZF,aAAa,OALjB,SAOI,cAAC,KAAD,CAAOjE,KAAK,KAAKiE,aAAa,OAAO0P,SAAS,SAAShI,EAAE,OAAO3K,QAAQ,SAAxE,SACI,eAAC,KAAD,WACI,eAAC,KAAD,CAAI/B,WAAW,OAAf,UACI,cAAC,KAAD,yBACA,eAAC,KAAD,CAAI2U,WAAS,EAAb,UACKyB,EADL,IACoB7c,QAGxB,eAAC,KAAD,WACI,cAAC,KAAD,qBACA,eAAC,KAAD,CAAIob,WAAS,EAAb,UACK9P,EADL,IACiBtL,QAGrB,eAAC,KAAD,WACI,cAAC,KAAD,kBACA,eAAC,KAAD,CAAIob,WAAS,EAAb,UACKnQ,EADL,IACcjL,QAGlB,eAAC,KAAD,WACI,cAAC,KAAD,8BACA,eAAC,KAAD,CAAIob,WAAS,EAAb,UACKL,EADL,IACc/a,QAGlB,eAAC,KAAD,WACI,cAAC,KAAD,mCACA,eAAC,KAAD,CAAIob,WAAS,EAAb,UACKJ,EADL,IACgBhb,eAMhC,cAAC,KAAD,SAGR,cAAC,KAAD,UACI,cAAC,KAAD,CACIqJ,aAAW,EACXd,YAAY,OACZf,KAAK,KACLX,QAASL,EACTzP,UAAWklB,EALf,sCAahB,CACIlc,EACAC,EACAkK,EACA2S,EACA9B,EACAvU,EACAqD,EACAoS,EACA3Q,EACAL,EACA+P,KCtPC+B,GAASnoB,aAEtB,WAAsB,IAAD,EACiBM,mBAAoB/C,EAAU6qB,KAD/C,mBACVC,EADU,KACCC,EADD,OAEWhoB,mBAAqB,MAFhC,mBAEVwV,EAFU,KAEFkP,EAFE,KAIjB,MAAO,CACHqD,YACAC,eACAxS,SACAkP,gBCqBOuD,OA1Bf,WAAyB,IAER7kB,EACTyR,GAAS9Q,eADT6K,MAASxL,QAFO,EAIgBmB,GAAcR,eAA1C6f,EAJY,EAIZA,UAAWE,EAJC,EAIDA,aAJC,EAKU+D,GAAO9jB,eAA7BgkB,EALY,EAKZA,UAAWvS,EALC,EAKDA,OACAuR,EAAgBjO,GAAY/U,eAAvClC,UAEFyP,EAAgBpE,uBAAY,WACzBhE,qBAAU9F,IAAuB,OAAXoS,IAGvBuS,IAAc9qB,EAAU6qB,IACxBlE,EAAUxgB,EAAS6D,GAAWuO,IACvBuS,IAAc9qB,EAAUirB,QAC/BpE,EAAa1gB,EAAS6D,GAAWuO,OAEtC,CAACoO,EAAWxgB,EAASoS,EAAQuS,EAAWjE,IAE3C,OACI,cAAC,KAAD,CAAQ3P,aAAW,EAACd,YAAY,OAAOf,KAAK,KAAKX,QAASL,EAAezP,UAAWklB,EAApF,qBCCOoB,OA3Bf,WAA8B,IAAD,EACWN,GAAO9jB,eAAnCgkB,EADiB,EACjBA,UAAWC,EADM,EACNA,aAEnB,OACI,eAAC,KAAD,CAAa/J,EAAE,OAAO0E,YAAU,EAACrP,QAAQ,QAAzC,UACI,cAAC,KAAD,CACIhB,KAAK,KACL6B,aAAW,EACXxC,QAAS,kBAAMqW,EAAa/qB,EAAU6qB,MACtCzU,YAAa0U,IAAc9qB,EAAU6qB,IAAM,QAAU,OACrD/V,GAAG,MACHuB,QAAQ,QANZ,iBAUA,cAAC,KAAD,CACIhB,KAAK,KACL6B,aAAW,EACXxC,QAAS,kBAAMqW,EAAa/qB,EAAUirB,SACtC7U,YAAa0U,IAAc9qB,EAAUirB,OAAS,MAAQ,OAJ1D,wBCiFGE,OA3Ef,WAAwB,IAEPtd,EACT+J,GAAS9Q,eADT6K,MAAS9D,iBAELhF,EAAexC,GAASS,eAAxB+B,WAJW,EAKsB+hB,GAAO9jB,eAAxCyR,EALW,EAKXA,OAAQkP,EALG,EAKHA,UAAWqD,EALR,EAKQA,UACnBrL,EAAYF,GAAS1W,EAAaA,EAAWhB,SAAW,G3I3BjC,E2I2B0D7G,EAASQ,MAA1Fie,QANW,EAOW1c,mBAAiB,IAP5B,mBAOZqoB,EAPY,KAOHC,EAPG,KAQbC,EAAkB3J,GAAY,CAAEzR,MAAOkb,EAASxJ,MAAO,MAEvDW,EAAgBtS,uBAAY,SAAAhR,GAC9B,IAAMiR,EAAQjR,EAAE4X,OAAO3G,MACvB,GAAIA,GAAS,EAAG,CACZ,IAAMsS,EAAiB1X,GAAYoF,E3IhCjB,G2IiClBmb,EAAW7I,MAEhB,IAEGnO,EAAgBpE,uBAAY,WAE9B,IAAM8Q,EAAetB,EAAQrV,QAAQ,GACrCihB,EAAWtK,KACZ,CAACtB,IAeJ,OAbArc,qBAAU,WAEN,GAAwB,KAApBkoB,EAAJ,CAKA,IAAMC,EAAoB,IAAIlrB,IAAIirB,IAC9B,OAAC/S,QAAD,IAACA,OAAD,EAACA,EAAQwC,GAAGwQ,KACZ9D,EAAU8D,QANV9D,EAAU,QAQf,CAAC6D,EAAiB/S,EAAQkP,IAEtB1gB,mBACH,kBACI,eAAC,KAAD,CAAalI,GAAG,SAAhB,UACI,cAAC,GAAD,qBACA,cAAC,KAAD,CAAaqR,MAAOkb,EAAS1I,QAASH,EAAtC,SACI,eAAC,KAAD,WACI,cAAC,KAAD,IACA,cAAC,KAAD,CAAmBvB,EAAE,OAArB,SACI,cAAC,KAAD,CACIA,EAAE,OACF2B,UAAU,SACVrO,WAAW,OACXC,SAAS,KACTW,MAAM,WACNsC,cAAc,YANlB,SAQK3J,WAKhBid,IAAc9qB,EAAU6qB,KACrB,cAAC,KAAD,UACI,eAAC,KAAD,CAAQ7J,EAAE,OAAOxM,eAAe,gBAAgBK,WAAW,aAA3D,UACI,eAAC,KAAD,2BAAmBhK,GAAqB4U,MAExC,cAAC,KAAD,CAAQnG,aAAa,KAAKjE,KAAK,KAAKgB,QAAQ,UAAU3B,QAASL,EAA/D,2BAQpB,CAAC+W,EAAS3L,EAASpL,EAAekO,EAAeuI,EAAWjd,KCyCrD2d,OAtHf,WAAwB,IAAD,EAGf5T,GAAS9Q,eADT6K,MAASxL,EAFM,EAENA,QAAS0H,EAFH,EAEGA,iBAFH,EAIwBrL,EAAWsE,eAA9CnE,EAJW,EAIXA,QAASO,EAJE,EAIFA,sBACT2F,EAAexC,GAASS,eAAxB+B,WALW,EAM0C+hB,GAAO9jB,eAAjD2kB,EANA,EAMXX,UAAoCY,EANzB,EAMiBnT,OANjB,EAOiBxV,mBAA4B,MAP7C,mBAOZ4oB,EAPY,KAOAC,EAPA,KASbC,EAAgB5b,sBAAW,sBAAC,oCAAAjE,EAAA,2DAC1BrJ,GAAWkG,GAAc1C,GAAWjD,GADV,wBAGpB8W,EAA8B,IAAI1N,WACpCzD,EAAWxB,oBACX4S,GAA4B1M,KALN,SAOJrK,EAAsBS,IAAI,CAC5CqW,EAA4BO,sCAAsCpU,EAASxD,GAC3EqX,EAA4BgB,eAAe7U,EAASxD,KAT9B,OAOpBmpB,EAPoB,OAWpBvT,EAASjO,GAAYwhB,EAAQ,GAAGvT,QAChCE,EAAenO,GAAYwhB,EAAQ,GAAGrT,cACtCD,EAAclO,GAAYwhB,EAAQ,IAMxCF,EALoB,CAChBrT,SACAC,cACAC,iBAjBsB,wBAqB1BmT,EAAc,MArBY,4CAuB/B,CAACjpB,EAASwD,EAAS0C,EAAY3F,IAElCE,qBAAU,WACNyoB,MACD,CAACA,IAMJ3Q,GAAY2Q,EAAe,KAG3B,IAAM1S,EAAYpS,mBAAQ,WACtB,OAAqB,OAAjB2kB,GAAwC,OAAfC,GAAuBA,EAAWpT,OACvDkT,IAAoBzrB,EAAU6qB,IACvBhgB,GAAqB8gB,EAAWpT,OAAOiQ,IAAIkD,IAE3C7gB,GAAqB8gB,EAAWpT,OAAOoQ,IAAI+C,IAGnD,MACR,CAACA,EAAcD,EAAiBE,IAC7BvS,EAAiBrS,mBAAQ,WAC3B,GAAqB,OAAjB2kB,GAAwC,OAAfC,GAAuBA,EAAWnT,aAAemT,EAAWlT,aAAc,CAAC,IAC5FD,EAA8BmT,EAA9BnT,YAAaC,EAAiBkT,EAAjBlT,aACrB,OAAIA,EAAasC,GAAG,GACT,IAEP0Q,IAAoBzrB,EAAU6qB,IACvBrS,EAAYrO,IAAIsO,GAAc+P,IAAIkD,GAAc9hB,IAAI6O,GAActO,IAAI,KAAKC,QAAQ,GAEnFoO,EAAYrO,IAAIsO,GAAckQ,IAAI+C,GAAc9hB,IAAI6O,GAActO,IAAI,KAAKC,QAAQ,GAGlG,MAAO,MACR,CAACshB,EAAcD,EAAiBE,IAC7B1S,EAAclS,mBAAQ,WACxB,GAAqB,OAAjB2kB,GAAwC,OAAfC,GAAuBA,EAAWnT,aAAemT,EAAWlT,aAAc,CAAC,IAC5FD,EAA8BmT,EAA9BnT,YAAaC,EAAiBkT,EAAjBlT,aACrB,GAAIA,EAAasC,GAAG,GAChB,MAAO,IAEX,IAAIgR,EAAiB,KAMrB,OAJIA,EADAN,IAAoBzrB,EAAU6qB,IACbrS,EAAYrO,IAAIsO,GAAc+P,IAAIkD,GAAc9hB,IAAI6O,GAEpDD,EAAYrO,IAAIsO,GAAckQ,IAAI+C,GAAc9hB,IAAI6O,IAEtDsC,GAAG,GACX,IAEJ,IAAI1a,IAAI,GAAGuJ,IAAImiB,GAAgB3hB,QAAQ,GAElD,MAAO,MACR,CAACshB,EAAcD,EAAiBE,IAEnC,OACI,qCACI,cAAC,KAAD,CAAS3K,EAAE,OAAO3L,KAAK,KAAvB,8BAGA,cAAC,KAAD,CAAKT,MAAM,OAAOuU,YAAY,QAAQ5P,YAAY,MAAMC,YAAY,WAAWF,aAAa,OAA5F,SACI,cAAC,KAAD,CAAOjE,KAAK,KAAKiE,aAAa,OAAO0P,SAAS,SAAShI,EAAE,OAAO3K,QAAQ,SAAxE,SACI,eAAC,KAAD,WACI,eAAC,KAAD,WACI,cAAC,KAAD,qBACA,eAAC,KAAD,CAAI4S,WAAS,EAAb,UACK9P,EADL,IACiBtL,QAGrB,eAAC,KAAD,WACI,cAAC,KAAD,2BACA,eAAC,KAAD,CAAIob,WAAS,EAAb,UAAe7P,EAAf,WAEJ,eAAC,KAAD,WACI,cAAC,KAAD,uBACA,eAAC,KAAD,CAAI6P,WAAS,EAAb,UAAehQ,EAAf,sBCtEb+S,OAvCf,WAA8B,IAAD,EAIrBpU,GAAS9Q,eAFA6Q,EAFY,EAErBhG,MAASgG,wBACTQ,EAHqB,EAGrBA,uBAGJ,OAAOpR,mBACH,kBACI,cAAC6jB,GAAOqB,SAAR,UACI,eAAC,KAAD,CACI7W,YAAU,EACVuV,aAAa,gBACbrV,OAAQqC,EACRpC,QAAS4C,EAJb,UAMI,cAAC,KAAD,IACA,eAAC,KAAD,CAAcmB,aAAa,MAAM9D,GAAI,EAArC,UACI,cAAC,KAAD,4BACA,cAAC,KAAD,IACA,cAAC,KAAD,UACI,eAAC,KAAD,CAAQC,QAAS,EAAjB,UACI,cAAC,GAAD,IACA,cAAC,GAAD,IACA,cAAC,KAAD,IACA,cAAC,GAAD,IACA,cAAC,KAAD,SAGR,cAAC,KAAD,UACI,cAAC,GAAD,gBAMpB,CAAC0C,EAAwBR,KCjDzBuU,GAAkBxrB,EC8BXyrB,OA/Bf,WACI,IAAMC,EDEH,WAA+B,IAAD,EACarpB,oBAAS,GADtB,mBAC1BqpB,EAD0B,KACTC,EADS,OAEX/c,GAAgB4c,GAAcvrB,KAAMurB,GAActrB,cAAjE0rB,EAF0B,oBA4BjC,OAxBAlpB,qBAAU,WACN,GAAoB,SAAhBkpB,EAAwB,CAAC,IAAD,EAClBC,GAAc,UAAAtrB,sYAAYurB,gCAAZ,eAAsCzrB,MAAM,OAAQ,GACxE,GAA2B,IAAvBwrB,EAAY9gB,OACZ,OAEJ,IACI3G,MAAM,4CACDjB,MAAK,SAAAmB,GAAG,OAAIA,EAAIynB,UAChB5oB,MAAK,SAAA4oB,GACF,IAAMC,EAA8B,GACpCD,EAAK1rB,MAAM,MAAM4M,SAAQ,SAAAgf,GAAS,IAAD,EACRA,EAAK5rB,MAAM,KADH,mBACtBwO,EADsB,KACjBW,EADiB,KAE7Bwc,EAAInd,GAAOW,KAEf,IAAM0c,EAAYL,EAAYM,MAAK,SAAAltB,GAAQ,OAAIA,IAAa+sB,EAAII,OAChET,EAAmBO,MAE7B,MAAOhe,GACLS,GAAOhK,MAAMuJ,OAGtB,CAAC0d,EAAaD,IAEVD,EC9BiBW,GACxB,OACI,eAAC,KAAD,CACIC,eAAe,SACfC,YAAY,EACZC,qBAAqB,EACrB9X,YAAU,EACVE,OAAQ8W,EACR7W,QAAS,aANb,UAQI,cAAC,KAAD,IACA,eAAC,KAAD,WACI,cAAC,KAAD,mDACA,cAAC,KAAD,UACI,cAAC,KAAD,2MAKJ,eAAC,KAAD,CAAaf,eAAe,aAA5B,4CAEI,cAACkC,GAAD,CAAcxB,MAAM,WAAWyB,KAAK,gDAAgDK,YAAU,EAA9F,yC,UCVZmW,GAAkBzsB,EA4DX0sB,OA1Df,WAA+B,IAAD,EACErqB,oBAAS,GADX,mBACnBsqB,EADmB,KACXC,EADW,OAEYhe,GAAgB6d,GAAcxsB,KAAMwsB,GAAcvsB,cAF9D,mBAEnB2sB,EAFmB,KAENC,EAFM,KAIpBC,EAAgBxd,uBAAY,WAC9Bqd,GAAWD,KACZ,CAACA,IAEEhZ,EAAgBpE,uBAAY,WAC9Bud,EAAe,UAChB,CAACA,IAEJ,OACI,eAAC,KAAD,CACIR,eAAe,SACfC,YAAY,EACZC,qBAAqB,EACrB9X,YAAU,EACVE,OAAwB,UAAhBiY,EACRhY,QAAS,aANb,UAQI,cAAC,KAAD,IACA,eAAC,KAAD,WACI,cAAC,KAAD,mCACA,eAAC,KAAD,WACI,eAAC,KAAD,mJAGI,cAACmB,GAAD,CACIxB,MAAM,WACNyB,KAAK,2FACLK,YAAU,EAHd,0BAHJ,mBAYA,uBACA,eAAC,KAAD,sBACY,0CADZ,4CAGA,eAAC,KAAD,CAAU3B,KAAK,KAAKe,YAAY,QAAQ+M,SAAUsK,EAAlD,sCAEI,cAAC/W,GAAD,CAAcxB,MAAM,WAAWyB,KAAK,gDAAgDK,YAAU,EAA9F,4CAKR,cAAC,KAAD,UACI,cAAC,KAAD,CAAQZ,YAAY,OAAOtB,GAAI,EAAGJ,QAASL,EAAe8C,YAAakW,EAAvE,4BCxDPK,GAAM,kBACf,eAAC,KAAD,CAAWC,KAAK,eAAenY,GAAI,GAAIyN,GAAI,EAA3C,UACI,cAAC,GAAD,IACA,cAAC,KAAD,IACA,cAAC,KAAD,UACI,cAAC,KAAD,CAAO2K,KAAK,IAAZ,SACI,cAAC,GAAD,QAGR,cAAC,GAAD,IACA,cAAC,GAAD,IACA,cAAC,GAAD,IACA,cAAC,GAAD,IAEA,cAAC,GAAD,Q,mBCtBKC,GAAQ,kBACjB,cAAC,KAAD,CACIC,OAAM,8jB,8BCHP,SAASC,GAAWxR,GACvB,IAAM3Z,EAAU,IAAIorB,KAAazR,EAAU,OAE3C,OADA3Z,EAAQT,gBAAkB,KACnBS,ECKX,SAASqrB,GAAT,GAAwD,IAA5BrX,EAA2B,EAA3BA,SAQxB,OCkBG,WAAgD,IAAnBsX,EAAkB,0DACdC,cAA5BtrB,EAD0C,EAC1CA,OAAQwC,EADkC,EAClCA,MAAOwM,EAD2B,EAC3BA,SAEvBzO,qBAAU,WAAO,IACLgrB,EAAa1uB,OAAb0uB,SAER,GAAIA,GAAYA,EAAS/O,KAAOxc,IAAWwC,IAAU6oB,EAAU,CAC3D,IAAMG,EAAgB,WAClBhf,GAAOf,KAAK,eAGVggB,EAAqB,WACvBjf,GAAOf,KAAK,qBAGVigB,EAAwB,SAACC,GACvBA,EAAS/iB,OAAS,GAClB4D,GAAOf,KAAK,uBAQpB,OAJA8f,EAAS/O,GAAG,UAAWgP,GACvBD,EAAS/O,GAAG,eAAgBiP,GAC5BF,EAAS/O,GAAG,kBAAmBkP,GAExB,WACCH,EAASK,iBACTL,EAASK,eAAe,UAAWJ,GACnCD,EAASK,eAAe,eAAgBH,GACxCF,EAASK,eAAe,kBAAmBF,QAKxD,CAAC1rB,EAAQwC,EAAO6oB,EAAUrc,IDtD7B6c,GAEO,mCAAG9X,IEhBd,ICOK+X,GDKUC,GAZS,SAACC,GACjBA,GAAeA,aAAuBze,UACtC,8BAAqBvM,MAAK,YAAkD,IAA/CirB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACzDJ,EAAOD,GACPE,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAQL,Q,SCAfF,K,oBAAAA,E,SAAAA,Q,mBCDCzoB,GAAY,CACdxB,OCPW,CACXyqB,iBAAkB,OAClBC,oBAAoB,GDMpBC,OEVW,CACXC,IAAK,CACDC,IAAK,oBACLC,IAAK,oBACLC,IAAK,oBACLC,IAAK,oBACLC,IAAK,oBACLC,IAAK,oBACLC,IAAK,sBACLC,IAAK,sBACLC,IAAK,sBACLC,GAAI,uBAERC,KAAM,CACFV,IAAK,sBACLC,IAAK,qBACLC,IAAK,mBACLC,IAAK,mBACLC,IAAK,iBACLC,IAAK,sBACLC,IAAK,sBACLC,IAAK,sBACLC,IAAK,sBACLC,GAAI,uBAERE,MAAO,CACHX,IAAK,qBACLC,IAAK,oBACLC,IAAK,oBACLC,IAAK,mBACLC,IAAK,mBACLC,IAAK,qBACLC,IAAK,qBACLC,IAAK,sBACLC,IAAK,sBACLC,GAAI,uBAERG,KAAM,CACFZ,IAAK,qBACLC,IAAK,qBACLC,IAAK,qBACLC,IAAK,mBACLC,IAAK,mBACLC,IAAK,qBACLC,IAAK,qBACLC,IAAK,sBACLC,IAAK,sBACLC,GAAI,uBAERI,UAAW,CACPb,IAAK,oBACLC,IAAK,qBACLC,IAAK,qBACLC,IAAK,oBACLC,IAAK,mBACLC,IAAK,oBACLC,IAAK,qBACLC,IAAK,sBACLC,IAAK,sBACLC,GAAI,uBAERK,OAAQ,CACJd,IAAK,oBACLK,IAAK,qBACLC,IAAK,qBACLC,IAAK,sBACLC,IAAK,sBACLP,IAAK,oBACLC,IAAK,oBACLC,IAAK,mBACLC,IAAK,kBACLK,GAAI,uBAERM,KAAM,CACFC,KAAM,sBACN5H,IAAK,sBACL6H,OAAQ,sBACRC,SAAU,sBACVC,QAAS,wBFnEb5C,OGXW,CACX6C,OAAQ,SAAC9a,GAAD,MAAiB,CACrB,YAAa,CACT+a,GAAI,CACArc,SAAU,MACVsc,WAAY,UACZvc,WAAY,OACZsF,GAAI,EACJkX,cAAe,SAEnBC,GAAI,CACAxc,SAAU,MACVsc,WAAY,UACZvc,WAAY,OACZsF,GAAI,EACJkX,cAAe,SAEnBE,GAAI,CACAzc,SAAU,KACVsc,WAAY,UACZvc,WAAY,OACZsF,GAAI,EACJkX,cAAe,SAEnBG,GAAI,CACA1c,SAAU,KACVsc,WAAY,UACZvc,WAAY,OACZsF,GAAI,EACJkX,cAAe,SAEnBI,GAAI,CACA3c,SAAU,KACVsc,WAAY,UACZvc,WAAY,OACZsF,GAAI,EACJkX,cAAe,SAEnBrX,EAAG,CACClF,SAAU,KACV4c,WAAY,MACZvX,GAAI,GAER5N,EAAG,CACCkJ,MAA2B,SAApBW,EAAMub,UAAuB,WAAa,WACjDC,eAAgB,aAEpBlyB,KAAM,CACF0xB,WAAY,OACZtc,SAAU,KACVD,WAAY,OACZgd,QAAS,KAEbC,GAAI,CACAC,GAAI,QAER,SAAU,CACN/H,GAAI,OH7ChBgI,MIZU,CACVC,QAAS,wBACTC,WAAY,wBACZC,KAAM,wBACNC,KAAM,oBJSNvrB,WKbe,CACfwrB,OAAQ,CACJC,MAAO,CACHC,GAAI,CACA1Y,aAAc,MAElB2Y,GAAI,CACA3Y,aAAc,MAElB4Y,GAAI,CACA5Y,aAAc,OAElB6Y,GAAI,CACA7Y,aAAc,SAI1B8Y,QAAS,CACLL,MAAO,CACHC,GAAI,CACAnB,WAAY,aACZC,cAAe,SAEnBmB,GAAI,CACApB,WAAY,aACZC,cAAe,SAEnBoB,GAAI,CACArB,WAAY,aACZC,cAAe,WAEnBqB,GAAI,CACAtB,WAAY,aACZC,cAAe,cLnB3BuB,MMdU,CACVC,KAAM,MACNC,KAAM,MACNL,GAAI,MACJD,GAAI,MACJD,GAAI,MACJQ,GAAI,OACJ,MAAO,OACP,MAAO,OACPC,KAAM,WNQKC,gBAAYxsB,KlETpB,SAAeoD,GAClB,IAAM2E,EAAYD,KAClB,GAAKC,EAAL,CAEA,IAAM0kB,EAAW1xB,GACjBgN,EAAU2kB,KAAKD,IARfE,GyECA1kB,IAAQ0kB,MAAM,CACVC,OAAiD,SACjDC,QAAS,YACTC,WAAY/xB,sYAAYgyB,qBACxBC,aAAcjyB,UACdkyB,qBAAsB,CAACjzB,EAAMO,WAAYP,EAAMK,SAC/C6yB,QAAS,CAAC,IAAIC,OCsBtB,IAAMC,GDlBC,WACH,IAAMC,EAASplB,IAAQqlB,UAAU,SACjC,OAAKD,EAGEA,EAAOE,oBAAoBC,KAFvB,gBAAG9c,EAAH,EAAGA,SAAH,OAAiD,mCAAGA,KCe7C6c,GAEhBE,GAAa,sCAAIxvB,EAAJ,yBAAIA,EAAJ,uBAAyB,YAAkD,IAA/CyS,EAA8C,EAA9CA,SAC3C,OAAOzS,EAAUyvB,aAAY,SAACzvB,EAAWoY,GACrC,IAAM0P,EAAW1P,EAASsX,WAAatX,EACjC1G,EAAQ0G,EAAS1G,OAAS,GAChC,OAAO,cAACoW,EAAD,2BAAcpW,GAAd,aAAsB1R,OAC9ByS,IALY,CAOfpS,GAASynB,SACT,CAAE4H,UAAWC,KAAgBje,MAAO,CAAEuT,YZvBnC,YAAoD,IAA5BxS,EAA2B,EAA3BA,SAC3B,OACI,cAAC,IAAD,CAAmBmX,WAAYA,GAA/B,SACI,cAACE,GAAD,UAAmBrX,QYsB3Bmd,KACAjgB,GAAOmY,SACPza,GAAKya,SACLzpB,EAAWypB,SACXpQ,GAAYoQ,SACZ5lB,GAAS4lB,SACTtgB,GAAIsgB,SACJ3kB,GAAc2kB,SACd/K,GAAM+K,SACNrU,GAASqU,UAGb+H,KAASC,OACL,cAAC,aAAD,UACI,cAACX,GAAD,UACI,eAACK,GAAD,WACI,cAAC,GAAD,IACA,cAAC,GAAD,WAIZO,SAASC,eAAe,SpK8DpB,kBAAmBC,WACnBA,UAAUC,cAAcC,MACnBzwB,MAAK,SAAA0wB,GACFA,EAAaC,gBAEhBrvB,OAAM,SAAAE,GACHD,QAAQC,MAAMA,EAAMqJ,YoKrDpCkgB,O","file":"static/js/main.95d2ea4c.chunk.js","sourcesContent":["var map = {\n\t\"./metamask.svg\": 266,\n\t\"./walletconnect.svg\": 267\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 265;","export default __webpack_public_path__ + \"static/media/metamask.ca26c15e.svg\";","export default __webpack_public_path__ + \"static/media/walletconnect.6bb5fb5c.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n)\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void\n    onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://cra.link/PWA\",\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See https://cra.link/PWA.\",\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It is the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\")\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch(error => {\n            console.error(\"Error during service worker registration:\", error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { \"Service-Worker\": \"script\" },\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\")\n            if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log(\"No internet connection found. App is running in offline mode.\")\n        })\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister()\n            })\n            .catch(error => {\n                console.error(error.message)\n            })\n    }\n}\n","import Big from \"big.js\"\n\nexport interface Amm {\n    address: string\n    baseAssetSymbol: string\n    quoteAssetSymbol: string\n    tradeLimitRatio: Big\n    tollRatio: Big\n    spreadRatio: Big\n}\n\nexport enum Dir {\n    AddToAmm = 0,\n    RemoveFromAmm = 1,\n}\n","import Big from \"big.js\"\nimport { Amm } from \"./amm\"\n\nexport interface PositionInfo extends Amm {\n    unrealizedPnl: Big\n    size: Big\n    margin: Big\n    openNotional: Big\n    marginRatio: Big\n}\n\nexport enum Side {\n    Long = 1,\n    Short = 0,\n}\n\nexport enum MarginDir {\n    Add,\n    Reduce,\n}\n\nexport enum PnlCalcOption {\n    SpotPrice,\n    Twap,\n}\n","export enum Stage {\n    Production = \"production\",\n    Staging = \"staging\",\n    Development = \"development\",\n}\n\nexport const STAGE = getStage()\n\nexport function getStage(): Stage {\n    if (process.env.REACT_APP_STAGE === \"production\") {\n        return Stage.Production\n    } else if (process.env.REACT_APP_STAGE === \"staging\") {\n        return Stage.Staging\n    } else {\n        // we connect to staging environment by default\n        return Stage.Staging\n    }\n}\n\nexport const IS_MAINNET = getStage() === Stage.Production\n","import { Big } from \"big.js\"\nimport { BigNumber } from \"ethers\"\n\nexport const ERC20_DECIMAL_DIGITS = 18\nexport const USDC_DECIMAL_DIGITS = 6\n\nexport const USDC_PRECISION = 2\n\nexport const BIG_ZERO = new Big(0)\n\nexport interface Decimal {\n    d: BigNumber\n}\n","export interface StorageDetail {\n    name: string\n    defaultValue: string\n}\n\nexport interface StorageKey {\n    [key: string]: StorageDetail\n}\n\nexport const STORAGE_KEY: StorageKey = {\n    ACCOUNT: {\n        name: \"account\",\n        defaultValue: \"\",\n    },\n    CONNECTOR_ID: {\n        name: \"connector-id\",\n        defaultValue: \"\",\n    },\n    IS_DEBUG_MODE: {\n        name: \"is-debug-mode\",\n        defaultValue: \"false\",\n    },\n    IS_TOS_AGREED: {\n        name: \"is-tos-agreed\",\n        defaultValue: \"false\",\n    },\n    LATEST_TX_DATA: {\n        name: \"latest-tx-data\",\n        defaultValue: \"\",\n    },\n}\n","export function isEmpty(obj: Object) {\n    return Object.keys(obj).length === 0\n}\n\nexport function isWebsocket(url: string) {\n    const protocol = url.split(\":\")[0]\n    return protocol === \"wss\"\n}\n","import { Web3Provider } from \"@ethersproject/providers\"\nimport { IS_MAINNET } from \"../constant/stage\"\nimport { InjectedConnector } from \"@web3-react/injected-connector\"\nimport { NetworkConnector } from \"@web3-react/network-connector\"\nimport { providers } from \"ethers\"\nimport { isWebsocket } from \"util/is\"\nimport { WalletConnectConnector } from \"@web3-react/walletconnect-connector\"\n// import { WalletLinkConnector } from '@web3-react/walletlink-connector'\n// import { LedgerConnector } from '@web3-react/ledger-connector'\n// import { TrezorConnector } from '@web3-react/trezor-connector'\n// import { LatticeConnector } from '@web3-react/lattice-connector'\n// import { FrameConnector } from '@web3-react/frame-connector'\n// import { AuthereumConnector } from '@web3-react/authereum-connector'\n// import { FortmaticConnector } from '@web3-react/fortmatic-connector'\n// import { MagicConnector } from '@web3-react/magic-connector'\n// import { PortisConnector } from '@web3-react/portis-connector'\n// import { TorusConnector } from '@web3-react/torus-connector'\n\nexport enum CHAIN_ID {\n    Ethereum = 1,\n    Rinkeby = 4,\n    XDai = 100,\n}\n\nconst { REACT_APP_MAINNET_RPC_URL, REACT_APP_RINKEBY_RPC_URL, REACT_APP_XDAI_RPC_URL } = process.env\n\nconst RPC_URLS = {\n    [CHAIN_ID.Ethereum]: REACT_APP_MAINNET_RPC_URL!,\n    [CHAIN_ID.Rinkeby]: REACT_APP_RINKEBY_RPC_URL!,\n    [CHAIN_ID.XDai]: REACT_APP_XDAI_RPC_URL!,\n}\n\nexport const network = new NetworkConnector({\n    urls: RPC_URLS,\n    defaultChainId: IS_MAINNET ? CHAIN_ID.Ethereum : CHAIN_ID.Rinkeby,\n})\n\nexport function getNetworkLibrary(): Web3Provider {\n    const chainId = IS_MAINNET ? CHAIN_ID.Ethereum : CHAIN_ID.Rinkeby\n    const rpcUrl = RPC_URLS[chainId]!\n    if (isWebsocket(rpcUrl)) {\n        return (new providers.WebSocketProvider(rpcUrl, chainId) as unknown) as Web3Provider\n    } else {\n        return (new providers.JsonRpcProvider(rpcUrl, chainId) as unknown) as Web3Provider\n    }\n}\n\nexport function getXDaiNetworkLibrary(): Web3Provider {\n    const rpcUrl = RPC_URLS[CHAIN_ID.XDai]\n    if (isWebsocket(rpcUrl)) {\n        return (new providers.WebSocketProvider(rpcUrl, CHAIN_ID.XDai) as unknown) as Web3Provider\n    } else {\n        return (new providers.JsonRpcProvider(rpcUrl, CHAIN_ID.XDai) as unknown) as Web3Provider\n    }\n}\n\n// see all chain ids in https://chainid.network/\nexport const injected = new InjectedConnector({\n    supportedChainIds: [CHAIN_ID.Ethereum, CHAIN_ID.Rinkeby, CHAIN_ID.XDai],\n})\n\nexport const walletConnect = new WalletConnectConnector({\n    rpc: IS_MAINNET\n        ? {\n              [CHAIN_ID.Ethereum]: RPC_URLS[CHAIN_ID.Ethereum],\n          }\n        : { [CHAIN_ID.Rinkeby]: RPC_URLS[CHAIN_ID.Rinkeby] },\n    pollingInterval: 15000,\n})\n\nexport class LedgerProvider {}\n","export enum Network {\n    Ethereum = \"eth\",\n    Xdai = \"xdai\",\n}\n","import { AbstractConnector } from \"@web3-react/abstract-connector\"\nimport { injected, walletConnect } from \"../connector\"\n\nexport interface WalletInfo {\n    id: string\n    connector: AbstractConnector\n    name: string\n    iconName: string\n    description: string\n}\n\nconst METAMASK = {\n    connector: injected,\n    id: \"metamask\",\n    name: \"Metamask\",\n    iconName: \"metamask.svg\",\n    description: \"Easy-to-use browser extension.\",\n}\n\nconst WALLET_CONNECT = {\n    connector: walletConnect,\n    id: \"walletconnect\",\n    name: \"Wallet Connect\",\n    iconName: \"walletconnect.svg\",\n    description: \"universal integration via qr code\",\n}\n\nexport const SUPPORTED_WALLETS: WalletInfo[] = [METAMASK, WALLET_CONNECT]\n","import { useState, useEffect } from \"react\"\nimport { createContainer } from \"unstated-next\"\nimport { useWeb3React } from \"@web3-react/core\"\nimport { Provider as MulticallProvider } from \"ethers-multicall\"\nimport { getNetworkLibrary, getXDaiNetworkLibrary } from \"connector\"\n\nexport const Connection = createContainer(useConnection)\n\nconst ethReadOnlyProvider = getNetworkLibrary()\nconst xDaiReadOnlyProvider = getXDaiNetworkLibrary()\n\nfunction useConnection() {\n    const { account, library, active, chainId } = useWeb3React()\n    const [ethMulticallProvider, setMulticallProvider] = useState<MulticallProvider | null>(null)\n    const [xDaiMulticallProvider, setXDaiMulticallProvider] = useState<MulticallProvider | null>(null)\n\n    // create read only multicall provider\n    useEffect(() => {\n        const _ethMulticallProvider = new MulticallProvider(ethReadOnlyProvider)\n        const _xDaiMulticallProvider = new MulticallProvider(xDaiReadOnlyProvider)\n\n        Promise.all([_ethMulticallProvider.init(), _xDaiMulticallProvider.init()]).then(() => {\n            setMulticallProvider(_ethMulticallProvider)\n            setXDaiMulticallProvider(_xDaiMulticallProvider)\n        })\n    }, [])\n\n    return {\n        ethMulticallProvider,\n        xDaiMulticallProvider,\n        ethProvider: ethReadOnlyProvider,\n        xDaiProvider: xDaiReadOnlyProvider,\n        signer: library?.getSigner() || null,\n        active,\n        account: account || null,\n        chainId,\n    }\n}\n","import { IS_MAINNET } from \"constant\"\nimport { useEffect, useState } from \"react\"\nimport { createContainer } from \"unstated-next\"\n\nexport const MetaData = createContainer(useMetaData)\n\nconst configUrl = `https://metadata.perp.exchange/${IS_MAINNET ? \"production\" : \"staging\"}.json`\n\nfunction useMetaData() {\n    const [config, setConfig] = useState(undefined)\n    const [isLoading, setIsLoading] = useState(false)\n    useEffect(() => {\n        setIsLoading(true)\n        fetch(configUrl)\n            .then(res => res.json())\n            .then(data => setConfig(data))\n            .catch(e => {\n                console.error(e)\n            })\n            .finally(() => {\n                setIsLoading(false)\n            })\n    }, [])\n\n    return {\n        isLoading,\n        config,\n    }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Signer, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { ERC20PresetMinterPauserUpgradeSafe } from \"../ERC20PresetMinterPauserUpgradeSafe\";\n\nexport class ERC20PresetMinterPauserUpgradeSafe__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<ERC20PresetMinterPauserUpgradeSafe> {\n    return super.deploy(\n      overrides || {}\n    ) as Promise<ERC20PresetMinterPauserUpgradeSafe>;\n  }\n  getDeployTransaction(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  attach(address: string): ERC20PresetMinterPauserUpgradeSafe {\n    return super.attach(address) as ERC20PresetMinterPauserUpgradeSafe;\n  }\n  connect(signer: Signer): ERC20PresetMinterPauserUpgradeSafe__factory {\n    return super.connect(signer) as ERC20PresetMinterPauserUpgradeSafe__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): ERC20PresetMinterPauserUpgradeSafe {\n    return new Contract(\n      address,\n      _abi,\n      signerOrProvider\n    ) as ERC20PresetMinterPauserUpgradeSafe;\n  }\n}\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"Paused\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n    ],\n    name: \"RoleGranted\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n    ],\n    name: \"RoleRevoked\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"Unpaused\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"DEFAULT_ADMIN_ROLE\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"MINTER_ROLE\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"PAUSER_ROLE\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"burn\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"burnFrom\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        internalType: \"uint8\",\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"subtractedValue\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"decreaseAllowance\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"getRoleAdmin\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"index\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getRoleMember\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"getRoleMemberCount\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"grantRole\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"hasRole\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"addedValue\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"increaseAllowance\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"string\",\n        name: \"name\",\n        type: \"string\",\n      },\n      {\n        internalType: \"string\",\n        name: \"symbol\",\n        type: \"string\",\n      },\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"mint\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"pause\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"paused\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"renounceRole\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"revokeRole\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"unpause\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x608060405234801561001057600080fd5b50611f0a806100206000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c806370a08231116100f9578063a457c2d711610097578063d539139311610071578063d539139314610667578063d547741f1461066f578063dd62ed3e1461069b578063e63ab1e9146106c9576101c4565b8063a457c2d7146105f2578063a9059cbb1461061e578063ca15c8731461064a576101c4565b80639010d07c116100d35780639010d07c1461057757806391d14854146105b657806395d89b41146105e2578063a217fddf146105ea576101c4565b806370a082311461051d57806379cc6790146105435780638456cb591461056f576101c4565b806336568abe1161016657806340c10f191161014057806340c10f191461039f57806342966c68146103cb5780634cd88b76146103e85780635c975abb14610515576101c4565b806336568abe1461033f578063395093511461036b5780633f4ba83a14610397576101c4565b806323b872dd116101a257806323b872dd146102a0578063248a9ca3146102d65780632f2ff15d146102f3578063313ce56714610321576101c4565b806306fdde03146101c9578063095ea7b31461024657806318160ddd14610286575b600080fd5b6101d16106d1565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561020b5781810151838201526020016101f3565b50505050905090810190601f1680156102385780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102726004803603604081101561025c57600080fd5b506001600160a01b038135169060200135610768565b604080519115158252519081900360200190f35b61028e610786565b60408051918252519081900360200190f35b610272600480360360608110156102b657600080fd5b506001600160a01b0381358116916020810135909116906040013561078c565b61028e600480360360208110156102ec57600080fd5b5035610819565b61031f6004803603604081101561030957600080fd5b50803590602001356001600160a01b031661082e565b005b61032961089a565b6040805160ff9092168252519081900360200190f35b61031f6004803603604081101561035557600080fd5b50803590602001356001600160a01b03166108a3565b6102726004803603604081101561038157600080fd5b506001600160a01b038135169060200135610904565b61031f610958565b61031f600480360360408110156103b557600080fd5b506001600160a01b0381351690602001356109c9565b61031f600480360360208110156103e157600080fd5b5035610a3a565b61031f600480360360408110156103fe57600080fd5b81019060208101813564010000000081111561041957600080fd5b82018360208201111561042b57600080fd5b8035906020019184600183028401116401000000008311171561044d57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092959493602081019350359150506401000000008111156104a057600080fd5b8201836020820111156104b257600080fd5b803590602001918460018302840111640100000000831117156104d457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610a4e945050505050565b610272610a58565b61028e6004803603602081101561053357600080fd5b50356001600160a01b0316610a61565b61031f6004803603604081101561055957600080fd5b506001600160a01b038135169060200135610a7c565b61031f610adc565b61059a6004803603604081101561058d57600080fd5b5080359060200135610b4b565b604080516001600160a01b039092168252519081900360200190f35b610272600480360360408110156105cc57600080fd5b50803590602001356001600160a01b0316610b70565b6101d1610b8e565b61028e610bef565b6102726004803603604081101561060857600080fd5b506001600160a01b038135169060200135610bf4565b6102726004803603604081101561063457600080fd5b506001600160a01b038135169060200135610c62565b61028e6004803603602081101561066057600080fd5b5035610c76565b61028e610c8d565b61031f6004803603604081101561068557600080fd5b50803590602001356001600160a01b0316610cb0565b61028e600480360360408110156106b157600080fd5b506001600160a01b0381358116916020013516610d09565b61028e610d34565b609a8054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561075d5780601f106107325761010080835404028352916020019161075d565b820191906000526020600020905b81548152906001019060200180831161074057829003601f168201915b505050505090505b90565b600061077c610775610d57565b8484610d5b565b5060015b92915050565b60995490565b6000610799848484610e47565b61080f846107a5610d57565b61080a85604051806060016040528060288152602001611d06602891396001600160a01b038a166000908152609860205260408120906107e3610d57565b6001600160a01b03168152602081019190915260400160002054919063ffffffff610fb016565b610d5b565b5060019392505050565b60009081526065602052604090206002015490565b6000828152606560205260409020600201546108519061084c610d57565b610b70565b61088c5760405162461bcd60e51b815260040180806020018281038252602f815260200180611c04602f913960400191505060405180910390fd5b6108968282611047565b5050565b609c5460ff1690565b6108ab610d57565b6001600160a01b0316816001600160a01b0316146108fa5760405162461bcd60e51b815260040180806020018281038252602f815260200180611e7c602f913960400191505060405180910390fd5b61089682826110b6565b600061077c610911610d57565b8461080a8560986000610922610d57565b6001600160a01b03908116825260208083019390935260409182016000908120918c16815292529020549063ffffffff61112516565b604080516a5041555345525f524f4c4560a81b8152905190819003600b0190206109849061084c610d57565b6109bf5760405162461bcd60e51b8152600401808060200182810382526039815260200180611c556039913960400191505060405180910390fd5b6109c761117f565b565b604080516a4d494e5445525f524f4c4560a81b8152905190819003600b0190206109f59061084c610d57565b610a305760405162461bcd60e51b8152600401808060200182810382526036815260200180611d2e6036913960400191505060405180910390fd5b610896828261121d565b610a4b610a45610d57565b8261131b565b50565b6108968282611423565b60fb5460ff1690565b6001600160a01b031660009081526097602052604090205490565b6000610ab982604051806060016040528060248152602001611d9260249139610aac86610aa7610d57565b610d09565b919063ffffffff610fb016565b9050610acd83610ac7610d57565b83610d5b565b610ad7838361131b565b505050565b604080516a5041555345525f524f4c4560a81b8152905190819003600b019020610b089061084c610d57565b610b435760405162461bcd60e51b8152600401808060200182810382526037815260200180611e206037913960400191505060405180910390fd5b6109c7611502565b6000828152606560205260408120610b69908363ffffffff61158316565b9392505050565b6000828152606560205260408120610b69908363ffffffff61158f16565b609b8054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561075d5780601f106107325761010080835404028352916020019161075d565b600081565b600061077c610c01610d57565b8461080a85604051806060016040528060258152602001611e576025913960986000610c2b610d57565b6001600160a01b03908116825260208083019390935260409182016000908120918d1681529252902054919063ffffffff610fb016565b600061077c610c6f610d57565b8484610e47565b6000818152606560205260408120610780906115a4565b604080516a4d494e5445525f524f4c4560a81b8152905190819003600b01902081565b600082815260656020526040902060020154610cce9061084c610d57565b6108fa5760405162461bcd60e51b8152600401808060200182810382526030815260200180611cd66030913960400191505060405180910390fd5b6001600160a01b03918216600090815260986020908152604080832093909416825291909152205490565b604080516a5041555345525f524f4c4560a81b8152905190819003600b01902081565b3390565b6001600160a01b038316610da05760405162461bcd60e51b8152600401808060200182810382526024815260200180611dfc6024913960400191505060405180910390fd5b6001600160a01b038216610de55760405162461bcd60e51b8152600401808060200182810382526022815260200180611c8e6022913960400191505060405180910390fd5b6001600160a01b03808416600081815260986020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b038316610e8c5760405162461bcd60e51b8152600401808060200182810382526025815260200180611dd76025913960400191505060405180910390fd5b6001600160a01b038216610ed15760405162461bcd60e51b8152600401808060200182810382526023815260200180611be16023913960400191505060405180910390fd5b610edc8383836115af565b610f1f81604051806060016040528060268152602001611cb0602691396001600160a01b038616600090815260976020526040902054919063ffffffff610fb016565b6001600160a01b038085166000908152609760205260408082209390935590841681522054610f54908263ffffffff61112516565b6001600160a01b0380841660008181526097602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000818484111561103f5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611004578181015183820152602001610fec565b50505050905090810190601f1680156110315780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6000828152606560205260409020611065908263ffffffff6115ba16565b1561089657611072610d57565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526065602052604090206110d4908263ffffffff6115cf16565b15610896576110e1610d57565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b600082820183811015610b69576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b60fb5460ff166111cd576040805162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015290519081900360640190fd5b60fb805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611200610d57565b604080516001600160a01b039092168252519081900360200190a1565b6001600160a01b038216611278576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b611284600083836115af565b609954611297908263ffffffff61112516565b6099556001600160a01b0382166000908152609760205260409020546112c3908263ffffffff61112516565b6001600160a01b03831660008181526097602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6001600160a01b0382166113605760405162461bcd60e51b8152600401808060200182810382526021815260200180611db66021913960400191505060405180910390fd5b61136c826000836115af565b6113af81604051806060016040528060228152602001611c33602291396001600160a01b038516600090815260976020526040902054919063ffffffff610fb016565b6001600160a01b0383166000908152609760205260409020556099546113db908263ffffffff6115e416565b6099556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b600054610100900460ff168061143c575061143c611626565b8061144a575060005460ff16155b6114855760405162461bcd60e51b815260040180806020018281038252602e815260200180611d64602e913960400191505060405180910390fd5b600054610100900460ff161580156114b0576000805460ff1961ff0019909116610100171660011790555b6114b861162c565b6114c061162c565b6114ca83836116cd565b6114d261162c565b6114da6117a5565b6114e261162c565b6114ec8383611850565b8015610ad7576000805461ff0019169055505050565b60fb5460ff161561154d576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b60fb805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611200610d57565b6000610b698383611947565b6000610b69836001600160a01b0384166119ab565b6000610780826119c3565b610ad78383836119c7565b6000610b69836001600160a01b038416611a16565b6000610b69836001600160a01b038416611a60565b6000610b6983836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610fb0565b303b1590565b600054610100900460ff16806116455750611645611626565b80611653575060005460ff16155b61168e5760405162461bcd60e51b815260040180806020018281038252602e815260200180611d64602e913960400191505060405180910390fd5b600054610100900460ff161580156116b9576000805460ff1961ff0019909116610100171660011790555b8015610a4b576000805461ff001916905550565b600054610100900460ff16806116e657506116e6611626565b806116f4575060005460ff16155b61172f5760405162461bcd60e51b815260040180806020018281038252602e815260200180611d64602e913960400191505060405180910390fd5b600054610100900460ff1615801561175a576000805460ff1961ff0019909116610100171660011790555b825161176d90609a906020860190611b26565b50815161178190609b906020850190611b26565b50609c805460ff191660121790558015610ad7576000805461ff0019169055505050565b600054610100900460ff16806117be57506117be611626565b806117cc575060005460ff16155b6118075760405162461bcd60e51b815260040180806020018281038252602e815260200180611d64602e913960400191505060405180910390fd5b600054610100900460ff16158015611832576000805460ff1961ff0019909116610100171660011790555b60fb805460ff191690558015610a4b576000805461ff001916905550565b600054610100900460ff16806118695750611869611626565b80611877575060005460ff16155b6118b25760405162461bcd60e51b815260040180806020018281038252602e815260200180611d64602e913960400191505060405180910390fd5b600054610100900460ff161580156118dd576000805460ff1961ff0019909116610100171660011790555b6118ef60006118ea610d57565b61088c565b604080516a4d494e5445525f524f4c4560a81b8152905190819003600b01902061191b906118ea610d57565b604080516a5041555345525f524f4c4560a81b8152905190819003600b0190206114ec906118ea610d57565b815460009082106119895760405162461bcd60e51b8152600401808060200182810382526022815260200180611bbf6022913960400191505060405180910390fd5b82600001828154811061199857fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b5490565b6119d2838383610ad7565b6119da610a58565b15610ad75760405162461bcd60e51b815260040180806020018281038252602a815260200180611eab602a913960400191505060405180910390fd5b6000611a2283836119ab565b611a5857508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610780565b506000610780565b60008181526001830160205260408120548015611b1c5783546000198083019190810190600090879083908110611a9357fe5b9060005260206000200154905080876000018481548110611ab057fe5b600091825260208083209091019290925582815260018981019092526040902090840190558654879080611ae057fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610780565b6000915050610780565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611b6757805160ff1916838001178555611b94565b82800160010185558215611b94579182015b82811115611b94578251825591602001919060010190611b79565b50611ba0929150611ba4565b5090565b61076591905b80821115611ba05760008155600101611baa56fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e647345524332303a207472616e7366657220746f20746865207a65726f2061646472657373416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e7445524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332305072657365744d696e7465725061757365723a206d75737420686176652070617573657220726f6c6520746f20756e706175736545524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f207265766f6b6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332305072657365744d696e7465725061757365723a206d7573742068617665206d696e74657220726f6c6520746f206d696e74436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a656445524332303a206275726e20616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332305072657365744d696e7465725061757365723a206d75737420686176652070617573657220726f6c6520746f20706175736545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c6645524332305061757361626c653a20746f6b656e207472616e73666572207768696c6520706175736564a26469706673582212206628cc9232cf1a5f43d289fbcc6f4b3c611f0a422a5d67b32c0623ef0c84093764736f6c63430006090033\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Signer, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { ERC20UpgradeSafe } from \"../ERC20UpgradeSafe\";\n\nexport class ERC20UpgradeSafe__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<ERC20UpgradeSafe> {\n    return super.deploy(overrides || {}) as Promise<ERC20UpgradeSafe>;\n  }\n  getDeployTransaction(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  attach(address: string): ERC20UpgradeSafe {\n    return super.attach(address) as ERC20UpgradeSafe;\n  }\n  connect(signer: Signer): ERC20UpgradeSafe__factory {\n    return super.connect(signer) as ERC20UpgradeSafe__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): ERC20UpgradeSafe {\n    return new Contract(address, _abi, signerOrProvider) as ERC20UpgradeSafe;\n  }\n}\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        internalType: \"uint8\",\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"subtractedValue\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"decreaseAllowance\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"addedValue\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"increaseAllowance\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x608060405234801561001057600080fd5b50610a12806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063395093511161007157806339509351146101d957806370a082311461020557806395d89b411461022b578063a457c2d714610233578063a9059cbb1461025f578063dd62ed3e1461028b576100a9565b806306fdde03146100ae578063095ea7b31461012b57806318160ddd1461016b57806323b872dd14610185578063313ce567146101bb575b600080fd5b6100b66102b9565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100f05781810151838201526020016100d8565b50505050905090810190601f16801561011d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101576004803603604081101561014157600080fd5b506001600160a01b03813516906020013561034f565b604080519115158252519081900360200190f35b61017361036c565b60408051918252519081900360200190f35b6101576004803603606081101561019b57600080fd5b506001600160a01b03813581169160208101359091169060400135610372565b6101c36103ff565b6040805160ff9092168252519081900360200190f35b610157600480360360408110156101ef57600080fd5b506001600160a01b038135169060200135610408565b6101736004803603602081101561021b57600080fd5b50356001600160a01b031661045c565b6100b6610477565b6101576004803603604081101561024957600080fd5b506001600160a01b0381351690602001356104d8565b6101576004803603604081101561027557600080fd5b506001600160a01b038135169060200135610546565b610173600480360360408110156102a157600080fd5b506001600160a01b038135811691602001351661055a565b60688054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103455780601f1061031a57610100808354040283529160200191610345565b820191906000526020600020905b81548152906001019060200180831161032857829003601f168201915b5050505050905090565b600061036361035c610585565b8484610589565b50600192915050565b60675490565b600061037f848484610675565b6103f58461038b610585565b6103f085604051806060016040528060288152602001610947602891396001600160a01b038a166000908152606660205260408120906103c9610585565b6001600160a01b03168152602081019190915260400160002054919063ffffffff6107de16565b610589565b5060019392505050565b606a5460ff1690565b6000610363610415610585565b846103f08560666000610426610585565b6001600160a01b03908116825260208083019390935260409182016000908120918c16815292529020549063ffffffff61087516565b6001600160a01b031660009081526065602052604090205490565b60698054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103455780601f1061031a57610100808354040283529160200191610345565b60006103636104e5610585565b846103f0856040518060600160405280602581526020016109b8602591396066600061050f610585565b6001600160a01b03908116825260208083019390935260409182016000908120918d1681529252902054919063ffffffff6107de16565b6000610363610553610585565b8484610675565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205490565b3390565b6001600160a01b0383166105ce5760405162461bcd60e51b81526004018080602001828103825260248152602001806109946024913960400191505060405180910390fd5b6001600160a01b0382166106135760405162461bcd60e51b81526004018080602001828103825260228152602001806108ff6022913960400191505060405180910390fd5b6001600160a01b03808416600081815260666020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0383166106ba5760405162461bcd60e51b815260040180806020018281038252602581526020018061096f6025913960400191505060405180910390fd5b6001600160a01b0382166106ff5760405162461bcd60e51b81526004018080602001828103825260238152602001806108dc6023913960400191505060405180910390fd5b61070a8383836108d6565b61074d81604051806060016040528060268152602001610921602691396001600160a01b038616600090815260656020526040902054919063ffffffff6107de16565b6001600160a01b038085166000908152606560205260408082209390935590841681522054610782908263ffffffff61087516565b6001600160a01b0380841660008181526065602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000818484111561086d5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561083257818101518382015260200161081a565b50505050905090810190601f16801561085f5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6000828201838110156108cf576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b50505056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220447a343fc55072ae1d820a2be2d283ed08a2ea09fd2cedf98ed16a007b389a9364736f6c63430006090033\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Signer, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { PausableUpgradeSafe } from \"../PausableUpgradeSafe\";\n\nexport class PausableUpgradeSafe__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<PausableUpgradeSafe> {\n    return super.deploy(overrides || {}) as Promise<PausableUpgradeSafe>;\n  }\n  getDeployTransaction(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  attach(address: string): PausableUpgradeSafe {\n    return super.attach(address) as PausableUpgradeSafe;\n  }\n  connect(signer: Signer): PausableUpgradeSafe__factory {\n    return super.connect(signer) as PausableUpgradeSafe__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): PausableUpgradeSafe {\n    return new Contract(address, _abi, signerOrProvider) as PausableUpgradeSafe;\n  }\n}\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"Paused\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"Unpaused\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"paused\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x6080604052348015600f57600080fd5b5060868061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80635c975abb14602d575b600080fd5b60336047565b604080519115158252519081900360200190f35b60655460ff169056fea26469706673582212204192b63955e65e5146127c52b7b8af288c480c88e22e356502dd2d442085f6ad64736f6c63430006090033\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Signer, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { Amm } from \"../Amm\";\n\nexport class Amm__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<Amm> {\n    return super.deploy(overrides || {}) as Promise<Amm>;\n  }\n  getDeployTransaction(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  attach(address: string): Amm {\n    return super.attach(address) as Amm;\n  }\n  connect(signer: Signer): Amm__factory {\n    return super.connect(signer) as Amm__factory;\n  }\n  static connect(address: string, signerOrProvider: Signer | Provider): Amm {\n    return new Contract(address, _abi, signerOrProvider) as Amm;\n  }\n}\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"maxHoldingBaseAsset\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"openInterestNotionalCap\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"CapChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"int256\",\n        name: \"rate\",\n        type: \"int256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"underlyingPrice\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"FundingRateUpdated\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"quoteReserve\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"baseReserve\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"int256\",\n        name: \"cumulativeNotional\",\n        type: \"int256\",\n      },\n    ],\n    name: \"LiquidityChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"quoteAssetReserve\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"baseAssetReserve\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"timestamp\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"ReserveSnapshotted\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"settlementPrice\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Shutdown\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"enum IAmm.Dir\",\n        name: \"dir\",\n        type: \"uint8\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"quoteAssetAmount\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"baseAssetAmount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"SwapInput\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"enum IAmm.Dir\",\n        name: \"dir\",\n        type: \"uint8\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"quoteAssetAmount\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"baseAssetAmount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"SwapOutput\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"baseAssetReserve\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"d\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"int256\",\n            name: \"d\",\n            type: \"int256\",\n          },\n        ],\n        internalType: \"struct SignedDecimal.signedDecimal\",\n        name: \"_baseAssetAmount\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_fromQuoteReserve\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_fromBaseReserve\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"calcBaseAssetAfterLiquidityMigration\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"int256\",\n            name: \"d\",\n            type: \"int256\",\n          },\n        ],\n        internalType: \"struct SignedDecimal.signedDecimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_quoteAssetAmount\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"calcFee\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"candidate\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"fluctuationLimitRatio\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"d\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"fundingBufferPeriod\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"fundingPeriod\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"fundingRate\",\n    outputs: [\n      {\n        internalType: \"int256\",\n        name: \"d\",\n        type: \"int256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getBaseAssetDeltaThisFundingPeriod\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"int256\",\n            name: \"d\",\n            type: \"int256\",\n          },\n        ],\n        internalType: \"struct SignedDecimal.signedDecimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getCumulativeNotional\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"int256\",\n            name: \"d\",\n            type: \"int256\",\n          },\n        ],\n        internalType: \"struct SignedDecimal.signedDecimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"enum IAmm.Dir\",\n        name: \"_dir\",\n        type: \"uint8\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_quoteAssetAmount\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"getInputPrice\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"enum IAmm.Dir\",\n        name: \"_dir\",\n        type: \"uint8\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_quoteAssetAmount\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_quoteAssetPoolAmount\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_baseAssetPoolAmount\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"getInputPriceWithReserves\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"pure\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"enum IAmm.Dir\",\n        name: \"_dir\",\n        type: \"uint8\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_quoteAssetAmount\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"getInputTwap\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getLatestLiquidityChangedSnapshots\",\n    outputs: [\n      {\n        components: [\n          {\n            components: [\n              {\n                internalType: \"int256\",\n                name: \"d\",\n                type: \"int256\",\n              },\n            ],\n            internalType: \"struct SignedDecimal.signedDecimal\",\n            name: \"cumulativeNotional\",\n            type: \"tuple\",\n          },\n          {\n            components: [\n              {\n                internalType: \"uint256\",\n                name: \"d\",\n                type: \"uint256\",\n              },\n            ],\n            internalType: \"struct Decimal.decimal\",\n            name: \"quoteAssetReserve\",\n            type: \"tuple\",\n          },\n          {\n            components: [\n              {\n                internalType: \"uint256\",\n                name: \"d\",\n                type: \"uint256\",\n              },\n            ],\n            internalType: \"struct Decimal.decimal\",\n            name: \"baseAssetReserve\",\n            type: \"tuple\",\n          },\n          {\n            components: [\n              {\n                internalType: \"int256\",\n                name: \"d\",\n                type: \"int256\",\n              },\n            ],\n            internalType: \"struct SignedDecimal.signedDecimal\",\n            name: \"totalPositionSize\",\n            type: \"tuple\",\n          },\n        ],\n        internalType: \"struct IAmm.LiquidityChangedSnapshot\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"i\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getLiquidityChangedSnapshots\",\n    outputs: [\n      {\n        components: [\n          {\n            components: [\n              {\n                internalType: \"int256\",\n                name: \"d\",\n                type: \"int256\",\n              },\n            ],\n            internalType: \"struct SignedDecimal.signedDecimal\",\n            name: \"cumulativeNotional\",\n            type: \"tuple\",\n          },\n          {\n            components: [\n              {\n                internalType: \"uint256\",\n                name: \"d\",\n                type: \"uint256\",\n              },\n            ],\n            internalType: \"struct Decimal.decimal\",\n            name: \"quoteAssetReserve\",\n            type: \"tuple\",\n          },\n          {\n            components: [\n              {\n                internalType: \"uint256\",\n                name: \"d\",\n                type: \"uint256\",\n              },\n            ],\n            internalType: \"struct Decimal.decimal\",\n            name: \"baseAssetReserve\",\n            type: \"tuple\",\n          },\n          {\n            components: [\n              {\n                internalType: \"int256\",\n                name: \"d\",\n                type: \"int256\",\n              },\n            ],\n            internalType: \"struct SignedDecimal.signedDecimal\",\n            name: \"totalPositionSize\",\n            type: \"tuple\",\n          },\n        ],\n        internalType: \"struct IAmm.LiquidityChangedSnapshot\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getLiquidityHistoryLength\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getMaxHoldingBaseAsset\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getOpenInterestNotionalCap\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"enum IAmm.Dir\",\n        name: \"_dir\",\n        type: \"uint8\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_baseAssetAmount\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"getOutputPrice\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"enum IAmm.Dir\",\n        name: \"_dir\",\n        type: \"uint8\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_baseAssetAmount\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_quoteAssetPoolAmount\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_baseAssetPoolAmount\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"getOutputPriceWithReserves\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"pure\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"enum IAmm.Dir\",\n        name: \"_dir\",\n        type: \"uint8\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_baseAssetAmount\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"getOutputTwap\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getReserve\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getSettlementPrice\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getSnapshotLen\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getSpotPrice\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_intervalInSeconds\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getTwapPrice\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getUnderlyingPrice\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_intervalInSeconds\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getUnderlyingTwapPrice\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"globalShutdown\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_quoteAssetReserve\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_baseAssetReserve\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_tradeLimitRatio\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_fundingPeriod\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"contract IPriceFeed\",\n        name: \"_priceFeed\",\n        type: \"address\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"_priceFeedKey\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_quoteAsset\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_fluctuationLimitRatio\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_tollRatio\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_spreadRatio\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_liquidityMultiplier\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_fluctuationLimitRatio\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"migrateLiquidity\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"nextFundingTime\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"open\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"priceFeed\",\n    outputs: [\n      {\n        internalType: \"contract IPriceFeed\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"priceFeedKey\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"quoteAsset\",\n    outputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"quoteAssetReserve\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"d\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"reserveSnapshots\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"quoteAssetReserve\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"baseAssetReserve\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"timestamp\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"blockNumber\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_maxHoldingBaseAsset\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_openInterestNotionalCap\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"setCap\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_counterParty\",\n        type: \"address\",\n      },\n    ],\n    name: \"setCounterParty\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_fluctuationLimitRatio\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"setFluctuationLimitRatio\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_globalShutdown\",\n        type: \"address\",\n      },\n    ],\n    name: \"setGlobalShutdown\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bool\",\n        name: \"_open\",\n        type: \"bool\",\n      },\n    ],\n    name: \"setOpen\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"setOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_interval\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"setSpotPriceTwapInterval\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_spreadRatio\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"setSpreadRatio\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_tollRatio\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"setTollRatio\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"settleFunding\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"int256\",\n            name: \"d\",\n            type: \"int256\",\n          },\n        ],\n        internalType: \"struct SignedDecimal.signedDecimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"shutdown\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"spotPriceTwapInterval\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"spreadRatio\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"d\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"enum IAmm.Dir\",\n        name: \"_dir\",\n        type: \"uint8\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_quoteAssetAmount\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_baseAssetAmountLimit\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"swapInput\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"enum IAmm.Dir\",\n        name: \"_dir\",\n        type: \"uint8\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_baseAssetAmount\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_quoteAssetAmountLimit\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"_skipFluctuationCheck\",\n        type: \"bool\",\n      },\n    ],\n    name: \"swapOutput\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"tollAmount\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"d\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"tollRatio\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"d\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"totalPositionSize\",\n    outputs: [\n      {\n        internalType: \"int256\",\n        name: \"d\",\n        type: \"int256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"tradeLimitRatio\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"d\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"updateOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x608060405234801561001057600080fd5b50614576806100206000396000f3fe608060405234801561001057600080fd5b50600436106103a45760003560e01c80636fa42ede116101e9578063c2de442f1161010f578063e4bc2eb9116100ad578063f1b5df861161007c578063f1b5df86146106ce578063fc0e74d1146106e1578063fcfff16f146106e9578063fdf262b7146106fe576103a4565b8063e4bc2eb9146106ae578063e805d6fc146106b6578063ec2c0e63146106be578063ed83d79c146106c6576103a4565b8063dc3184a0116100e9578063dc3184a014610678578063dc76fabc1461068b578063e0037a6c14610693578063e1f1027f1461069b576103a4565b8063c2de442f14610655578063c9566fcc1461065d578063da0c592714610665576103a4565b80638da5cb5b116101875780639ffca62f116101565780639ffca62f14610614578063a8f8be4e14610627578063b2ed32c71461063a578063bc5920ba1461064d576103a4565b80638da5cb5b146105de5780638f40d932146105e65780639bf5d1d4146105ee5780639ece77c814610601576103a4565b8063715018a6116101c3578063715018a6146105b3578063741bef1a146105bb57806374d7c62b146105c35780637ec3246d146105cb576103a4565b80636fa42ede146105855780636fdca5e0146105985780636febdd50146105ab576103a4565b8063468f02d2116102ce57806358a4c3dc1161026c578063622679551161023b578063622679551461054f57806362e7a176146105625780636baccaba146105755780636c8381f81461057d576103a4565b806358a4c3dc1461051657806359bf5d391461051e5780635f1ba1fd14610534578063620be0671461053c576103a4565b806350799c81116102a857806350799c81146104d5578063524f15a1146104e857806352545410146104fb5780635834db9014610503576103a4565b8063468f02d2146104b25780634894d183146104ba5780634cb876f2146104cd576103a4565b806321e00985116103465780633495324911610315578063349532491461047c57806340d71cd91461048f57806341d3c84c146104a257806342b3198b146104aa576103a4565b806321e0098514610436578063237f17ee1461045957806329f9b17b1461046c5780632d666e3814610474576103a4565b8063113773941161038257806311377394146103f157806313af4035146104065780631b584d6c146104195780631d3acb441461042e576103a4565b80630244accf146103a95780630d451c8f146103c75780630dd68c70146103dc575b600080fd5b6103b1610706565b6040516103be9190613c5f565b60405180910390f35b6103cf610715565b6040516103be9190613c7e565b6103ef6103ea366004613b3d565b61071b565b005b6103f96107d1565b6040516103be9190614479565b6103ef610414366004613972565b6107ed565b6104216108c6565b6040516103be919061444a565b6103cf610954565b610449610444366004613ba8565b61095a565b6040516103be9493929190614493565b610421610467366004613ba8565b6109a8565b6103f9610a48565b6103cf610a64565b6103f961048a366004613ba8565b610a6a565b6103f961049d366004613b59565b610b09565b6103cf610bc5565b6103cf610bcb565b6103f9610bd1565b6103f96104c8366004613a4f565b610c6e565b6103cf610c8e565b6103f96104e3366004613a84565b610c94565b6103ef6104f6366004613b22565b610e05565b6103f9610e40565b6103ef610511366004613af7565b610e5c565b6103cf61119d565b6105266111a3565b6040516103be929190614483565b6103cf6111d5565b6103ef61054a366004613bd8565b6111db565b61052661055d366004613adc565b61151a565b6103ef610570366004613ba8565b6115b5565b6103cf61160c565b6103b1611612565b6103f9610593366004613a4f565b611621565b6103ef6105a636600461398e565b611638565b6103cf6116f2565b6103ef6116f8565b6103b1611777565b6103cf611786565b6103ef6105d9366004613b22565b61178c565b6103b16117c7565b6103cf6117d6565b6103f96105fc366004613a84565b6117dc565b6103ef61060f366004613972565b6118ba565b6103f96106223660046139ae565b611911565b6103ef610635366004613b22565b611b46565b6103ef610648366004613972565b611b81565b6103ef611bd8565b6103cf611c9b565b6103cf611ca1565b6103f9610673366004613a4f565b611ca7565b6103f96106863660046139f3565b611cd9565b6103f9611d70565b6103cf611daa565b6103f96106a9366004613a4f565b611db0565b6103cf611de2565b6103f9611de8565b6103f9611e04565b6103f9611e20565b6103f96106dc366004613ba8565b611f89565b6103ef611f9a565b6106f1612008565b6040516103be9190613c73565b6103b1612018565b60e2546001600160a01b031681565b60e05490565b610723612027565b6065546001600160a01b039081169116146107595760405162461bcd60e51b815260040161075090614382565b60405180910390fd5b815160d7819055815160d85560408051602081019091529081527f7338f3784ceb8f9456bac0c4a69f1c6354dc325fa6455e3e3f6a8a9bf9249a7c9061079e9061202b565b604080516020810190915260d85481526107b79061202b565b6040516107c5929190613c87565b60405180910390a15050565b6107d961385b565b50604080516020810190915260d754815290565b6107f5612027565b6065546001600160a01b039081169116146108225760405162461bcd60e51b815260040161075090614382565b6001600160a01b0381166108485760405162461bcd60e51b81526004016107509061411c565b6065546001600160a01b03828116911614156108765760405162461bcd60e51b815260040161075090614404565b6066546001600160a01b03828116911614156108a45760405162461bcd60e51b815260040161075090613e3b565b606680546001600160a01b0319166001600160a01b0392909216919091179055565b6108ce61386e565b60da80546108e390600163ffffffff61202f16565b815481106108ed57fe5b60009182526020918290206040805160a0810182526004909302909101805460808401908152835281518085018352600182015481528385015281518085018352600282015481528383015281519384019091526003015482526060810191909152905090565b60d35481565b60e0818154811061096757fe5b600091825260209182902060408051808501825260049093029091018054835281519384019091526001810154835260028101546003909101549193509084565b6109b061386e565b60da5482106109d15760405162461bcd60e51b815260040161075090613f6d565b60da82815481106109de57fe5b60009182526020918290206040805160a081018252600490930290910180546080840190815283528151808501835260018201548152838501528151808501835260028201548152838301528151938401909152600301548252606081019190915290505b919050565b610a5061385b565b50604080516020810190915260ce54815290565b60d65481565b610a7261385b565b60408051602081019182905260e45460df54632885cf7d60e21b909352909182916001600160a01b03169063a2173df490610ab1908760248601613c87565b60206040518083038186803b158015610ac957600080fd5b505afa158015610add573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b019190613bc0565b905292915050565b610b1161385b565b610b1a84612071565b610b25575082610bbe565b600080610b318661202b565b13610b3d576000610b40565b60015b9050610b4a61385b565b610b6c82610b59576001610b5c565b60005b610b6588612083565b87876117dc565b9050610b7661385b565b610b96610b9184610b88576000610b8b565b60015b84611db0565b6120b1565b9050610bb883610ba857600019610bab565b60015b829063ffffffff61211516565b93505050505b9392505050565b60cd5481565b60da5490565b610bd961385b565b60408051602081019182905260e45460df546331d98b3f60e01b909352909182916001600160a01b0316906331d98b3f90610c179060248501613c7e565b60206040518083038186803b158015610c2f57600080fd5b505afa158015610c43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c679190613bc0565b9052905090565b610c7661385b565b610c8583836000610384612140565b90505b92915050565b60cc5481565b610c9c61385b565b610ca58461202b565b610cb857610cb16121c6565b9050610dfd565b600080866001811115610cc757fe5b149050610cd261385b565b610ce5610b91868663ffffffff6121e116565b9050610cef61385b565b610cf761385b565b610cff61385b565b8415610d1c57610d15888a63ffffffff61220416565b9150610d2f565b610d2c888a63ffffffff61222716565b91505b610d388261202b565b610d545760405162461bcd60e51b815260040161075090614261565b610d64848363ffffffff61224a16565b9250610d7e610d79848963ffffffff6122bb16565b612083565b9050610da1610d9c83610d9087612083565b9063ffffffff61233016565b61202b565b15610df6578415610dd357604080516020810190915260018152610dcc90829063ffffffff61222716565b9050610df6565b604080516020810190915260018152610df390829063ffffffff61220416565b90505b9450505050505b949350505050565b610e0d612027565b6065546001600160a01b03908116911614610e3a5760405162461bcd60e51b815260040161075090614382565b5160d555565b610e4861385b565b50604080516020810190915260d854815290565b610e64612027565b6065546001600160a01b03908116911614610e915760405162461bcd60e51b815260040161075090614382565b610e9c610d9c612374565b610eae610d9c36859003850185613b22565b1415610ecc5760405162461bcd60e51b815260040161075090613d39565b604080516020810190915260cc548152610ef490610eef36859003850185613b22565b612391565b604080516020810190915260cb548152610f1790610eef36859003850185613b22565b610f2e610f2936839003830183613b22565b61242a565b610f3661385b565b50604080516020810190915260d1548152610f4f61385b565b50604080516020810190915260d2548152610f6861385b565b50604080516020810190915260cc548152610f98610f8b36879003870187613b22565b849063ffffffff6121e116565b5160d155610fbb610fae36879003870187613b22565b839063ffffffff6121e116565b5160d255604080516020810190915260cb548152610ffe9060001990610ff290610feb908363ffffffff61211516565b8686610b09565b9063ffffffff61211516565b5160cb5561100d818484610b09565b5160cc8190556040805160a08101825260ce5460808201908152815281516020808201845260d1805483528184019283528451808301865260d2548152848601908152855180840187529687526060850196875260da80546001810182556000919091529451517fb3d6e86317c38844915b053a0c35ff2fc103b684e96cef2918ab06844eb51aaf6004909602958601559251517fb3d6e86317c38844915b053a0c35ff2fc103b684e96cef2918ab06844eb51ab08501559151517fb3d6e86317c38844915b053a0c35ff2fc103b684e96cef2918ab06844eb51ab18401559351517fb3d6e86317c38844915b053a0c35ff2fc103b684e96cef2918ab06844eb51ab29092019190915581519283019091525481527feba648fc83514e32ba75e27696ee5fa3610ebc7a77460a3ac3e8724ffa1be4cc9061114d9061202b565b604080516020810190915260d25481526111669061202b565b604080516020810190915260ce54815261117f9061202b565b60405161118e939291906144ae565b60405180910390a15050505050565b60df5481565b6111ab61385b565b6111b361385b565b5050604080516020808201835260d1548252825190810190925260d254825291565b60db5481565b600054610100900460ff16806111f457506111f4612580565b80611202575060005460ff16155b61121e5760405162461bcd60e51b81526004016107509061415e565b600054610100900460ff16158015611249576000805460ff1961ff0019909116610100171660011790555b8a1580159061125757508815155b801561126257508915155b801561126d57508715155b801561128157506001600160a01b03871615155b801561129557506001600160a01b03851615155b6112b15760405162461bcd60e51b8152600401610750906142c8565b6112b9612586565b6040805160208082018352908d905260d18d9055815180820183528c905260d28c9055815180820183528b905260d08b90558151808201835285905260d48590558151808201835284905260d5849055815190810190915284905260d384905560dc88905561132f88600263ffffffff61261816565b60dd55610e1060db5560df86905560e380546001600160a01b038088166001600160a01b03199283161790925560e48054928a1692909116919091179055611375612374565b5160d955604080516080810190915260da90806113906121c6565b8152604080516020818101835260d1548252808401919091528151908101825260d2548152908201526060016113c46121c6565b9052815460018181018455600093845260209384902083515160049093020191825583830151519082015560408083015151600283015560609092015151600390910155805160a08101825260d1546080820190815281528151808401835260d25481529281019290925260e09190810161143d61265a565b815260200161144a61265e565b9052815460018181018455600093845260209384902083515160049093020191825583830151519082015560408083015160028301556060909201516003909101558051918201905260d15481527f3a3348362552c3897fd1f06a3233519ebd8bd76ad6e99a418a9741155fe90515906114c39061202b565b604080516020810190915260d25481526114dc9061202b565b6114e461265a565b6040516114f3939291906144ae565b60405180910390a1801561150d576000805461ff00191690555b5050505050505050505050565b61152261385b565b61152a61385b565b61153c610d9c36859003850185613b22565b611559576115486121c6565b6115506121c6565b915091506115b0565b604080516020810190915260d45481526115889061157c36869003860186613b22565b9063ffffffff6121e116565b604080516020810190915260d55481526115ab9061157c36879003870187613b22565b915091505b915091565b6115bd612027565b6065546001600160a01b039081169116146115ea5760405162461bcd60e51b815260040161075090614382565b806116075760405162461bcd60e51b815260040161075090613dcd565b60db55565b60d45481565b6066546001600160a01b031690565b61162961385b565b610c8583836001610384612140565b611640612027565b6065546001600160a01b0390811691161461166d5760405162461bcd60e51b815260040161075090614382565b60e45460ff600160a01b909104161515811515141561168b576116ef565b60e4805482158015600160a01b0260ff60a01b19909216919091179091556116ef576116eb610e106116df610e106116d360dc546116c761265a565b9063ffffffff61266216565b9063ffffffff61261816565b9063ffffffff61268716565b60de555b50565b60d55481565b611700612027565b6065546001600160a01b0390811691161461172d5760405162461bcd60e51b815260040161075090614382565b6065546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3606580546001600160a01b0319169055565b60e4546001600160a01b031681565b60dc5481565b611794612027565b6065546001600160a01b039081169116146117c15760405162461bcd60e51b815260040161075090614382565b5160d455565b6065546001600160a01b031690565b60d05481565b6117e461385b565b6117ed8461202b565b6117f957610cb16121c6565b60008086600181111561180857fe5b14905061181361385b565b611826610b91868663ffffffff6121e116565b905061183061385b565b61183861385b565b61184061385b565b841561185d57611856878a63ffffffff61220416565b9150611870565b61186d878a63ffffffff61222716565b91505b6118798261202b565b6118955760405162461bcd60e51b815260040161075090613d0a565b6118a5848363ffffffff61224a16565b9250610d7e610d79848a63ffffffff6122bb16565b6118c2612027565b6065546001600160a01b039081169116146118ef5760405162461bcd60e51b815260040161075090614382565b60e180546001600160a01b0319166001600160a01b0392909216919091179055565b61191961385b565b60e454600160a01b900460ff166119425760405162461bcd60e51b815260040161075090614045565b61194a612027565b60e1546001600160a01b039081169116146119775760405162461bcd60e51b815260040161075090613e04565b611989610d9c36859003850185613b22565b61199c576119956121c6565b9050610bbe565b60018460018111156119aa57fe5b1415611a10576119c2610d9c36859003850185613b22565b604080516020808201835260d0548252825190810190925260d15482526119f291610d9c9163ffffffff6121e116565b1015611a105760405162461bcd60e51b815260040161075090613ec3565b611a1861385b565b611a2b856106a936879003870187613b22565b9050611a3f610d9c36859003850185613b22565b15611acf576000856001811115611a5257fe5b1415611a9657611a6a610d9c36859003850185613b22565b611a738261202b565b1015611a915760405162461bcd60e51b8152600401610750906140e5565b611acf565b611aa8610d9c36859003850185613b22565b611ab18261202b565b1115611acf5760405162461bcd60e51b81526004016107509061422a565b611aea85611ae236879003870187613b22565b8360006126c1565b7fae6a2b946841d9afc0e1e19a94ae4af26f01125b87b5095bbfb177a9741a2ede85611b1e610d9c36889003880188613b22565b611b278461202b565b604051611b3693929190613c95565b60405180910390a1949350505050565b611b4e612027565b6065546001600160a01b03908116911614611b7b5760405162461bcd60e51b815260040161075090614382565b5160d355565b611b89612027565b6065546001600160a01b03908116911614611bb65760405162461bcd60e51b815260040161075090614382565b60e280546001600160a01b0319166001600160a01b0392909216919091179055565b6066546001600160a01b0316611c005760405162461bcd60e51b815260040161075090614333565b611c08612027565b6066546001600160a01b03908116911614611c355760405162461bcd60e51b815260040161075090613eef565b6066546065546040516001600160a01b0392831692909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360668054606580546001600160a01b03199081166001600160a01b03841617909155169055565b60dd5481565b60d25481565b611caf61385b565b604080516020808201835260d1548252825190810190925260d2548252610c8591859185916117dc565b611ce161385b565b60e454600160a01b900460ff16611d0a5760405162461bcd60e51b815260040161075090614045565b611d12612027565b60e1546001600160a01b03908116911614611d3f5760405162461bcd60e51b815260040161075090613e04565b611d6785611d5236879003870187613b22565b611d6136879003870187613b22565b8561286f565b95945050505050565b611d7861385b565b604080516020808201835260d2548252825190810190925260d1548252611da5919063ffffffff612a2116565b905090565b60de5481565b611db861385b565b604080516020808201835260d1548252825190810190925260d2548252610c859185918591610c94565b60d15481565b611df061385b565b50604080516020810190915260cb54815290565b611e0c61385b565b50604080516020810190915260cf54815290565b611e2861385b565b60e454600160a01b900460ff16611e515760405162461bcd60e51b815260040161075090614045565b611e59612027565b60e1546001600160a01b03908116911614611e865760405162461bcd60e51b815260040161075090613e04565b60de54611e9161265a565b1015611eaf5760405162461bcd60e51b815260040161075090614291565b611eb761385b565b611ec260db54610a6a565b9050611ecc61385b565b611eea82611ede610b9160db54611f89565b9063ffffffff6122bb16565b9050611ef461385b565b611f1c62015180611f1060dc5485612a4490919063ffffffff16565b9063ffffffff612aa716565b9050611f288184612ac9565b6000611f3860dd546116c761265a565b90506000611f5f610e106116df610e106116d360dc5460de5461266290919063ffffffff16565b9050818111611f6e5781611f70565b805b60de55611f7b6121c6565b5160cb555090935050505090565b611f9161385b565b610c8882612b21565b611fa26117c7565b6001600160a01b0316611fb3612027565b6001600160a01b03161480611fe2575060e2546001600160a01b0316611fd7612027565b6001600160a01b0316145b611ffe5760405162461bcd60e51b8152600401610750906140ae565b612006612b52565b565b60e454600160a01b900460ff1681565b60e3546001600160a01b031681565b3390565b5190565b6000610c8583836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612ca7565b600061207c82612083565b5192915050565b61208b61385b565b61209361385b565b8251600013156120a95782516000038152610c88565b915182525090565b6120b961385b565b8180600001516001600160ff1b03101560405180606001604052806033815260200161450e60339139906121005760405162461bcd60e51b81526004016107509190613cb7565b50506040805160208101909152915182525090565b61211d61385b565b61212561385b565b8351612137908463ffffffff612cd316565b81529392505050565b61214861385b565b6121506138ad565b600180825260e0546121619161202f565b6020820152604081015186600181111561217757fe5b9081600181111561218457fe5b9052506040808201805160200187905251018460018111156121a257fe5b908160018111156121af57fe5b9052506121bc8184612d3e565b9695505050505050565b6121ce61385b565b5060408051602081019091526000815290565b6121e961385b565b6121f161385b565b825184516121379163ffffffff612fab16565b61220c61385b565b61221461385b565b825184516121379163ffffffff61266216565b61222f61385b565b61223761385b565b825184516121379163ffffffff61202f16565b61225261385b565b8180600001516001600160ff1b03101560405180606001604052806033815260200161450e60339139906122995760405162461bcd60e51b81526004016107509190613cb7565b506122a261385b565b611d676122ae856120b1565b869063ffffffff612fb916565b6122c361385b565b8180600001516001600160ff1b03101560405180606001604052806033815260200161450e603391399061230a5760405162461bcd60e51b81526004016107509190613cb7565b5061231361385b565b835185516123269163ffffffff612fdc16565b8152949350505050565b61233861385b565b604051806020016040528083600001516123636123556012613022565b87519063ffffffff61268716565b8161236a57fe5b0690529392505050565b61237c61385b565b6040518060200160405280610c676012613022565b600061239c8361202b565b1315612426576123aa61385b565b604080516020808201835260d25482528251908101909252633b9aca0082526123ef91610d7991906123e390879063ffffffff61302b16565b9063ffffffff61224a16565b90506000612403838363ffffffff61309616565b60000b12156124245760405162461bcd60e51b815260040161075090613f36565b505b5050565b60006124358261202b565b11156116ef5760e0546124466138cc565b60e0600183038154811061245657fe5b60009182526020918290206040805160a08101825260049093029091018054608084019081528352815180850183526001820154815293830193909352600283015490820152600390910154606082015290506124b161265e565b81606001511480156124c35750600182115b1561252c5760e060028303815481106124d857fe5b60009182526020918290206040805160a08101825260049093029091018054608084019081528352815180850183526001820154815293830193909352600283015490820152600390910154606082015290505b604080516020808201835260d2548252825190810190925260d15482526125639161255c9163ffffffff612a2116565b84836130c7565b156124245760405162461bcd60e51b815260040161075090613f96565b303b1590565b600054610100900460ff168061259f575061259f612580565b806125ad575060005460ff16155b6125c95760405162461bcd60e51b81526004016107509061415e565b600054610100900460ff161580156125f4576000805460ff1961ff0019909116610100171660011790555b6125fc613187565b612604613208565b80156116ef576000805461ff001916905550565b6000610c8583836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506132e2565b4290565b4390565b600082820183811015610c855760405162461bcd60e51b815260040161075090613d96565b60008261269657506000610c88565b828202828482816126a357fe5b0414610c855760405162461bcd60e51b81526004016107509061406d565b60008460018111156126cf57fe5b141561278e57604080516020810190915260d15481526126f5908463ffffffff61220416565b5160d155604080516020810190915260d2548152612719908363ffffffff61222716565b5160d255604080516020810190915260cb54815261273d908363ffffffff6122bb16565b5160cb55604080516020810190915260cc548152612761908363ffffffff61302b16565b5160cc55604080516020810190915260ce548152612785908463ffffffff61302b16565b5160ce55612843565b604080516020810190915260d15481526127ae908463ffffffff61222716565b5160d155604080516020810190915260d25481526127d2908363ffffffff61220416565b5160d255604080516020810190915260cb5481526127f6908363ffffffff61302b16565b5160cb55604080516020810190915260cc54815261281a908363ffffffff6122bb16565b5160cc55604080516020810190915260ce54815261283e908463ffffffff6122bb16565b5160ce555b8061286157604080516020810190915260d35481526128619061242a565b612869613319565b50505050565b61287761385b565b6128808461202b565b61288c57610cb16121c6565b600185600181111561289a57fe5b14156128f7576128a98461202b565b604080516020808201835260d0548252825190810190925260d25482526128d991610d9c9163ffffffff6121e116565b10156128f75760405162461bcd60e51b815260040161075090613ec3565b6128ff61385b565b6129098686611ca7565b90506129148461202b565b1561299257600086600181111561292757fe5b1415612962576129368461202b565b61293f8261202b565b101561295d5760405162461bcd60e51b81526004016107509061400e565b612992565b61296b8461202b565b6129748261202b565b11156129925760405162461bcd60e51b8152600401610750906141f3565b826129a5576129a2868287613451565b92505b6129cd60008760018111156129b657fe5b146129c25760006129c5565b60015b8287866126c1565b7f0dd4066b1a6ce97fb670c3e4201e908c644193f38cbdaffd0229d7e26da3e533866129f88361202b565b612a018861202b565b604051612a1093929190613c95565b60405180910390a195945050505050565b612a2961385b565b612a3161385b565b825184516121379163ffffffff61358b16565b612a4c61385b565b816001600160ff1b03101560405180606001604052806033815260200161450e6033913990612a8e5760405162461bcd60e51b81526004016107509190613cb7565b50612a9761385b565b610dfd848463ffffffff61211516565b612aaf61385b565b612ab761385b565b8351612137908463ffffffff61359916565b612ad9828263ffffffff61224a16565b5160cd81905560408051602081019091529081527fd2805fe76d30598332a67c1061cee82e2e102b0f59f5457b1729bce028a054a090612b189061202b565b6107b78361202b565b612b2961385b565b612b316138ad565b6000815260e054612b4390600161202f565b6020820152610bbe8184612d3e565b612b5a61386e565b612b626108c6565b9050612b6c61385b565b60208201516040830151612b859163ffffffff6121e116565b9050612b8f61385b565b60408301516060840151612ba89163ffffffff61302b16565b9050612bb261385b565b612bcb82612bbf856120b1565b9063ffffffff612fb916565b9050612bd561385b565b604080516020810190915260d1548152612bf690839063ffffffff6122bb16565b604080516020810190915260cc548152909150606490612c1590612071565b1115612c5257604080516020810190915260cc548152612c4d90612c3890612083565b612c4183612083565b9063ffffffff612a2116565b5160cf555b60e4805460ff60a01b19169055604080516020810190915260cf5481527f574214b195bf5273a95bb4498e35cf1fde0ce327c727a95ec2ab359f7ba4e11a90612c9a9061202b565b60405161118e9190613c7e565b60008184841115612ccb5760405162461bcd60e51b81526004016107509190613cb7565b505050900390565b600082612ce257506000610c88565b82600019148015612cf65750600160ff1b82145b15612d135760405162461bcd60e51b8152600401610750906141ac565b82820282848281612d2057fe5b0514610c855760405162461bcd60e51b8152600401610750906141ac565b612d4661385b565b612d4e61385b565b612d57846135fd565b905082612d65579050610c88565b6000612d7f84612d7361265a565b9063ffffffff61202f16565b9050612d896138cc565b60e0866020015181548110612d9a57fe5b60009182526020918290206040805160a081018252600490930290910180546080840190815283528151808501835260018083015482529484015260028101549183019190915260030154606082015260e0549092501480612e00575081816040015111155b15612e1057829350505050610c88565b60408101516000612e2382612d7361265a565b9050612e2d61385b565b612e3d868363ffffffff61375b16565b90505b6020890151612e6657612e59818363ffffffff61377d16565b9650505050505050610c88565b6020890151612e7c90600163ffffffff61202f16565b60208a0181905260e080549091908110612e9257fe5b60009182526020918290206040805160a0810182526004909302909101805460808401908152835281518085018352600182015481529383019390935260028301549082015260039091015460608201529350612eee896135fd565b955084846040015111612f3257612f2b612f1e612f11858863ffffffff61202f16565b889063ffffffff61375b16565b829063ffffffff61220416565b9050612f8e565b6000612f4b85604001518561202f90919063ffffffff16565b9050612f6d612f60888363ffffffff61375b16565b839063ffffffff61220416565b9150612f7f838263ffffffff61266216565b92508460400151935050612e40565b612f9e818963ffffffff61377d16565b9998505050505050505050565b6000610c858383601261379f565b612fc161385b565b612fc961385b565b825184516121379163ffffffff6137bd16565b6000818303818312801590612ff15750838113155b80613006575060008312801561300657508381135b610c855760405162461bcd60e51b8152600401610750906142ef565b60ff16600a0a90565b61303361385b565b8180600001516001600160ff1b03101560405180606001604052806033815260200161450e603391399061307a5760405162461bcd60e51b81526004016107509190613cb7565b5061308361385b565b835185516123269163ffffffff6137cb16565b8051825160009110156130ab57506001610c88565b8151835110156130be5750600019610c88565b50600092915050565b60006130d161385b565b602083015183516130e79163ffffffff612a2116565b90506130f161385b565b61310c610fae86613100612374565b9063ffffffff61220416565b905061311661385b565b613131610f8b87613125612374565b9063ffffffff61222716565b90506000613145888463ffffffff61309616565b60000b1315801561316957506000613163888363ffffffff61309616565b60000b12155b1561317a5760009350505050610bbe565b5060019695505050505050565b600054610100900460ff16806131a057506131a0612580565b806131ae575060005460ff16155b6131ca5760405162461bcd60e51b81526004016107509061415e565b600054610100900460ff16158015612604576000805460ff1961ff00199091166101001716600117905580156116ef576000805461ff001916905550565b600054610100900460ff16806132215750613221612580565b8061322f575060005460ff16155b61324b5760405162461bcd60e51b81526004016107509061415e565b600054610100900460ff16158015613276576000805460ff1961ff0019909116610100171660011790555b6000613280612027565b606580546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35080156116ef576000805461ff001916905550565b600081836133035760405162461bcd60e51b81526004016107509190613cb7565b50600083858161330f57fe5b0495945050505050565b600061332361265e565b60e08054919250600091600019810190811061333b57fe5b9060005260206000209060040201905080600301548214156133695760d154815560d25460018201556133e6565b6040805160a08101825260d15460808201908152815281516020818101845260d254825282015260e091810161339d61265a565b8152602090810185905282546001818101855560009485529382902083515160049092020190815590820151519281019290925560408101516002830155606001516003909101555b604080516020810190915260d15481527f3a3348362552c3897fd1f06a3233519ebd8bd76ad6e99a418a9741155fe90515906134219061202b565b604080516020810190915260d254815261343a9061202b565b61344261265a565b6040516107c5939291906144ae565b600061345b61385b565b600085600181111561346957fe5b146134b757604080516020810190915260d25481526134b290613492908563ffffffff61222716565b604080516020810190915260d1548152612c41908763ffffffff61220416565b6134fb565b604080516020810190915260d25481526134fb906134db908563ffffffff61220416565b604080516020810190915260d1548152612c41908763ffffffff61222716565b604080516020810190915260d354815260e08054929350611d67928492919061352b90600163ffffffff61202f16565b8154811061353557fe5b60009182526020918290206040805160a0810182526004909302909101805460808401908152835281518085018352600182015481529383019390935260028301549082015260039091015460608201526130c7565b6000610c8583836012613811565b6000816135b85760405162461bcd60e51b8152600401610750906143cf565b816000191480156135cc5750600160ff1b83145b156135e95760405162461bcd60e51b815260040161075090613fcd565b60008284816135f457fe5b05949350505050565b61360561385b565b61360d6138cc565b60e083602001518154811061361e57fe5b600091825260208083206040805160a0810182526004909402909101805460808501908152845281518084018352600182015481529284019290925260028201549083015260030154606082015291508351600181111561367b57fe5b141561369f57602081015181516136979163ffffffff612a2116565b915050610a43565b6001835160018111156136ae57fe5b1415613743576136c583604001516020015161202b565b6136d1576136976121c6565b600083604001516040015160018111156136e757fe5b141561370a57604083015180516020918201518351928401516136979390610c94565b6001836040015160400151600181111561372057fe5b1415613743576040830151805160209182015183519284015161369793906117dc565b60405162461bcd60e51b815260040161075090613d68565b61376361385b565b61376b61385b565b8351612137908463ffffffff61268716565b61378561385b565b61378d61385b565b8351612137908463ffffffff61261816565b6000610dfd6137ad83613022565b6116d3868663ffffffff61268716565b6000610c8583836012613830565b60008282018183128015906137e05750838112155b806137f557506000831280156137f557508381125b610c855760405162461bcd60e51b815260040161075090613e82565b6000610dfd836116d361382385613022565b879063ffffffff61268716565b6000610dfd8361384f61384285613022565b879063ffffffff612cd316565b9063ffffffff61359916565b6040518060200160405280600081525090565b604051806080016040528061388161385b565b815260200161388e61385b565b815260200161389b61385b565b81526020016138a861385b565b905290565b60408051606081018252600080825260208201529081016138a8613900565b60405180608001604052806138df61385b565b81526020016138ec61385b565b815260200160008152602001600081525090565b6040805160608101909152806000815260200161391b61385b565b815260200160006138a8565b803560028110610c8857600080fd5b600060208284031215613947578081fd5b50919050565b60006020828403121561395e578081fd5b61396860206144c4565b9135825250919050565b600060208284031215613983578081fd5b8135610c85816144eb565b60006020828403121561399f578081fd5b81358015158114610c85578182fd5b6000806000606084860312156139c2578182fd5b6139cc8585613927565b92506139db8560208601613936565b91506139ea8560408601613936565b90509250925092565b60008060008060808587031215613a08578081fd5b613a128686613927565b9350613a218660208701613936565b9250613a308660408701613936565b915060608501358015158114613a44578182fd5b939692955090935050565b60008060408385031215613a61578182fd5b8235613a6c81614500565b9150613a7b846020850161394d565b90509250929050565b60008060008060808587031215613a99578384fd5b8435613aa481614500565b9350613ab3866020870161394d565b9250613ac2866040870161394d565b9150613ad1866060870161394d565b905092959194509250565b600060208284031215613aed578081fd5b610c858383613936565b60008060408385031215613b09578182fd5b613b138484613936565b9150613a7b8460208501613936565b600060208284031215613b33578081fd5b610c85838361394d565b60008060408385031215613b4f578182fd5b613a6c848461394d565b60008060008385036060811215613b6e578384fd5b6020811215613b7b578384fd5b50613b8660206144c4565b843581529250613b99856020860161394d565b91506139ea856040860161394d565b600060208284031215613bb9578081fd5b5035919050565b600060208284031215613bd1578081fd5b5051919050565b6000806000806000806000806000806101408b8d031215613bf7578788fd5b8a35995060208b0135985060408b0135975060608b0135965060808b0135613c1e816144eb565b955060a08b0135945060c08b0135613c35816144eb565b8094505060e08b013592506101008b013591506101208b013590509295989b9194979a5092959850565b6001600160a01b0391909116815260200190565b901515815260200190565b90815260200190565b918252602082015260400190565b6060810160028510613ca357fe5b938152602081019290925260409091015290565b6000602080835283518082850152825b81811015613ce357858101830151858201604001528201613cc7565b81811115613cf45783604083870101525b50601f01601f1916929092016040019392505050565b602080825260159082015274062617365206173736574206166746572206973203605c1b604082015260600190565b6020808252601590820152746d756c7469706c6965722063616e2774206265203160581b604082015260600190565b6020808252601490820152733737ba1039bab83837b93a32b21037b83a34b7b760611b604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526019908201527f63616e206e6f742073657420696e74657276616c20746f203000000000000000604082015260600190565b6020808252601a908201527f63616c6c6572206973206e6f7420636f756e7465725061727479000000000000604082015260600190565b60208082526027908201527f5065727046694f776e61626c65557067726164653a2073616d652061732063616040820152666e64696461746560c81b606082015260800190565b60208082526021908201527f5369676e6564536166654d6174683a206164646974696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252601290820152711bdd995c881d1c98591a5b99c81b1a5b5a5d60721b604082015260600190565b60208082526027908201527f5065727046694f776e61626c65557067726164653a206e6f7420746865206e656040820152663b9037bbb732b960c91b606082015260800190565b6020808252601c908201527f696c6c6567616c206c6971756964697479206d756c7469706c69657200000000604082015260600190565b6020808252600f908201526e0d2dcc6dee4e4cac6e840d2dcc8caf608b1b604082015260600190565b6020808252601f908201527f7072696365206973206f76657220666c756374756174696f6e206c696d697400604082015260600190565b60208082526021908201527f5369676e6564536166654d6174683a206469766973696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252601d908201527f4c657373207468616e206d696e696d616c2071756f746520746f6b656e000000604082015260600190565b6020808252600e908201526d185b5b481dd85cc818db1bdcd95960921b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252601c908201527f6e6f74206f776e6572206e6f7220676c6f62616c53687574646f776e00000000604082015260600190565b6020808252601c908201527f4c657373207468616e206d696e696d616c206261736520746f6b656e00000000604082015260600190565b60208082526022908201527f5065727046694f776e61626c65557067726164653a207a65726f206164647265604082015261737360f01b606082015260800190565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201526d195b881a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526027908201527f5369676e6564536166654d6174683a206d756c7469706c69636174696f6e206f604082015266766572666c6f7760c81b606082015260800190565b6020808252601d908201527f4d6f7265207468616e206d6178696d616c2071756f746520746f6b656e000000604082015260600190565b6020808252601c908201527f4d6f7265207468616e206d6178696d616c206261736520746f6b656e00000000604082015260600190565b602080825260169082015275071756f746520617373657420616674657220697320360541b604082015260600190565b60208082526018908201527f736574746c652066756e64696e6720746f6f206561726c790000000000000000604082015260600190565b6020808252600d908201526c1a5b9d985b1a59081a5b9c1d5d609a1b604082015260600190565b60208082526024908201527f5369676e6564536166654d6174683a207375627472616374696f6e206f766572604082015263666c6f7760e01b606082015260800190565b6020808252602f908201527f5065727046694f776e61626c65557067726164653a2063616e6469646174652060408201526e6973207a65726f206164647265737360881b606082015260800190565b6020808252602d908201527f5065727046694f776e61626c65557067726164653a2063616c6c65722069732060408201526c3737ba103a34329037bbb732b960991b606082015260800190565b6020808252818101527f5369676e6564536166654d6174683a206469766973696f6e206279207a65726f604082015260600190565b60208082526026908201527f5065727046694f776e61626c65557067726164653a2073616d65206173206f726040820152651a59da5b985b60d21b606082015260800190565b815151815260208083015151908201526040808301515190820152606091820151519181019190915260800190565b9051815260200190565b9151825251602082015260400190565b93518452915160208401526040830152606082015260800190565b9283526020830191909152604082015260600190565b60405181810167ffffffffffffffff811182821017156144e357600080fd5b604052919050565b6001600160a01b03811681146116ef57600080fd5b600281106116ef57600080fdfe4d69786564446563696d616c3a2075696e742076616c756520697320626967676572207468616e205f494e543235365f4d4158a2646970667358221220bb31e35d6450e8a3f97d7597b9c2327e3511b8da4088e8f658bc6ad0e2d056c864736f6c63430006090033\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Signer, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { AmmReader } from \"../AmmReader\";\n\nexport class AmmReader__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<AmmReader> {\n    return super.deploy(overrides || {}) as Promise<AmmReader>;\n  }\n  getDeployTransaction(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  attach(address: string): AmmReader {\n    return super.attach(address) as AmmReader;\n  }\n  connect(signer: Signer): AmmReader__factory {\n    return super.connect(signer) as AmmReader__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): AmmReader {\n    return new Contract(address, _abi, signerOrProvider) as AmmReader;\n  }\n}\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_amm\",\n        type: \"address\",\n      },\n    ],\n    name: \"getAmmStates\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"quoteAssetReserve\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"baseAssetReserve\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"tradeLimitRatio\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"fundingPeriod\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"string\",\n            name: \"quoteAssetSymbol\",\n            type: \"string\",\n          },\n          {\n            internalType: \"string\",\n            name: \"baseAssetSymbol\",\n            type: \"string\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"priceFeedKey\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"address\",\n            name: \"priceFeed\",\n            type: \"address\",\n          },\n        ],\n        internalType: \"struct AmmReader.AmmStates\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x608060405234801561001057600080fd5b50610863806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063e7f9871e14610030575b600080fd5b61004361003e3660046105c7565b610059565b6040516100509190610733565b60405180910390f35b61006161053e565b600082905060006060826001600160a01b031663fdf262b76040518163ffffffff1660e01b815260040160206040518083038186803b1580156100a357600080fd5b505afa1580156100b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100db9190610602565b60408051600481526024810182526020810180516001600160e01b03166395d89b4160e01b17905290516001600160a01b03929092169161011c9190610717565b600060405180830381855afa9150503d8060008114610157576040519150601f19603f3d011682016040523d82523d6000602084013e61015c565b606091505b509150915061016961058f565b61017161058f565b846001600160a01b03166359bf5d396040518163ffffffff1660e01b8152600401604080518083038186803b1580156101a957600080fd5b505afa1580156101bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101e191906106aa565b915091506000856001600160a01b03166358a4c3dc6040518163ffffffff1660e01b815260040160206040518083038186803b15801561022057600080fd5b505afa158015610234573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025891906105ea565b905060405180610100016040528061026f8561043d565b815260200161027d8461043d565b8152602001876001600160a01b0316638f40d9326040518163ffffffff1660e01b815260040160206040518083038186803b1580156102bb57600080fd5b505afa1580156102cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f391906105ea565b8152602001876001600160a01b03166374d7c62b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561033157600080fd5b505afa158015610345573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036991906105ea565b815260200186610388576040518060200160405280600081525061039c565b8580602001905181019061039c919061061e565b81526020016103aa83610441565b8152602001828152602001876001600160a01b031663741bef1a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156103ee57600080fd5b505afa158015610402573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104269190610602565b6001600160a01b0316905298975050505050505050565b5190565b606060005b60208160ff161080156104745750828160ff166020811061046357fe5b1a60f81b6001600160f81b03191615155b1561048157600101610446565b60608160ff1667ffffffffffffffff8111801561049d57600080fd5b506040519080825280601f01601f1916602001820160405280156104c8576020820181803683370190505b50905060005b6020811080156104f657508481602081106104e557fe5b1a60f81b6001600160f81b03191615155b156105365784816020811061050757fe5b1a60f81b82828151811061051757fe5b60200101906001600160f81b031916908160001a9053506001016104ce565b509392505050565b6040518061010001604052806000815260200160008152602001600081526020016000815260200160608152602001606081526020016000801916815260200160006001600160a01b031681525090565b6040518060200160405280600081525090565b6000602082840312156105b3578081fd5b6105bd60206107be565b9151825250919050565b6000602082840312156105d8578081fd5b81356105e381610815565b9392505050565b6000602082840312156105fb578081fd5b5051919050565b600060208284031215610613578081fd5b81516105e381610815565b60006020828403121561062f578081fd5b815167ffffffffffffffff80821115610646578283fd5b81840185601f820112610657578384fd5b8051925081831115610667578384fd5b61067a601f8401601f19166020016107be565b9150828252856020848301011115610690578384fd5b6106a18360208401602084016107e5565b50949350505050565b600080604083850312156106bc578081fd5b6106c684846105a2565b91506106d584602085016105a2565b90509250929050565b6001600160a01b03169052565b600081518084526107038160208601602086016107e5565b601f01601f19169290920160200192915050565b600082516107298184602087016107e5565b9190910192915050565b6000602082528251602083015260208301516040830152604083015160608301526060830151608083015260808301516101008060a085015261077a6101208501836106eb565b60a0860151858203601f190160c0870152925061079781846106eb565b60c087015160e087015260e087015193506107b4838701856106de565b9695505050505050565b60405181810167ffffffffffffffff811182821017156107dd57600080fd5b604052919050565b60005b838110156108005781810151838201526020016107e8565b8381111561080f576000848401525b50505050565b6001600160a01b038116811461082a57600080fd5b5056fea2646970667358221220f68289199e0a816db9ac1b5c8da5eabdf19066110d62b898b64615af40a0e93d64736f6c63430006090033\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Signer, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { RootBridge } from \"../RootBridge\";\n\nexport class RootBridge__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<RootBridge> {\n    return super.deploy(overrides || {}) as Promise<RootBridge>;\n  }\n  getDeployTransaction(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  attach(address: string): RootBridge {\n    return super.attach(address) as RootBridge;\n  }\n  connect(signer: Signer): RootBridge__factory {\n    return super.connect(signer) as RootBridge__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): RootBridge {\n    return new Contract(address, _abi, signerOrProvider) as RootBridge;\n  }\n}\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"bridge\",\n        type: \"address\",\n      },\n    ],\n    name: \"BridgeChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"mediator\",\n        type: \"address\",\n      },\n    ],\n    name: \"MultiTokenMediatorChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"receiver\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Relayed\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"DEFAULT_GAS_LIMIT\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"ambBridge\",\n    outputs: [\n      {\n        internalType: \"contract IAMB\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"candidate\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"_token\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_receiver\",\n        type: \"address\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_amount\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"erc20Transfer\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IAMB\",\n        name: \"_ambBridge\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract IMultiTokenMediator\",\n        name: \"_multiTokenMediator\",\n        type: \"address\",\n      },\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"multiTokenMediator\",\n    outputs: [\n      {\n        internalType: \"contract IMultiTokenMediator\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"priceFeed\",\n    outputs: [\n      {\n        internalType: \"contract IPriceFeed\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IAMB\",\n        name: \"_ambBridge\",\n        type: \"address\",\n      },\n    ],\n    name: \"setAMBBridge\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IMultiTokenMediator\",\n        name: \"_multiTokenMediator\",\n        type: \"address\",\n      },\n    ],\n    name: \"setMultiTokenMediator\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"setOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_priceFeed\",\n        type: \"address\",\n      },\n    ],\n    name: \"setPriceFeed\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"updateOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_priceFeedAddrOnL2\",\n        type: \"address\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"_priceFeedKey\",\n        type: \"bytes32\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_price\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_timestamp\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_roundId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"updatePriceFeed\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"messageId\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x608060405234801561001057600080fd5b50611ab6806100206000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c8063715018a61161009757806399906bb81161006657806399906bb8146101ae578063bc5920ba146101c1578063d6be695a146101c9578063f14cedb5146101d1576100f5565b8063715018a614610183578063724e78da1461018b578063741bef1a1461019e5780638da5cb5b146101a6576100f5565b8063485cc955116100d3578063485cc955146101405780635f4607f41461015357806368981a3a146101735780636c8381f81461017b576100f5565b80630ba54df6146100fa57806313af40351461011857806328e593b31461012d575b600080fd5b6101026101e4565b60405161010f9190611555565b60405180910390f35b61012b6101263660046113ad565b6101f3565b005b61012b61013b3660046113ad565b6102d5565b61012b61014e366004611451565b610386565b6101666101613660046113c9565b610415565b60405161010f91906115f4565b6101026104d3565b6101026104e2565b61012b6104f1565b61012b6101993660046113ad565b610570565b6101026105c8565b6101026105d8565b61012b6101bc3660046113ad565b6105e7565b61012b61068d565b610166610750565b61012b6101df366004611489565b610757565b60cc546001600160a01b031681565b6101fb6107a1565b6065546001600160a01b039081169116146102315760405162461bcd60e51b8152600401610228906119ac565b60405180910390fd5b6001600160a01b0381166102575760405162461bcd60e51b81526004016102289061182a565b6065546001600160a01b03828116911614156102855760405162461bcd60e51b8152600401610228906119f9565b6066546001600160a01b03828116911614156102b35760405162461bcd60e51b8152600401610228906116ae565b606680546001600160a01b0319166001600160a01b0392909216919091179055565b6102dd6107a1565b6065546001600160a01b0390811691161461030a5760405162461bcd60e51b8152600401610228906119ac565b6001600160a01b0381166103305760405162461bcd60e51b815260040161022890611933565b60cd80546001600160a01b0319166001600160a01b0383161790556040517f1a2cd2eddd780a8ee5c9e81ca85d720eaea5593ae88725bf85d06a13651076da9061037b908390611555565b60405180910390a150565b600054610100900460ff168061039f575061039f6107a5565b806103ad575060005460ff16155b6103c95760405162461bcd60e51b81526004016102289061186c565b600054610100900460ff161580156103f4576000805460ff1961ff0019909116610100171660011790555b6103fe83836107ab565b8015610410576000805461ff00191690555b505050565b600061041f6107a1565b610100546001600160a01b0390811691161461044d5760405162461bcd60e51b81526004016102289061162b565b63031d64bd60e01b6060818761047061046b368a90038a018a6114d0565b610833565b878760405160240161048594939291906115fd565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915290506104c78882621e8480610837565b98975050505050505050565b60cd546001600160a01b031681565b6066546001600160a01b031690565b6104f96107a1565b6065546001600160a01b039081169116146105265760405162461bcd60e51b8152600401610228906119ac565b6065546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3606580546001600160a01b0319169055565b6105786107a1565b6065546001600160a01b039081169116146105a55760405162461bcd60e51b8152600401610228906119ac565b61010080546001600160a01b0319166001600160a01b0392909216919091179055565b610100546001600160a01b031681565b6065546001600160a01b031690565b6105ef6107a1565b6065546001600160a01b0390811691161461061c5760405162461bcd60e51b8152600401610228906119ac565b6001600160a01b0381166106425760405162461bcd60e51b815260040161022890611933565b60cc80546001600160a01b0319166001600160a01b0383161790556040517f9775531310b2880b61484ed85cbb0b491c8fde3a07f289c63b925517827944979061037b908390611555565b6066546001600160a01b03166106b55760405162461bcd60e51b81526004016102289061195d565b6106bd6107a1565b6066546001600160a01b039081169116146106ea5760405162461bcd60e51b8152600401610228906116f5565b6066546065546040516001600160a01b0392831692909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360668054606580546001600160a01b03199081166001600160a01b03841617909155169055565b621e848081565b600061076b61046b368490038401846114d0565b116107885760405162461bcd60e51b81526004016102289061164f565b610410838361079c368590038501856114d0565b6108c6565b3390565b303b1590565b600054610100900460ff16806107c457506107c46107a5565b806107d2575060005460ff16155b6107ee5760405162461bcd60e51b81526004016102289061186c565b600054610100900460ff16158015610819576000805460ff1961ff0019909116610100171660011790555b6108216109bd565b61082a836105e7565b6103fe826102d5565b5190565b60cc5460405163dc8601b360e01b81526000916001600160a01b03169063dc8601b39061086c908790879087906004016115a7565b602060405180830381600087803b15801561088657600080fd5b505af115801561089a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108be9190611439565b949350505050565b6001600160a01b0382166108ec5760405162461bcd60e51b8152600401610228906117be565b6108ff836108f86107a1565b3084610a50565b61090883610b82565b60cd546001600160a01b031663ad58bdd184846109258286610bd2565b6040518463ffffffff1660e01b815260040161094393929190611583565b600060405180830381600087803b15801561095d57600080fd5b505af1158015610971573d6000803e3d6000fd5b505050507fe73f30d9b99f199332a0afe04f29e59839c1538ebcf0d632c0e8c4c07f319c9083836109a184610833565b6040516109b093929190611583565b60405180910390a1505050565b600054610100900460ff16806109d657506109d66107a5565b806109e4575060005460ff16155b610a005760405162461bcd60e51b81526004016102289061186c565b600054610100900460ff16158015610a2b576000805460ff1961ff0019909116610100171660011790555b610a33610c52565b610a3b610cd3565b8015610a4d576000805461ff00191690555b50565b610a5984610dad565b610a61611383565b610a6b8584610dfa565b90506000610a798684610bd2565b905060006060876001600160a01b03166323b872dd60e01b888886604051602401610aa693929190611583565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051610ae49190611539565b6000604051808303816000865af19150503d8060008114610b21576040519150601f19603f3d011682016040523d82523d6000602084013e610b26565b606091505b5091509150818015610b50575080511580610b50575080806020019051810190610b509190611419565b610b6c5760405162461bcd60e51b81526004016102289061177d565b610b7888878587610e8e565b5050505050505050565b60cd5460001990610ba39061046b90849030906001600160a01b0316610ee7565b14610a4d5760cd5460408051602081019091526000198152610a4d9183916001600160a01b0390911690610f21565b600080610bde84610f47565b905060128110610c1c57610c14610bfc82601263ffffffff61103416565b600a0a610c0885610833565b9063ffffffff61107616565b915050610c4c565b610c48610c3060128363ffffffff61103416565b600a0a610c3c85610833565b9063ffffffff6110b016565b9150505b92915050565b600054610100900460ff1680610c6b5750610c6b6107a5565b80610c79575060005460ff16155b610c955760405162461bcd60e51b81526004016102289061186c565b600054610100900460ff16158015610a3b576000805460ff1961ff0019909116610100171660011790558015610a4d576000805461ff001916905550565b600054610100900460ff1680610cec5750610cec6107a5565b80610cfa575060005460ff16155b610d165760405162461bcd60e51b81526004016102289061186c565b600054610100900460ff16158015610d41576000805460ff1961ff0019909116610100171660011790555b6000610d4b6107a1565b606580546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015610a4d576000805461ff001916905550565b6000610db882610f47565b6001600160a01b0383166000908152609960205260409020549091508114610df6576001600160a01b03821660009081526099602052604090208190555b5050565b610e02611383565b610e8783846001600160a01b03166370a08231856040518263ffffffff1660e01b8152600401610e329190611555565b60206040518083038186803b158015610e4a57600080fd5b505afa158015610e5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e829190611439565b6110f2565b9392505050565b610ec1610eab610e9e86856110f2565b839063ffffffff61118416565b610eb58686610dfa565b9063ffffffff6111b016565b60000b15610ee15760405162461bcd60e51b8152600401610228906118f1565b50505050565b610eef611383565b6108be84856001600160a01b031663dd62ed3e86866040518363ffffffff1660e01b8152600401610e32929190611569565b610f2a83610dad565b610f3c8383610f376111e1565b6111fc565b6104108383836111fc565b6001600160a01b03811660009081526099602052604081205480610c4c5760408051600481526024810182526020810180516001600160e01b031663313ce56760e01b17905290516000916060916001600160a01b03871691610fa991611539565b600060405180830381855afa9150503d8060008114610fe4576040519150601f19603f3d011682016040523d82523d6000602084013e610fe9565b606091505b5091509150818015610ffb5750805115155b6110175760405162461bcd60e51b81526004016102289061173c565b8080602001905181019061102b9190611439565b95945050505050565b6000610e8783836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506112fb565b60008261108557506000610c4c565b8282028284828161109257fe5b0414610e875760405162461bcd60e51b8152600401610228906117e9565b6000610e8783836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611327565b6110fa611383565b600061110584610f47565b90506012811061114a5760408051602081019091528061113f61112f84601263ffffffff61103416565b8690600a0a63ffffffff6110b016565b815250915050610c4c565b60408051602081019091528061117a61116a60128563ffffffff61103416565b8690600a0a63ffffffff61107616565b9052949350505050565b61118c611383565b611194611383565b825184516111a79163ffffffff61135e16565b81529392505050565b8051825160009110156111c557506001610c4c565b8151835110156111d85750600019610c4c565b50600092915050565b6111e9611383565b5060408051602081019091526000815290565b600060606001600160a01b03851663095ea7b360e01b8561121d8887610bd2565b60405160240161122e9291906115db565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161126c9190611539565b6000604051808303816000865af19150503d80600081146112a9576040519150601f19603f3d011682016040523d82523d6000602084013e6112ae565b606091505b50915091508180156112d85750805115806112d85750808060200190518101906112d89190611419565b6112f45760405162461bcd60e51b8152600401610228906118ba565b5050505050565b6000818484111561131f5760405162461bcd60e51b81526004016102289190611618565b505050900390565b600081836113485760405162461bcd60e51b81526004016102289190611618565b50600083858161135457fe5b0495945050505050565b600082820183811015610e875760405162461bcd60e51b815260040161022890611677565b6040518060200160405280600081525090565b6000602082840312156113a7578081fd5b50919050565b6000602082840312156113be578081fd5b8135610e8781611a6b565b600080600080600060a086880312156113e0578081fd5b85356113eb81611a6b565b9450602086013593506114018760408801611396565b94979396509394606081013594506080013592915050565b60006020828403121561142a578081fd5b81518015158114610e87578182fd5b60006020828403121561144a578081fd5b5051919050565b60008060408385031215611463578182fd5b823561146e81611a6b565b9150602083013561147e81611a6b565b809150509250929050565b60008060006060848603121561149d578283fd5b83356114a881611a6b565b925060208401356114b881611a6b565b91506114c78560408601611396565b90509250925092565b6000602082840312156114e1578081fd5b6040516020810181811067ffffffffffffffff82111715611500578283fd5b6040529135825250919050565b60008151808452611525816020860160208601611a3f565b601f01601f19169290920160200192915050565b6000825161154b818460208701611a3f565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03841681526060602082018190526000906115cb9083018561150d565b9050826040830152949350505050565b6001600160a01b03929092168252602082015260400190565b90815260200190565b93845260208401929092526040830152606082015260800190565b600060208252610e87602083018461150d565b6020808252600a9082015269085c1c9a58d95199595960b21b604082015260600190565b6020808252600e908201526d616d6f756e74206973207a65726f60901b604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526027908201527f5065727046694f776e61626c65557067726164653a2073616d652061732063616040820152666e64696461746560c81b606082015260800190565b60208082526027908201527f5065727046694f776e61626c65557067726164653a206e6f7420746865206e656040820152663b9037bbb732b960c91b606082015260800190565b60208082526021908201527f446563696d616c45524332303a2067657420646563696d616c73206661696c656040820152601960fa1b606082015260800190565b60208082526021908201527f446563696d616c45524332303a207472616e7366657246726f6d206661696c656040820152601960fa1b606082015260800190565b602080825260119082015270726563656976657220697320656d70747960781b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b60208082526022908201527f5065727046694f776e61626c65557067726164653a207a65726f206164647265604082015261737360f01b606082015260800190565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201526d195b881a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252601c908201527f446563696d616c45524332303a20617070726f7665206661696c656400000000604082015260600190565b60208082526022908201527f446563696d616c45524332303a2062616c616e636520696e636f6e73697374656040820152611b9d60f21b606082015260800190565b60208082526010908201526f6164647265737320697320656d70747960801b604082015260600190565b6020808252602f908201527f5065727046694f776e61626c65557067726164653a2063616e6469646174652060408201526e6973207a65726f206164647265737360881b606082015260800190565b6020808252602d908201527f5065727046694f776e61626c65557067726164653a2063616c6c65722069732060408201526c3737ba103a34329037bbb732b960991b606082015260800190565b60208082526026908201527f5065727046694f776e61626c65557067726164653a2073616d65206173206f726040820152651a59da5b985b60d21b606082015260800190565b60005b83811015611a5a578181015183820152602001611a42565b83811115610ee15750506000910152565b6001600160a01b0381168114610a4d57600080fdfea26469706673582212204265a316f5ff8c548251f305929b991dcd61d1cf2c2753bf297713095e9f24cf64736f6c63430006090033\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Signer, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { ClientBridge } from \"../ClientBridge\";\n\nexport class ClientBridge__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<ClientBridge> {\n    return super.deploy(overrides || {}) as Promise<ClientBridge>;\n  }\n  getDeployTransaction(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  attach(address: string): ClientBridge {\n    return super.attach(address) as ClientBridge;\n  }\n  connect(signer: Signer): ClientBridge__factory {\n    return super.connect(signer) as ClientBridge__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): ClientBridge {\n    return new Contract(address, _abi, signerOrProvider) as ClientBridge;\n  }\n}\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"bridge\",\n        type: \"address\",\n      },\n    ],\n    name: \"BridgeChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"mediator\",\n        type: \"address\",\n      },\n    ],\n    name: \"MultiTokenMediatorChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"receiver\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Relayed\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"ambBridge\",\n    outputs: [\n      {\n        internalType: \"contract IAMB\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"candidate\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"_token\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_receiver\",\n        type: \"address\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_amount\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"erc20Transfer\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IAMB\",\n        name: \"_ambBridge\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract IMultiTokenMediator\",\n        name: \"_multiTokenMediator\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_trustedForwarder\",\n        type: \"address\",\n      },\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"forwarder\",\n        type: \"address\",\n      },\n    ],\n    name: \"isTrustedForwarder\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"minWithdrawalAmountMap\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"d\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"multiTokenMediator\",\n    outputs: [\n      {\n        internalType: \"contract IMultiTokenMediator\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IAMB\",\n        name: \"_ambBridge\",\n        type: \"address\",\n      },\n    ],\n    name: \"setAMBBridge\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"_token\",\n        type: \"address\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_amount\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"setMinWithdrawalAmount\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IMultiTokenMediator\",\n        name: \"_multiTokenMediator\",\n        type: \"address\",\n      },\n    ],\n    name: \"setMultiTokenMediator\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"setOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"trustedForwarder\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"updateOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"versionRecipient\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x608060405234801561001057600080fd5b50611baa806100206000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80637da0a87711610097578063bc5920ba11610066578063bc5920ba146101ce578063c0c53b8b146101d6578063e9eac3d8146101e9578063f14cedb51461020957610100565b80637da0a877146101985780638da5cb5b146101a057806399906bb8146101a8578063ba99309e146101bb57610100565b8063572b6c05116100d3578063572b6c051461016057806368981a3a146101805780636c8381f814610188578063715018a61461019057610100565b80630ba54df61461010557806313af40351461012357806328e593b314610138578063486ff0cd1461014b575b600080fd5b61010d61021c565b60405161011a9190611664565b60405180910390f35b610136610131366004611509565b61022b565b005b610136610146366004611509565b61030d565b6101536103be565b60405161011a91906116da565b61017361016e366004611509565b61044d565b60405161011a91906116cf565b61010d610462565b61010d610471565b610136610481565b61010d610500565b61010d610510565b6101366101b6366004611509565b61051f565b6101366101c93660046115e0565b6105c5565b61013661061a565b6101366101e4366004611545565b6106dd565b6101fc6101f7366004611509565b6107b7565b60405161011a9190611b2a565b61013661021736600461158f565b6107ca565b60cc546001600160a01b031681565b61023361081e565b6065546001600160a01b039081169116146102695760405162461bcd60e51b815260040161026090611a97565b60405180910390fd5b6001600160a01b03811661028f5760405162461bcd60e51b815260040161026090611915565b6065546001600160a01b03828116911614156102bd5760405162461bcd60e51b815260040161026090611ae4565b6066546001600160a01b03828116911614156102eb5760405162461bcd60e51b81526004016102609061176c565b606680546001600160a01b0319166001600160a01b0392909216919091179055565b61031561081e565b6065546001600160a01b039081169116146103425760405162461bcd60e51b815260040161026090611a97565b6001600160a01b0381166103685760405162461bcd60e51b815260040161026090611a1e565b60cd80546001600160a01b0319166001600160a01b0383161790556040517f1a2cd2eddd780a8ee5c9e81ca85d720eaea5593ae88725bf85d06a13651076da906103b3908390611664565b60405180910390a150565b610101805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104455780601f1061041a57610100808354040283529160200191610445565b820191906000526020600020905b81548152906001019060200180831161042857829003601f168201915b505050505081565b610100546001600160a01b0390811691161490565b60cd546001600160a01b031681565b6066546001600160a01b03165b90565b61048961081e565b6065546001600160a01b039081169116146104b65760405162461bcd60e51b815260040161026090611a97565b6065546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3606580546001600160a01b0319169055565b610100546001600160a01b031681565b6065546001600160a01b031690565b61052761081e565b6065546001600160a01b039081169116146105545760405162461bcd60e51b815260040161026090611a97565b6001600160a01b03811661057a5760405162461bcd60e51b815260040161026090611a1e565b60cc80546001600160a01b0319166001600160a01b0383161790556040517f9775531310b2880b61484ed85cbb0b491c8fde3a07f289c63b92551782794497906103b3908390611664565b6105cd61081e565b6065546001600160a01b039081169116146105fa5760405162461bcd60e51b815260040161026090611a97565b6001600160a01b0390911660009081526101026020526040902090519055565b6066546001600160a01b03166106425760405162461bcd60e51b815260040161026090611a48565b61064a61081e565b6066546001600160a01b039081169116146106775760405162461bcd60e51b8152600401610260906117e0565b6066546065546040516001600160a01b0392831692909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360668054606580546001600160a01b03199081166001600160a01b03841617909155169055565b600054610100900460ff16806106f657506106f661082d565b80610704575060005460ff16155b6107205760405162461bcd60e51b815260040161026090611957565b600054610100900460ff1615801561074b576000805460ff1961ff0019909116610100171660011790555b6107558484610833565b61010080546001600160a01b0319166001600160a01b038416179055604080518082019091526005808252640312e302e360dc1b602090920191825261079e9161010191611421565b5080156107b1576000805461ff00191690555b50505050565b6101026020526000908152604090205481565b60006107e36107de36849003840184611615565b6108d1565b116108005760405162461bcd60e51b81526004016102609061170d565b610819838361081436859003850185611615565b6108d5565b505050565b6000610828610939565b905090565b303b1590565b600054610100900460ff168061084c575061084c61082d565b8061085a575060005460ff16155b6108765760405162461bcd60e51b815260040161026090611957565b600054610100900460ff161580156108a1576000805460ff1961ff0019909116610100171660011790555b6108a961096b565b6108b28361051f565b6108bb8261030d565b8015610819576000805461ff0019169055505050565b5190565b6001600160a01b038316600090815261010260209081526040808320815192830190915254815261090d90839063ffffffff6109fe16565b60000b121561092e5760405162461bcd60e51b8152600401610260906117b3565b610819838383610a30565b60006018361080159061095057506109503361044d565b15610964575060131936013560601c61047e565b503361047e565b600054610100900460ff1680610984575061098461082d565b80610992575060005460ff16155b6109ae5760405162461bcd60e51b815260040161026090611957565b600054610100900460ff161580156109d9576000805460ff1961ff0019909116610100171660011790555b6109e1610b27565b6109e9610ba8565b80156109fb576000805461ff00191690555b50565b805182516000911015610a1357506001610a2a565b815183511015610a265750600019610a2a565b5060005b92915050565b6001600160a01b038216610a565760405162461bcd60e51b8152600401610260906118a9565b610a6983610a6261081e565b3084610c82565b610a7283610db4565b60cd546001600160a01b031663ad58bdd18484610a8f8286610e04565b6040518463ffffffff1660e01b8152600401610aad93929190611692565b600060405180830381600087803b158015610ac757600080fd5b505af1158015610adb573d6000803e3d6000fd5b505050507fe73f30d9b99f199332a0afe04f29e59839c1538ebcf0d632c0e8c4c07f319c908383610b0b846108d1565b604051610b1a93929190611692565b60405180910390a1505050565b600054610100900460ff1680610b405750610b4061082d565b80610b4e575060005460ff16155b610b6a5760405162461bcd60e51b815260040161026090611957565b600054610100900460ff161580156109e9576000805460ff1961ff00199091166101001716600117905580156109fb576000805461ff001916905550565b600054610100900460ff1680610bc15750610bc161082d565b80610bcf575060005460ff16155b610beb5760405162461bcd60e51b815260040161026090611957565b600054610100900460ff16158015610c16576000805460ff1961ff0019909116610100171660011790555b6000610c2061081e565b606580546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35080156109fb576000805461ff001916905550565b610c8b84610e82565b610c9361149f565b610c9d8584610ecf565b90506000610cab8684610e04565b905060006060876001600160a01b03166323b872dd60e01b888886604051602401610cd893929190611692565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051610d169190611648565b6000604051808303816000865af19150503d8060008114610d53576040519150601f19603f3d011682016040523d82523d6000602084013e610d58565b606091505b5091509150818015610d82575080511580610d82575080806020019051810190610d829190611525565b610d9e5760405162461bcd60e51b815260040161026090611868565b610daa88878587610f63565b5050505050505050565b60cd5460001990610dd5906107de90849030906001600160a01b0316610fb6565b146109fb5760cd54604080516020810190915260001981526109fb9183916001600160a01b0390911690610ff0565b600080610e1084611016565b905060128110610e4e57610e46610e2e82601263ffffffff61110316565b600a0a610e3a856108d1565b9063ffffffff61114516565b915050610a2a565b610e7a610e6260128363ffffffff61110316565b600a0a610e6e856108d1565b9063ffffffff61117f16565b949350505050565b6000610e8d82611016565b6001600160a01b0383166000908152609960205260409020549091508114610ecb576001600160a01b03821660009081526099602052604090208190555b5050565b610ed761149f565b610f5c83846001600160a01b03166370a08231856040518263ffffffff1660e01b8152600401610f079190611664565b60206040518083038186803b158015610f1f57600080fd5b505afa158015610f33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f579190611630565b6111c1565b9392505050565b610f96610f80610f7386856111c1565b839063ffffffff61125316565b610f8a8686610ecf565b9063ffffffff6109fe16565b60000b156107b15760405162461bcd60e51b8152600401610260906119dc565b610fbe61149f565b610e7a84856001600160a01b031663dd62ed3e86866040518363ffffffff1660e01b8152600401610f07929190611678565b610ff983610e82565b61100b838361100661127f565b61129a565b61081983838361129a565b6001600160a01b03811660009081526099602052604081205480610a2a5760408051600481526024810182526020810180516001600160e01b031663313ce56760e01b17905290516000916060916001600160a01b0387169161107891611648565b600060405180830381855afa9150503d80600081146110b3576040519150601f19603f3d011682016040523d82523d6000602084013e6110b8565b606091505b50915091508180156110ca5750805115155b6110e65760405162461bcd60e51b815260040161026090611827565b808060200190518101906110fa9190611630565b95945050505050565b6000610f5c83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611399565b60008261115457506000610a2a565b8282028284828161116157fe5b0414610f5c5760405162461bcd60e51b8152600401610260906118d4565b6000610f5c83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506113c5565b6111c961149f565b60006111d484611016565b9050601281106112195760408051602081019091528061120e6111fe84601263ffffffff61110316565b8690600a0a63ffffffff61117f16565b815250915050610a2a565b60408051602081019091528061124961123960128563ffffffff61110316565b8690600a0a63ffffffff61114516565b9052949350505050565b61125b61149f565b61126361149f565b825184516112769163ffffffff6113fc16565b81529392505050565b61128761149f565b5060408051602081019091526000815290565b600060606001600160a01b03851663095ea7b360e01b856112bb8887610e04565b6040516024016112cc9291906116b6565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161130a9190611648565b6000604051808303816000865af19150503d8060008114611347576040519150601f19603f3d011682016040523d82523d6000602084013e61134c565b606091505b50915091508180156113765750805115806113765750808060200190518101906113769190611525565b6113925760405162461bcd60e51b8152600401610260906119a5565b5050505050565b600081848411156113bd5760405162461bcd60e51b815260040161026091906116da565b505050900390565b600081836113e65760405162461bcd60e51b815260040161026091906116da565b5060008385816113f257fe5b0495945050505050565b600082820183811015610f5c5760405162461bcd60e51b815260040161026090611735565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061146257805160ff191683800117855561148f565b8280016001018555821561148f579182015b8281111561148f578251825591602001919060010190611474565b5061149b9291506114b2565b5090565b6040518060200160405280600081525090565b61047e91905b8082111561149b57600081556001016114b8565b6000602082840312156114dd578081fd5b6040516020810181811067ffffffffffffffff821117156114fc578283fd5b6040529135825250919050565b60006020828403121561151a578081fd5b8135610f5c81611b5f565b600060208284031215611536578081fd5b81518015158114610f5c578182fd5b600080600060608486031215611559578182fd5b833561156481611b5f565b9250602084013561157481611b5f565b9150604084013561158481611b5f565b809150509250925092565b600080600083850360608112156115a4578384fd5b84356115af81611b5f565b935060208501356115bf81611b5f565b92506020603f19820112156115d2578182fd5b506040840190509250925092565b600080604083850312156115f2578182fd5b82356115fd81611b5f565b915061160c84602085016114cc565b90509250929050565b600060208284031215611626578081fd5b610f5c83836114cc565b600060208284031215611641578081fd5b5051919050565b6000825161165a818460208701611b33565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b60006020825282518060208401526116f9816040850160208701611b33565b601f01601f19169190910160400192915050565b6020808252600e908201526d616d6f756e74206973207a65726f60901b604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526027908201527f5065727046694f776e61626c65557067726164653a2073616d652061732063616040820152666e64696461746560c81b606082015260800190565b602080825260139082015272185b5bdd5b9d081a5cc81d1bdbc81cdb585b1b606a1b604082015260600190565b60208082526027908201527f5065727046694f776e61626c65557067726164653a206e6f7420746865206e656040820152663b9037bbb732b960c91b606082015260800190565b60208082526021908201527f446563696d616c45524332303a2067657420646563696d616c73206661696c656040820152601960fa1b606082015260800190565b60208082526021908201527f446563696d616c45524332303a207472616e7366657246726f6d206661696c656040820152601960fa1b606082015260800190565b602080825260119082015270726563656976657220697320656d70747960781b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b60208082526022908201527f5065727046694f776e61626c65557067726164653a207a65726f206164647265604082015261737360f01b606082015260800190565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201526d195b881a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252601c908201527f446563696d616c45524332303a20617070726f7665206661696c656400000000604082015260600190565b60208082526022908201527f446563696d616c45524332303a2062616c616e636520696e636f6e73697374656040820152611b9d60f21b606082015260800190565b60208082526010908201526f6164647265737320697320656d70747960801b604082015260600190565b6020808252602f908201527f5065727046694f776e61626c65557067726164653a2063616e6469646174652060408201526e6973207a65726f206164647265737360881b606082015260800190565b6020808252602d908201527f5065727046694f776e61626c65557067726164653a2063616c6c65722069732060408201526c3737ba103a34329037bbb732b960991b606082015260800190565b60208082526026908201527f5065727046694f776e61626c65557067726164653a2073616d65206173206f726040820152651a59da5b985b60d21b606082015260800190565b90815260200190565b60005b83811015611b4e578181015183820152602001611b36565b838111156107b15750506000910152565b6001600160a01b03811681146109fb57600080fdfea26469706673582212200342dc2a58b300c7fd7c99b095b54fbf8bec4bcd692ce60949c6a1dd7677f35464736f6c63430006090033\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Signer, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { ChainlinkL1 } from \"../ChainlinkL1\";\n\nexport class ChainlinkL1__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<ChainlinkL1> {\n    return super.deploy(overrides || {}) as Promise<ChainlinkL1>;\n  }\n  getDeployTransaction(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  attach(address: string): ChainlinkL1 {\n    return super.attach(address) as ChainlinkL1;\n  }\n  connect(signer: Signer): ChainlinkL1__factory {\n    return super.connect(signer) as ChainlinkL1__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): ChainlinkL1 {\n    return new Contract(address, _abi, signerOrProvider) as ChainlinkL1;\n  }\n}\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"priceFeedL2\",\n        type: \"address\",\n      },\n    ],\n    name: \"PriceFeedL2Changed\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"bytes32\",\n        name: \"messageId\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"PriceUpdateMessageIdSent\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint80\",\n        name: \"roundId\",\n        type: \"uint80\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"price\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"timestamp\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"PriceUpdated\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"rootBridge\",\n        type: \"address\",\n      },\n    ],\n    name: \"RootBridgeChanged\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_priceFeedKey\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_aggregator\",\n        type: \"address\",\n      },\n    ],\n    name: \"addAggregator\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"candidate\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_priceFeedKey\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"getAggregator\",\n    outputs: [\n      {\n        internalType: \"contract AggregatorV3Interface\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_rootBridge\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_priceFeedL2\",\n        type: \"address\",\n      },\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"prevTimestampMap\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"priceFeedKeys\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"priceFeedL2Address\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"priceFeedMap\",\n    outputs: [\n      {\n        internalType: \"contract AggregatorV3Interface\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_priceFeedKey\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"removeAggregator\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"rootBridge\",\n    outputs: [\n      {\n        internalType: \"contract RootBridge\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"setOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_priceFeedL2\",\n        type: \"address\",\n      },\n    ],\n    name: \"setPriceFeedL2\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_rootBridge\",\n        type: \"address\",\n      },\n    ],\n    name: \"setRootBridge\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_priceFeedKey\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"updateLatestRoundData\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"updateOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Signer, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { ChainlinkPriceFeed } from \"../ChainlinkPriceFeed\";\n\nexport class ChainlinkPriceFeed__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<ChainlinkPriceFeed> {\n    return super.deploy(overrides || {}) as Promise<ChainlinkPriceFeed>;\n  }\n  getDeployTransaction(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  attach(address: string): ChainlinkPriceFeed {\n    return super.attach(address) as ChainlinkPriceFeed;\n  }\n  connect(signer: Signer): ChainlinkPriceFeed__factory {\n    return super.connect(signer) as ChainlinkPriceFeed__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): ChainlinkPriceFeed {\n    return new Contract(address, _abi, signerOrProvider) as ChainlinkPriceFeed;\n  }\n}\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_priceFeedKey\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_aggregator\",\n        type: \"address\",\n      },\n    ],\n    name: \"addAggregator\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"candidate\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_priceFeedKey\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"getAggregator\",\n    outputs: [\n      {\n        internalType: \"contract AggregatorV3Interface\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_priceFeedKey\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"getLatestTimestamp\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_priceFeedKey\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_numOfRoundBack\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getPreviousPrice\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_priceFeedKey\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_numOfRoundBack\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getPreviousTimestamp\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_priceFeedKey\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"getPrice\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_priceFeedKey\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_interval\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getTwapPrice\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"priceFeedDecimalMap\",\n    outputs: [\n      {\n        internalType: \"uint8\",\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"priceFeedKeys\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"priceFeedMap\",\n    outputs: [\n      {\n        internalType: \"contract AggregatorV3Interface\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_priceFeedKey\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"removeAggregator\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_priceFeedKey\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_price\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_timestamp\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_roundId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"setLatestData\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"setOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"updateOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x608060405234801561001057600080fd5b50611873806100206000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c80636c8381f8116100a25780638129fc1c116100715780638129fc1c1461022e5780638da5cb5b14610236578063914b14c51461023e578063a2173df414610251578063bc5920ba1461026457610116565b80636c8381f8146101eb5780636d4b8585146101f3578063715018a6146102135780637ad226321461021b57610116565b80632bed9e0c116100e95780632bed9e0c1461018c57806331d98b3f1461019f578063331b1816146101b25780633f0e084f146101c557806359bb180e146101d857610116565b8063031d64bd1461011b57806313af403514610130578063250742cc146101435780632a0ab1dd1461016c575b600080fd5b61012e6101293660046113c3565b61026c565b005b61012e61013e366004611329565b61028d565b610156610151366004611350565b610366565b6040516101639190611466565b60405180910390f35b61017f61017a366004611350565b610381565b604051610163919061147a565b61012e61019a366004611350565b61039f565b61017f6101ad366004611350565b6104b1565b6101566101c0366004611350565b6104fd565b61012e6101d3366004611368565b610518565b61017f6101e63660046113a2565b610664565b6101566107cf565b610206610201366004611350565b6107de565b604051610163919061182f565b61012e6107f3565b61017f610229366004611350565b610872565b61012e61089e565b610156610929565b61017f61024c3660046113a2565b610938565b61017f61025f3660046113a2565b610ab3565b61012e610c83565b60405162461bcd60e51b8152600401610284906114fe565b60405180910390fd5b610295610d46565b6065546001600160a01b039081169116146102c25760405162461bcd60e51b81526004016102849061172f565b6001600160a01b0381166102e85760405162461bcd60e51b815260040161028490611650565b6065546001600160a01b03828116911614156103165760405162461bcd60e51b8152600401610284906117d5565b6066546001600160a01b03828116911614156103445760405162461bcd60e51b81526004016102849061155a565b606680546001600160a01b0319166001600160a01b0392909216919091179055565b60cb602052600090815260409020546001600160a01b031681565b60cc818154811061038e57fe5b600091825260209091200154905081565b6103a7610d46565b6065546001600160a01b039081169116146103d45760405162461bcd60e51b81526004016102849061172f565b6103e56103e0826104fd565b610d4a565b600081815260cb6020908152604080832080546001600160a01b031916905560cd9091528120805460ff1916905560cc54905b818110156104ac578260cc828154811061042e57fe5b906000526020600020015414156104a45760018203811461047e5760cc600183038154811061045957fe5b906000526020600020015460cc828154811061047157fe5b6000918252602090912001555b60cc80548061048957fe5b600190038181906000526020600020016000905590556104ac565b600101610418565b505050565b6000806104bd836104fd565b90506104c881610d4a565b60006104d382610d70565b50600086815260cd60205260409020549092506104f59150829060ff16610e29565b949350505050565b600090815260cb60205260409020546001600160a01b031690565b610520610d46565b6065546001600160a01b0390811691161461054d5760405162461bcd60e51b81526004016102849061172f565b61055681610d4a565b600082815260cb60205260409020546001600160a01b03166105a85760cc80546001810182556000919091527f47197230e1e4b29fc0bd84d7d78966c0925452aff72a2a121538b102457e9ebe018290555b600082815260cb602090815260409182902080546001600160a01b0319166001600160a01b038516908117909155825163313ce56760e01b81529251909263313ce567926004808301939192829003018186803b15801561060857600080fd5b505afa15801561061c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106409190611445565b600092835260cd6020526040909220805460ff191660ff9093169290921790915550565b600080610670846104fd565b905061067b81610d4a565b6000816001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156106b657600080fd5b505afa1580156106ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ee91906113f4565b5050505090506000816001600160501b0316118015610716575083816001600160501b031610155b6107325760405162461bcd60e51b81526004016102849061177c565b600080836001600160a01b0316639a6fc8f58785036040518263ffffffff1660e01b8152600401610763919061181b565b60a06040518083038186803b15801561077b57600080fd5b505afa15801561078f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b391906113f4565b509350509250506107c382610e60565b93505050505b92915050565b6066546001600160a01b031690565b60cd6020526000908152604090205460ff1681565b6107fb610d46565b6065546001600160a01b039081169116146108285760405162461bcd60e51b81526004016102849061172f565b6065546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3606580546001600160a01b0319169055565b60008061087e836104fd565b905061088981610d4a565b600061089482610d70565b9695505050505050565b600054610100900460ff16806108b757506108b7610e80565b806108c5575060005460ff16155b6108e15760405162461bcd60e51b815260040161028490611692565b600054610100900460ff1615801561090c576000805460ff1961ff0019909116610100171660011790555b610914610e86565b8015610926576000805461ff00191690555b50565b6065546001600160a01b031690565b600080610944846104fd565b905061094f81610d4a565b6000816001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561098a57600080fd5b505afa15801561099e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c291906113f4565b5050505090506000816001600160501b03161180156109ea575083816001600160501b031610155b610a065760405162461bcd60e51b81526004016102849061177c565b604051639a6fc8f560e01b81526000906001600160a01b03841690639a6fc8f590610a37908886039060040161181b565b60a06040518083038186803b158015610a4f57600080fd5b505afa158015610a63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8791906113f4565b505050915050610a9681610e60565b600086815260cd60205260409020546107c390829060ff16610e29565b600080610abf846104fd565b9050610aca81610d4a565b82610ae75760405162461bcd60e51b8152600401610284906117a8565b600084815260cd602052604081205460ff16908080610b0585610d70565b9250925092506000610b2588610b19610f04565b9063ffffffff610f0816565b905080821080610b3c57506001600160501b038416155b15610b5857610b4b8386610e29565b96505050505050506107c9565b816000610b6782610b19610f04565b90506000610b7b868363ffffffff610f4a16565b90505b6001600160501b038716610bb557610ba5610b9f828463ffffffff610f8416565b89610e29565b99505050505050505050506107c9565b600187039650600080610bc88b8a610fc6565b9250925050858111610c0d57610c04610bf7610bea878963ffffffff610f0816565b849063ffffffff610f4a16565b849063ffffffff61110616565b92505050610c60565b6000610c1f868363ffffffff610f0816565b9050610c41610c34848363ffffffff610f4a16565b859063ffffffff61110616565b9350610c53858263ffffffff61110616565b9450819550505050610b7e565b610c73610b9f828d63ffffffff610f8416565b9c9b505050505050505050505050565b6066546001600160a01b0316610cab5760405162461bcd60e51b8152600401610284906116e0565b610cb3610d46565b6066546001600160a01b03908116911614610ce05760405162461bcd60e51b8152600401610284906115a1565b6066546065546040516001600160a01b0392831692909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360668054606580546001600160a01b03199081166001600160a01b03841617909155169055565b3390565b6001600160a01b0381166109265760405162461bcd60e51b8152600401610284906115e8565b600080600080600080866001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610db257600080fd5b505afa158015610dc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dea91906113f4565b50935050925092508194506000821215610e1d57610e078361112b565b610e148760018503610fc6565b90965090935090505b91969395509093505050565b6000610e5960ff8316600a0a610e4d85670de0b6b3a764000063ffffffff610f4a16565b9063ffffffff610f8416565b9392505050565b600081136109265760405162461bcd60e51b8152600401610284906114d6565b303b1590565b600054610100900460ff1680610e9f5750610e9f610e80565b80610ead575060005460ff16155b610ec95760405162461bcd60e51b815260040161028490611692565b600054610100900460ff16158015610ef4576000805460ff1961ff0019909116610100171660011790555b610efc611154565b6109146111d5565b4290565b6000610e5983836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506112af565b600082610f59575060006107c9565b82820282848281610f6657fe5b0414610e595760405162461bcd60e51b81526004016102849061160f565b6000610e5983836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506112db565b600080600080600080876001600160a01b0316639a6fc8f5886040518263ffffffff1660e01b8152600401610ffb919061181b565b60a06040518083038186803b15801561101357600080fd5b505afa158015611027573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104b91906113f4565b50935050925092505b60008212156110f8576110668361112b565b604051639a6fc8f560e01b8152600019909301926001600160a01b03891690639a6fc8f59061109990869060040161181b565b60a06040518083038186803b1580156110b157600080fd5b505afa1580156110c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e991906113f4565b50919450909250611054915050565b919450925090509250925092565b600082820183811015610e595760405162461bcd60e51b815260040161028490611523565b6000816001600160501b0316116109265760405162461bcd60e51b81526004016102849061177c565b600054610100900460ff168061116d575061116d610e80565b8061117b575060005460ff16155b6111975760405162461bcd60e51b815260040161028490611692565b600054610100900460ff16158015610914576000805460ff1961ff0019909116610100171660011790558015610926576000805461ff001916905550565b600054610100900460ff16806111ee57506111ee610e80565b806111fc575060005460ff16155b6112185760405162461bcd60e51b815260040161028490611692565b600054610100900460ff16158015611243576000805460ff1961ff0019909116610100171660011790555b600061124d610d46565b606580546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015610926576000805461ff001916905550565b600081848411156112d35760405162461bcd60e51b81526004016102849190611483565b505050900390565b600081836112fc5760405162461bcd60e51b81526004016102849190611483565b50600083858161130857fe5b0495945050505050565b80516001600160501b03811681146107c957600080fd5b60006020828403121561133a578081fd5b81356001600160a01b0381168114610e59578182fd5b600060208284031215611361578081fd5b5035919050565b6000806040838503121561137a578081fd5b8235915060208301356001600160a01b0381168114611397578182fd5b809150509250929050565b600080604083850312156113b4578182fd5b50508035926020909101359150565b600080600080608085870312156113d8578182fd5b5050823594602084013594506040840135936060013592509050565b600080600080600060a0868803121561140b578081fd5b6114158787611312565b94506020860151935060408601519250606086015191506114398760808801611312565b90509295509295909350565b600060208284031215611456578081fd5b815160ff81168114610e59578182fd5b6001600160a01b0391909116815260200190565b90815260200190565b6000602080835283518082850152825b818110156114af57858101830151858201604001528201611493565b818111156114c05783604083870101525b50601f01601f1916929092016040019392505050565b6020808252600e908201526d4e6567617469766520707269636560901b604082015260600190565b6020808252600b908201526a1b9bdd081cdd5c1c1bdc9d60aa1b604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526027908201527f5065727046694f776e61626c65557067726164653a2073616d652061732063616040820152666e64696461746560c81b606082015260800190565b60208082526027908201527f5065727046694f776e61626c65557067726164653a206e6f7420746865206e656040820152663b9037bbb732b960c91b606082015260800190565b6020808252600d908201526c656d707479206164647265737360981b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b60208082526022908201527f5065727046694f776e61626c65557067726164653a207a65726f206164647265604082015261737360f01b606082015260800190565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201526d195b881a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602f908201527f5065727046694f776e61626c65557067726164653a2063616e6469646174652060408201526e6973207a65726f206164647265737360881b606082015260800190565b6020808252602d908201527f5065727046694f776e61626c65557067726164653a2063616c6c65722069732060408201526c3737ba103a34329037bbb732b960991b606082015260800190565b6020808252601290820152714e6f7420656e6f75676820686973746f727960701b604082015260600190565b6020808252601390820152720696e74657276616c2063616e2774206265203606c1b604082015260600190565b60208082526026908201527f5065727046694f776e61626c65557067726164653a2073616d65206173206f726040820152651a59da5b985b60d21b606082015260800190565b6001600160501b0391909116815260200190565b60ff9190911681526020019056fea2646970667358221220e81e71550d3b3a848b34c7907919580a3b0186aa3681d87c132b738349bc7df264736f6c63430006090033\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Signer, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { ClearingHouse } from \"../ClearingHouse\";\n\nexport class ClearingHouse__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<ClearingHouse> {\n    return super.deploy(overrides || {}) as Promise<ClearingHouse>;\n  }\n  getDeployTransaction(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  attach(address: string): ClearingHouse {\n    return super.attach(address) as ClearingHouse;\n  }\n  connect(signer: Signer): ClearingHouse__factory {\n    return super.connect(signer) as ClearingHouse__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): ClearingHouse {\n    return new Contract(address, _abi, signerOrProvider) as ClearingHouse;\n  }\n}\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"liquidationFeeRatio\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"LiquidationFeeRatioChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"amm\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"int256\",\n        name: \"amount\",\n        type: \"int256\",\n      },\n      {\n        indexed: false,\n        internalType: \"int256\",\n        name: \"fundingPayment\",\n        type: \"int256\",\n      },\n    ],\n    name: \"MarginChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"marginRatio\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"MarginRatioChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"Paused\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"amm\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"trader\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"int256\",\n        name: \"newPositionSize\",\n        type: \"int256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"oldLiquidityIndex\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"newLiquidityIndex\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"PositionAdjusted\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"trader\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"amm\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"margin\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"positionNotional\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"int256\",\n        name: \"exchangedPositionSize\",\n        type: \"int256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"fee\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"int256\",\n        name: \"positionSizeAfter\",\n        type: \"int256\",\n      },\n      {\n        indexed: false,\n        internalType: \"int256\",\n        name: \"realizedPnl\",\n        type: \"int256\",\n      },\n      {\n        indexed: false,\n        internalType: \"int256\",\n        name: \"unrealizedPnlAfter\",\n        type: \"int256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"badDebt\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"liquidationPenalty\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"spotPrice\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"int256\",\n        name: \"fundingPayment\",\n        type: \"int256\",\n      },\n    ],\n    name: \"PositionChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"trader\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"amm\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"positionNotional\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"positionSize\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"liquidationFee\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"liquidator\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"badDebt\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"PositionLiquidated\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"amm\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"trader\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"valueTransferred\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"PositionSettled\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"amm\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"blockNumber\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"RestrictionModeEntered\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"Unpaused\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IAmm\",\n        name: \"_amm\",\n        type: \"address\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_addedMargin\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"addMargin\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IAmm\",\n        name: \"_amm\",\n        type: \"address\",\n      },\n    ],\n    name: \"adjustPosition\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"candidate\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IAmm\",\n        name: \"_amm\",\n        type: \"address\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_quoteAssetAmountLimit\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"closePosition\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"feePool\",\n    outputs: [\n      {\n        internalType: \"contract IMultiTokenRewardRecipient\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IAmm\",\n        name: \"_amm\",\n        type: \"address\",\n      },\n    ],\n    name: \"getLatestCumulativePremiumFraction\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"int256\",\n            name: \"d\",\n            type: \"int256\",\n          },\n        ],\n        internalType: \"struct SignedDecimal.signedDecimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IAmm\",\n        name: \"_amm\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_trader\",\n        type: \"address\",\n      },\n    ],\n    name: \"getMarginRatio\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"int256\",\n            name: \"d\",\n            type: \"int256\",\n          },\n        ],\n        internalType: \"struct SignedDecimal.signedDecimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IAmm\",\n        name: \"_amm\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_trader\",\n        type: \"address\",\n      },\n    ],\n    name: \"getPosition\",\n    outputs: [\n      {\n        components: [\n          {\n            components: [\n              {\n                internalType: \"int256\",\n                name: \"d\",\n                type: \"int256\",\n              },\n            ],\n            internalType: \"struct SignedDecimal.signedDecimal\",\n            name: \"size\",\n            type: \"tuple\",\n          },\n          {\n            components: [\n              {\n                internalType: \"uint256\",\n                name: \"d\",\n                type: \"uint256\",\n              },\n            ],\n            internalType: \"struct Decimal.decimal\",\n            name: \"margin\",\n            type: \"tuple\",\n          },\n          {\n            components: [\n              {\n                internalType: \"uint256\",\n                name: \"d\",\n                type: \"uint256\",\n              },\n            ],\n            internalType: \"struct Decimal.decimal\",\n            name: \"openNotional\",\n            type: \"tuple\",\n          },\n          {\n            components: [\n              {\n                internalType: \"int256\",\n                name: \"d\",\n                type: \"int256\",\n              },\n            ],\n            internalType: \"struct SignedDecimal.signedDecimal\",\n            name: \"lastUpdatedCumulativePremiumFraction\",\n            type: \"tuple\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"liquidityHistoryIndex\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"blockNumber\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct ClearingHouse.Position\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IAmm\",\n        name: \"_amm\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_trader\",\n        type: \"address\",\n      },\n      {\n        internalType: \"enum ClearingHouse.PnlCalcOption\",\n        name: \"_pnlCalcOption\",\n        type: \"uint8\",\n      },\n    ],\n    name: \"getPositionNotionalAndUnrealizedPnl\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"positionNotional\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"int256\",\n            name: \"d\",\n            type: \"int256\",\n          },\n        ],\n        internalType: \"struct SignedDecimal.signedDecimal\",\n        name: \"unrealizedPnl\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IAmm\",\n        name: \"_amm\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_trader\",\n        type: \"address\",\n      },\n    ],\n    name: \"getUnadjustedPosition\",\n    outputs: [\n      {\n        components: [\n          {\n            components: [\n              {\n                internalType: \"int256\",\n                name: \"d\",\n                type: \"int256\",\n              },\n            ],\n            internalType: \"struct SignedDecimal.signedDecimal\",\n            name: \"size\",\n            type: \"tuple\",\n          },\n          {\n            components: [\n              {\n                internalType: \"uint256\",\n                name: \"d\",\n                type: \"uint256\",\n              },\n            ],\n            internalType: \"struct Decimal.decimal\",\n            name: \"margin\",\n            type: \"tuple\",\n          },\n          {\n            components: [\n              {\n                internalType: \"uint256\",\n                name: \"d\",\n                type: \"uint256\",\n              },\n            ],\n            internalType: \"struct Decimal.decimal\",\n            name: \"openNotional\",\n            type: \"tuple\",\n          },\n          {\n            components: [\n              {\n                internalType: \"int256\",\n                name: \"d\",\n                type: \"int256\",\n              },\n            ],\n            internalType: \"struct SignedDecimal.signedDecimal\",\n            name: \"lastUpdatedCumulativePremiumFraction\",\n            type: \"tuple\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"liquidityHistoryIndex\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"blockNumber\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct ClearingHouse.Position\",\n        name: \"position\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"initMarginRatio\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"d\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_initMarginRatio\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_maintenanceMarginRatio\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_liquidationFeeRatio\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"contract IInsuranceFund\",\n        name: \"_insuranceFund\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_trustedForwarder\",\n        type: \"address\",\n      },\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"insuranceFund\",\n    outputs: [\n      {\n        internalType: \"contract IInsuranceFund\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"forwarder\",\n        type: \"address\",\n      },\n    ],\n    name: \"isTrustedForwarder\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IAmm\",\n        name: \"_amm\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_trader\",\n        type: \"address\",\n      },\n    ],\n    name: \"liquidate\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"liquidationFeeRatio\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"d\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"maintenanceMarginRatio\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"d\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"openInterestNotionalMap\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"d\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IAmm\",\n        name: \"_amm\",\n        type: \"address\",\n      },\n      {\n        internalType: \"enum ClearingHouse.Side\",\n        name: \"_side\",\n        type: \"uint8\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_quoteAssetAmount\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_leverage\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_baseAssetAmountLimit\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"openPosition\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"pause\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"paused\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IAmm\",\n        name: \"_amm\",\n        type: \"address\",\n      },\n    ],\n    name: \"payFunding\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IAmm\",\n        name: \"_amm\",\n        type: \"address\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_removedMargin\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"removeMargin\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IMultiTokenRewardRecipient\",\n        name: \"_feePool\",\n        type: \"address\",\n      },\n    ],\n    name: \"setFeePool\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_liquidationFeeRatio\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"setLiquidationFeeRatio\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_maintenanceMarginRatio\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"setMaintenanceMarginRatio\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"setOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_whitelist\",\n        type: \"address\",\n      },\n    ],\n    name: \"setWhitelist\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IAmm\",\n        name: \"_amm\",\n        type: \"address\",\n      },\n    ],\n    name: \"settlePosition\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"trustedForwarder\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"unpause\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"updateOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"versionRecipient\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Signer, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { ClearingHouseViewer } from \"../ClearingHouseViewer\";\n\nexport class ClearingHouseViewer__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    _clearingHouse: string,\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<ClearingHouseViewer> {\n    return super.deploy(\n      _clearingHouse,\n      overrides || {}\n    ) as Promise<ClearingHouseViewer>;\n  }\n  getDeployTransaction(\n    _clearingHouse: string,\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(_clearingHouse, overrides || {});\n  }\n  attach(address: string): ClearingHouseViewer {\n    return super.attach(address) as ClearingHouseViewer;\n  }\n  connect(signer: Signer): ClearingHouseViewer__factory {\n    return super.connect(signer) as ClearingHouseViewer__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): ClearingHouseViewer {\n    return new Contract(address, _abi, signerOrProvider) as ClearingHouseViewer;\n  }\n}\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"contract ClearingHouse\",\n        name: \"_clearingHouse\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    inputs: [],\n    name: \"clearingHouse\",\n    outputs: [\n      {\n        internalType: \"contract ClearingHouse\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IAmm\",\n        name: \"_amm\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_trader\",\n        type: \"address\",\n      },\n    ],\n    name: \"getMarginRatio\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"int256\",\n            name: \"d\",\n            type: \"int256\",\n          },\n        ],\n        internalType: \"struct SignedDecimal.signedDecimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"_quoteToken\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_trader\",\n        type: \"address\",\n      },\n    ],\n    name: \"getPersonalBalanceWithFundingPayment\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"margin\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IAmm\",\n        name: \"_amm\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_trader\",\n        type: \"address\",\n      },\n    ],\n    name: \"getPersonalPositionWithFundingPayment\",\n    outputs: [\n      {\n        components: [\n          {\n            components: [\n              {\n                internalType: \"int256\",\n                name: \"d\",\n                type: \"int256\",\n              },\n            ],\n            internalType: \"struct SignedDecimal.signedDecimal\",\n            name: \"size\",\n            type: \"tuple\",\n          },\n          {\n            components: [\n              {\n                internalType: \"uint256\",\n                name: \"d\",\n                type: \"uint256\",\n              },\n            ],\n            internalType: \"struct Decimal.decimal\",\n            name: \"margin\",\n            type: \"tuple\",\n          },\n          {\n            components: [\n              {\n                internalType: \"uint256\",\n                name: \"d\",\n                type: \"uint256\",\n              },\n            ],\n            internalType: \"struct Decimal.decimal\",\n            name: \"openNotional\",\n            type: \"tuple\",\n          },\n          {\n            components: [\n              {\n                internalType: \"int256\",\n                name: \"d\",\n                type: \"int256\",\n              },\n            ],\n            internalType: \"struct SignedDecimal.signedDecimal\",\n            name: \"lastUpdatedCumulativePremiumFraction\",\n            type: \"tuple\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"liquidityHistoryIndex\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"blockNumber\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct ClearingHouse.Position\",\n        name: \"position\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IAmm\",\n        name: \"_amm\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_trader\",\n        type: \"address\",\n      },\n      {\n        internalType: \"enum ClearingHouse.PnlCalcOption\",\n        name: \"_pnlCalcOption\",\n        type: \"uint8\",\n      },\n    ],\n    name: \"getUnrealizedPnl\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"int256\",\n            name: \"d\",\n            type: \"int256\",\n          },\n        ],\n        internalType: \"struct SignedDecimal.signedDecimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IAmm\",\n        name: \"_amm\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_trader\",\n        type: \"address\",\n      },\n    ],\n    name: \"isPositionNeedToBeMigrated\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Signer, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { ExchangeWrapper } from \"../ExchangeWrapper\";\n\nexport class ExchangeWrapper__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<ExchangeWrapper> {\n    return super.deploy(overrides || {}) as Promise<ExchangeWrapper>;\n  }\n  getDeployTransaction(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  attach(address: string): ExchangeWrapper {\n    return super.attach(address) as ExchangeWrapper;\n  }\n  connect(signer: Signer): ExchangeWrapper__factory {\n    return super.connect(signer) as ExchangeWrapper__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): ExchangeWrapper {\n    return new Contract(address, _abi, signerOrProvider) as ExchangeWrapper;\n  }\n}\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"inAmount\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"out\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"BalancerSwap\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"underlyingAmount\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"cTokenAmount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"CompoundMint\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"underlyingAmount\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"cTokenAmount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"CompoundRedeem\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"perpTokenAmount\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"usdtAmount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"ExchangeSwap\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"_token\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_amount\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"balancerPool\",\n    outputs: [\n      {\n        internalType: \"contract BPool\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"candidate\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"compoundCUsdt\",\n    outputs: [\n      {\n        internalType: \"contract CErc20\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"_inputToken\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract IERC20\",\n        name: \"_outputToken\",\n        type: \"address\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_inputTokenSold\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"getInputPrice\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"_inputToken\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract IERC20\",\n        name: \"_outputToken\",\n        type: \"address\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_outputTokenBought\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"getOutputPrice\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"_inputToken\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract IERC20\",\n        name: \"_outputToken\",\n        type: \"address\",\n      },\n    ],\n    name: \"getSpotPrice\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_balancerPool\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_compoundCUsdt\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_perpToken\",\n        type: \"address\",\n      },\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_balancerPool\",\n        type: \"address\",\n      },\n    ],\n    name: \"setBalancerPool\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_compoundCUsdt\",\n        type: \"address\",\n      },\n    ],\n    name: \"setCompoundCUsdt\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"setOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"_inputToken\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract IERC20\",\n        name: \"_outputToken\",\n        type: \"address\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_inputTokenSold\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_minOutputTokenBought\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_maxPrice\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"swapInput\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"_inputToken\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract IERC20\",\n        name: \"_outputToken\",\n        type: \"address\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_outputTokenBought\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_maxInputTokeSold\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_maxPrice\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"swapOutput\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"updateOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x608060405234801561001057600080fd5b50612d3b806100206000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80639577ee8211610097578063c1094e5b11610066578063c1094e5b146101d7578063c643ea63146101ea578063e5e75d1e146101fd578063f1bf5b4f1461021057610100565b80639577ee8214610196578063a88b68b4146101a9578063bc5920ba146101bc578063c0c53b8b146101c457610100565b80636c8381f8116100d35780636c8381f814610169578063715018a61461017e578063776da470146101865780638da5cb5b1461018e57610100565b8063125822721461010557806313af40351461011a57806315e84af91461012d5780633396715114610156575b600080fd5b6101186101133660046124b6565b610218565b005b6101186101283660046124b6565b610359565b61014061013b36600461259f565b610432565b60405161014d9190612c7b565b60405180910390f35b610140610164366004612615565b61044d565b610171610496565b60405161014d91906126f2565b6101186104a5565b610171610524565b610171610533565b6101186101a4366004612558565b610542565b6101186101b73660046124b6565b610587565b6101186105de565b6101186101d23660046124ee565b6106a1565b6101406101e53660046125d7565b61075c565b6101406101f83660046125d7565b6107a0565b61014061020b366004612615565b6107db565b61017161081a565b610220610829565b6065546001600160a01b039081169116146102565760405162461bcd60e51b815260040161024d90612be8565b60405180910390fd5b60cd80546001600160a01b0319166001600160a01b03838116919091179182905560408051636f307dc360e01b815290519290911691636f307dc391600480820192602092909190829003018186803b1580156102b257600080fd5b505afa1580156102c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ea91906124d2565b60cf80546001600160a01b0319166001600160a01b0392831617905560cd54604080516020810190915260001981526103299291909116908190610542565b60cf5460cd5460408051602081019091526000198152610356926001600160a01b03908116921690610542565b50565b610361610829565b6065546001600160a01b0390811691161461038e5760405162461bcd60e51b815260040161024d90612be8565b6001600160a01b0381166103b45760405162461bcd60e51b815260040161024d90612a4d565b6065546001600160a01b03828116911614156103e25760405162461bcd60e51b815260040161024d90612c35565b6066546001600160a01b03828116911614156104105760405162461bcd60e51b815260040161024d9061288e565b606680546001600160a01b0319166001600160a01b0392909216919091179055565b61043a61244f565b610444838361082d565b90505b92915050565b61045561244f565b61048c868661046936889003880188612680565b61047836889003880188612680565b61048736889003880188612680565b6109e5565b9695505050505050565b6066546001600160a01b031690565b6104ad610829565b6065546001600160a01b039081169116146104da5760405162461bcd60e51b815260040161024d90612be8565b6065546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3606580546001600160a01b0319169055565b60cc546001600160a01b031681565b6065546001600160a01b031690565b61054a610829565b6065546001600160a01b039081169116146105775760405162461bcd60e51b815260040161024d90612be8565b610582838383610b5b565b505050565b61058f610829565b6065546001600160a01b039081169116146105bc5760405162461bcd60e51b815260040161024d90612be8565b60cc80546001600160a01b0319166001600160a01b0392909216919091179055565b6066546001600160a01b03166106065760405162461bcd60e51b815260040161024d90612b99565b61060e610829565b6066546001600160a01b0390811691161461063b5760405162461bcd60e51b815260040161024d906128d5565b6066546065546040516001600160a01b0392831692909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360668054606580546001600160a01b03199081166001600160a01b03841617909155169055565b600054610100900460ff16806106ba57506106ba610b81565b806106c8575060005460ff16155b6106e45760405162461bcd60e51b815260040161024d90612a8f565b600054610100900460ff1615801561070f576000805460ff1961ff0019909116610100171660011790555b610717610b87565b60ce80546001600160a01b0319166001600160a01b03841617905561073b84610587565b61074483610218565b8015610756576000805461ff00191690555b50505050565b61076461244f565b61076c61244f565b610776858561082d565b90506107978161078b36869003860186612680565b9063ffffffff610c1916565b95945050505050565b6107a861244f565b6107b061244f565b6107ba858561082d565b9050610797816107cf36869003860186612680565b9063ffffffff610c4516565b6107e361244f565b61048c86866107f736889003880188612680565b61080636889003880188612680565b61081536889003880188612680565b610c68565b60cd546001600160a01b031681565b3390565b61083561244f565b816001600160a01b0316836001600160a01b0316141561085e57610857610d50565b9050610447565b600061086984610d74565b9050600061087684610d74565b60cc546040516315e84af960e01b81529192506000916001600160a01b03909116906315e84af9906108ae9086908690600401612706565b60206040518083038186803b1580156108c657600080fd5b505afa1580156108da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fe919061269b565b905061090861244f565b506040805160208101909152818152600061092285610d9e565b9050600061092f85610d9e565b9050808210156109525761094b8661094685610e82565b610e86565b9250610974565b8082111561097457604051806020016040528061096f8786610f18565b905292505b61097d89610f96565b156109af576109a2610995610990610d50565b610fbf565b849063ffffffff610c1916565b9650505050505050610447565b6109b888610f96565b156109d8576109a26109cb610990610d50565b849063ffffffff610c4516565b5090979650505050505050565b6109ed61244f565b60006109f7610829565b9050610a0161244f565b5084610a0c87610f96565b15610a1d57610a1a816110af565b90505b6000610a2889610d74565b90506000610a3589610d74565b9050610a3f61244f565b610a4a8383866111a4565b90506000610a5e898363ffffffff6114ef16565b60000b1215610a7f5760405162461bcd60e51b815260040161024d90612add565b610a888b610f96565b15610abc57610a9561244f565b610a9e82610fbf565b9050610aac8c873084611520565b610ab581611652565b5050610ac8565b610ac88b863084611520565b610ad061244f565b610add8484878c8c61177a565b9050610ae88b610f96565b15610af857610af68a611983565b505b7f4d207a2df21cff761d39dd1942c4370b71074291874855081465c54e12987ab2610b2282610e82565b610b2b8c610e82565b604051610b39929190612c8e565b60405180910390a1610b4c8b878c611a9c565b9b9a5050505050505050505050565b610b6483611bcb565b610b768383610b71611c18565b611c33565b610582838383611c33565b303b1590565b600054610100900460ff1680610ba05750610ba0610b81565b80610bae575060005460ff16155b610bca5760405162461bcd60e51b815260040161024d90612a8f565b600054610100900460ff16158015610bf5576000805460ff1961ff0019909116610100171660011790555b610bfd611d32565b610c05611db3565b8015610356576000805461ff001916905550565b610c2161244f565b610c2961244f565b82518451610c3c9163ffffffff611e8d16565b81529392505050565b610c4d61244f565b610c5561244f565b82518451610c3c9163ffffffff611e9b16565b610c7061244f565b6000610c7a610829565b9050610c8461244f565b5084610c9288833084611520565b610c9b88610f96565b15610cac57610ca981611652565b90505b6000610cb789610d74565b90506000610cc489610d74565b9050610cd38282858a8a611ea9565b9450610cde89610f96565b15610cef57610cec856120ac565b94505b7f4d207a2df21cff761d39dd1942c4370b71074291874855081465c54e12987ab2610d1989610e82565b610d2287610e82565b604051610d30929190612c8e565b60405180910390a1610d43898587611a9c565b5050505095945050505050565b610d5861244f565b6040518060200160405280610d6d60126121c5565b9052905090565b6000610d7f82610f96565b15610d96575060cd546001600160a01b0316610d99565b50805b919050565b6001600160a01b038116600090815260996020526040812054806104475760408051600481526024810182526020810180516001600160e01b031663313ce56760e01b17905290516000916060916001600160a01b03871691610e00916126d6565b600060405180830381855afa9150503d8060008114610e3b576040519150601f19603f3d011682016040523d82523d6000602084013e610e40565b606091505b5091509150818015610e525750805115155b610e6e5760405162461bcd60e51b815260040161024d9061291c565b80806020019051810190610797919061269b565b5190565b610e8e61244f565b6000610e9984610d9e565b905060128110610ede57604080516020810190915280610ed3610ec384601263ffffffff6121ce16565b8690600a0a63ffffffff61221016565b815250915050610447565b604080516020810190915280610f0e610efe60128563ffffffff6121ce16565b8690600a0a63ffffffff61225216565b9052949350505050565b600080610f2484610d9e565b905060128110610f6257610f5a610f4282601263ffffffff6121ce16565b600a0a610f4e85610e82565b9063ffffffff61225216565b915050610447565b610f8e610f7660128363ffffffff6121ce16565b600a0a610f8285610e82565b9063ffffffff61221016565b949350505050565b60cf546000906001600160a01b0383811691161415610fb757506001610d99565b506000919050565b610fc761244f565b60cd546040805163182df0f560e01b815290516000926001600160a01b03169163182df0f5916004808301926020929190829003018186803b15801561100c57600080fd5b505afa158015611020573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611044919061269b565b60cd54909150600090611060906001600160a01b031685610f18565b905061106a61244f565b60408051602080820183528582528251908101909252838252611093919063ffffffff610c1916565b60cf54909150610797906001600160a01b031661094683610e82565b6110b761244f565b60cd546040805163182df0f560e01b815290516000926001600160a01b03169163182df0f5916004808301926020929190829003018186803b1580156110fc57600080fd5b505afa158015611110573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611134919061269b565b60cf54909150600090611150906001600160a01b031685610f18565b9050600061118b611186604051806020016040528086815250604051806020016040528086815250610c4590919063ffffffff16565b610e82565b60cd54909150610797906001600160a01b031682610e86565b6111ac61244f565b60006111b88484610f18565b60cc54604051634a46c67360e11b81529192506000916001600160a01b039091169063948d8ce6906111ee9089906004016126f2565b60206040518083038186803b15801561120657600080fd5b505afa15801561121a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061123e919061269b565b60cc54604051634a46c67360e11b81529192506000916001600160a01b039091169063948d8ce6906112749089906004016126f2565b60206040518083038186803b15801561128c57600080fd5b505afa1580156112a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c4919061269b565b60cc5460405163f8b2cb4f60e01b81529192506000916001600160a01b039091169063f8b2cb4f906112fa908b906004016126f2565b60206040518083038186803b15801561131257600080fd5b505afa158015611326573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134a919061269b565b60cc5460405163f8b2cb4f60e01b81529192506000916001600160a01b039091169063f8b2cb4f90611380908b906004016126f2565b60206040518083038186803b15801561139857600080fd5b505afa1580156113ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d0919061269b565b60cc5460408051631a995bed60e31b815290519293506000926001600160a01b039092169163f8d6aed4918691899187918a918d91889163d4cadf68916004808301926020929190829003018186803b15801561142c57600080fd5b505afa158015611440573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611464919061269b565b6040518763ffffffff1660e01b815260040161148596959493929190612c9c565b60206040518083038186803b15801561149d57600080fd5b505afa1580156114b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d5919061269b565b90506114e18a82610e86565b9a9950505050505050505050565b80518251600091101561150457506001610447565b8151835110156115175750600019610447565b50600092915050565b61152984611bcb565b61153161244f565b61153b858461228c565b905060006115498684610f18565b905060006060876001600160a01b03166323b872dd60e01b88888660405160240161157693929190612720565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516115b491906126d6565b6000604051808303816000865af19150503d80600081146115f1576040519150601f19603f3d011682016040523d82523d6000602084013e6115f6565b606091505b50915091508180156116205750805115806116205750808060200190518101906116209190612538565b61163c5760405162461bcd60e51b815260040161024d9061295d565b61164888878587612314565b5050505050505050565b61165a61244f565b60cf54600090611673906001600160a01b031684610f18565b60cd5460405163140e25ad60e31b81529192506001600160a01b03169063a0712d68906116a4908490600401612c85565b602060405180830381600087803b1580156116be57600080fd5b505af11580156116d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116f6919061269b565b156117135760405162461bcd60e51b815260040161024d906127fb565b61171c836110af565b60cd54909250600090611738906001600160a01b031684610f18565b90507f90ec39b150bfc67e537a72a995ebf5ed1b2cbcc539d9bc14663ec0929f34c8dc828260405161176b929190612c8e565b60405180910390a15050919050565b61178261244f565b61178b82610e82565b6118495760cc546040516315e84af960e01b81526000916001600160a01b0316906315e84af9906117c2908a908a90600401612706565b60206040518083038186803b1580156117da57600080fd5b505afa1580156117ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611812919061269b565b60408051602080820183526710a741a462780000825282519081019092528282529192506118459163ffffffff610c1916565b9250505b60cc546118619087906001600160a01b031685610b5b565b600061186d8686610f18565b9050600061187b8886610f18565b60cc549091506000906001600160a01b0316637c5e9ea48a848b8761189f8b610e82565b6040518663ffffffff1660e01b81526004016118bf95949392919061275d565b6040805180830381600087803b1580156118d857600080fd5b505af11580156118ec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061191091906126b3565b509050600081116119335760405162461bcd60e51b815260040161024d9061299e565b7f5a2918a4a5efad0965538e4174082c1735d6560ca02b36fc71d20cfeb214e1018184604051611964929190612c8e565b60405180910390a16119768982610e86565b9998505050505050505050565b61198b61244f565b60cf546000906119a4906001600160a01b031684610f18565b60cd5460405163852a12e360e01b81529192506001600160a01b03169063852a12e3906119d5908490600401612c85565b602060405180830381600087803b1580156119ef57600080fd5b505af1158015611a03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a27919061269b565b15611a445760405162461bcd60e51b815260040161024d906129d5565b611a4d836110af565b60cd54909250600090611a69906001600160a01b031684610f18565b90507f2d26d399c8dd50eff4a9c5d5f8ba42cef4e7fa01b2657e6ac8d80118908486ed828260405161176b929190612c8e565b611aa583611bcb565b611aad61244f565b611ab7848461228c565b90506000611ac58584610f18565b905060006060866001600160a01b031663a9059cbb60e01b8785604051602401611af0929190612744565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051611b2e91906126d6565b6000604051808303816000865af19150503d8060008114611b6b576040519150601f19603f3d011682016040523d82523d6000602084013e611b70565b606091505b5091509150818015611b9a575080511580611b9a575080806020019051810190611b9a9190612538565b611bb65760405162461bcd60e51b815260040161024d906127c4565b611bc287878587612314565b50505050505050565b6000611bd682610d9e565b6001600160a01b0383166000908152609960205260409020549091508114611c14576001600160a01b03821660009081526099602052604090208190555b5050565b611c2061244f565b5060408051602081019091526000815290565b600060606001600160a01b03851663095ea7b360e01b85611c548887610f18565b604051602401611c65929190612744565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051611ca391906126d6565b6000604051808303816000865af19150503d8060008114611ce0576040519150601f19603f3d011682016040523d82523d6000602084013e611ce5565b606091505b5091509150818015611d0f575080511580611d0f575080806020019051810190611d0f9190612538565b611d2b5760405162461bcd60e51b815260040161024d90612b20565b5050505050565b600054610100900460ff1680611d4b5750611d4b610b81565b80611d59575060005460ff16155b611d755760405162461bcd60e51b815260040161024d90612a8f565b600054610100900460ff16158015610c05576000805460ff1961ff0019909116610100171660011790558015610356576000805461ff001916905550565b600054610100900460ff1680611dcc5750611dcc610b81565b80611dda575060005460ff16155b611df65760405162461bcd60e51b815260040161024d90612a8f565b600054610100900460ff16158015611e21576000805460ff1961ff0019909116610100171660011790555b6000611e2b610829565b606580546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015610356576000805461ff001916905550565b600061044483836012612367565b600061044483836012612385565b611eb161244f565b611eba82610e82565b611f785760cc546040516315e84af960e01b81526000916001600160a01b0316906315e84af990611ef1908a908a90600401612706565b60206040518083038186803b158015611f0957600080fd5b505afa158015611f1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f41919061269b565b60408051602080820183526710a741a46278000082528251908101909252828252919250611f749163ffffffff610c1916565b9250505b60cc54611f909087906001600160a01b031686610b5b565b6000611f9c8786610f18565b60cc549091506000906001600160a01b0316638201aa3f89848a611fc0818b610f18565b611fc98a610e82565b6040518663ffffffff1660e01b8152600401611fe995949392919061275d565b6040805180830381600087803b15801561200257600080fd5b505af1158015612016573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061203a91906126b3565b5090506000811161205d5760405162461bcd60e51b815260040161024d9061299e565b7f5a2918a4a5efad0965538e4174082c1735d6560ca02b36fc71d20cfeb214e101828260405161208e929190612c8e565b60405180910390a16120a08782610e86565b98975050505050505050565b6120b461244f565b60cd546000906120cd906001600160a01b031684610f18565b60cd5460405163db006a7560e01b81529192506001600160a01b03169063db006a75906120fe908490600401612c85565b602060405180830381600087803b15801561211857600080fd5b505af115801561212c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612150919061269b565b1561216d5760405162461bcd60e51b815260040161024d90612828565b61217683610fbf565b60cf54909250600090612192906001600160a01b031684610f18565b90507f2d26d399c8dd50eff4a9c5d5f8ba42cef4e7fa01b2657e6ac8d80118908486ed818360405161176b929190612c8e565b60ff16600a0a90565b600061044483836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506123a4565b600061044483836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506123d0565b60008261226157506000610447565b8282028284828161226e57fe5b04146104445760405162461bcd60e51b815260040161024d90612a0c565b61229461244f565b61044483846001600160a01b03166370a08231856040518263ffffffff1660e01b81526004016122c491906126f2565b60206040518083038186803b1580156122dc57600080fd5b505afa1580156122f0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610946919061269b565b6123476123316123248685610e86565b839063ffffffff61240716565b61233b868661228c565b9063ffffffff6114ef16565b60000b156107565760405162461bcd60e51b815260040161024d90612b57565b6000610f8e612375836121c5565b610f82868663ffffffff61225216565b6000610f8e83610f82612397856121c5565b879063ffffffff61225216565b600081848411156123c85760405162461bcd60e51b815260040161024d9190612791565b505050900390565b600081836123f15760405162461bcd60e51b815260040161024d9190612791565b5060008385816123fd57fe5b0495945050505050565b61240f61244f565b61241761244f565b82518451610c3c9163ffffffff61242a16565b6000828201838110156104445760405162461bcd60e51b815260040161024d90612857565b6040518060200160405280600081525090565b600060208284031215612473578081fd5b50919050565b60006020828403121561248a578081fd5b6040516020810181811067ffffffffffffffff821117156124a9578283fd5b6040529135825250919050565b6000602082840312156124c7578081fd5b813561044481612cf0565b6000602082840312156124e3578081fd5b815161044481612cf0565b600080600060608486031215612502578182fd5b833561250d81612cf0565b9250602084013561251d81612cf0565b9150604084013561252d81612cf0565b809150509250925092565b600060208284031215612549578081fd5b81518015158114610444578182fd5b60008060006060848603121561256c578283fd5b833561257781612cf0565b9250602084013561258781612cf0565b91506125968560408601612479565b90509250925092565b600080604083850312156125b1578182fd5b82356125bc81612cf0565b915060208301356125cc81612cf0565b809150509250929050565b6000806000606084860312156125eb578283fd5b83356125f681612cf0565b9250602084013561260681612cf0565b91506125968560408601612462565b600080600080600060a0868803121561262c578081fd5b853561263781612cf0565b9450602086013561264781612cf0565b93506126568760408801612462565b92506126658760608801612462565b91506126748760808801612462565b90509295509295909350565b600060208284031215612691578081fd5b6104448383612479565b6000602082840312156126ac578081fd5b5051919050565b600080604083850312156126c5578182fd5b505080516020909101519092909150565b600082516126e8818460208701612cc4565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b03958616815260208101949094529190931660408301526060820192909252608081019190915260a00190565b60006020825282518060208401526127b0816040850160208701612cc4565b601f01601f19169190910160400192915050565b6020808252601d908201527f446563696d616c45524332303a207472616e73666572206661696c6564000000604082015260600190565b60208082526013908201527221b7b6b837bab7321036b4b73a1032b93937b960691b604082015260600190565b60208082526015908201527421b7b6b837bab732103932b232b2b69032b93937b960591b604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526027908201527f5065727046694f776e61626c65557067726164653a2073616d652061732063616040820152666e64696461746560c81b606082015260800190565b60208082526027908201527f5065727046694f776e61626c65557067726164653a206e6f7420746865206e656040820152663b9037bbb732b960c91b606082015260800190565b60208082526021908201527f446563696d616c45524332303a2067657420646563696d616c73206661696c656040820152601960fa1b606082015260800190565b60208082526021908201527f446563696d616c45524332303a207472616e7366657246726f6d206661696c656040820152601960fa1b606082015260800190565b60208082526017908201527f42616c616e6365722065786368616e6765206572726f72000000000000000000604082015260600190565b6020808252601f908201527f436f6d706f756e642072656465656d556e6465726c79696e67206572726f7200604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b60208082526022908201527f5065727046694f776e61626c65557067726164653a207a65726f206164647265604082015261737360f01b606082015260800190565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201526d195b881a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526023908201527f6d617820696e70757420616d6f756e74206c657373207468616e2065787065636040820152621d195960ea1b606082015260800190565b6020808252601c908201527f446563696d616c45524332303a20617070726f7665206661696c656400000000604082015260600190565b60208082526022908201527f446563696d616c45524332303a2062616c616e636520696e636f6e73697374656040820152611b9d60f21b606082015260800190565b6020808252602f908201527f5065727046694f776e61626c65557067726164653a2063616e6469646174652060408201526e6973207a65726f206164647265737360881b606082015260800190565b6020808252602d908201527f5065727046694f776e61626c65557067726164653a2063616c6c65722069732060408201526c3737ba103a34329037bbb732b960991b606082015260800190565b60208082526026908201527f5065727046694f776e61626c65557067726164653a2073616d65206173206f726040820152651a59da5b985b60d21b606082015260800190565b9051815260200190565b90815260200190565b918252602082015260400190565b958652602086019490945260408501929092526060840152608083015260a082015260c00190565b60005b83811015612cdf578181015183820152602001612cc7565b838111156107565750506000910152565b6001600160a01b038116811461035657600080fdfea26469706673582212205664c3c98c927eaf7e18d977fe80e4ede3dd463c96af075c45f1d17e36b7a42064736f6c63430006090033\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Signer, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { InflationMonitor } from \"../InflationMonitor\";\n\nexport class InflationMonitor__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<InflationMonitor> {\n    return super.deploy(overrides || {}) as Promise<InflationMonitor>;\n  }\n  getDeployTransaction(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  attach(address: string): InflationMonitor {\n    return super.attach(address) as InflationMonitor;\n  }\n  connect(signer: Signer): InflationMonitor__factory {\n    return super.connect(signer) as InflationMonitor__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): InflationMonitor {\n    return new Contract(address, _abi, signerOrProvider) as InflationMonitor;\n  }\n}\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"MINT_THRESHOLD_PERIOD\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_amount\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"appendMintedTokenHistory\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"candidate\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IMinter\",\n        name: \"_minter\",\n        type: \"address\",\n      },\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"isOverMintThreshold\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"mintedAmountDuringMintThresholdPeriod\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"setOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_shutdownThreshold\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"setShutdownThreshold\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"shutdownThreshold\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"d\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"updateOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Signer, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { InsuranceFund } from \"../InsuranceFund\";\n\nexport class InsuranceFund__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<InsuranceFund> {\n    return super.deploy(overrides || {}) as Promise<InsuranceFund>;\n  }\n  getDeployTransaction(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  attach(address: string): InsuranceFund {\n    return super.attach(address) as InsuranceFund;\n  }\n  connect(signer: Signer): InsuranceFund__factory {\n    return super.connect(signer) as InsuranceFund__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): InsuranceFund {\n    return new Contract(address, _abi, signerOrProvider) as InsuranceFund;\n  }\n}\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"blockNumber\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"ShutdownAllAmms\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"tokenAddress\",\n        type: \"address\",\n      },\n    ],\n    name: \"TokenAdded\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"tokenAddress\",\n        type: \"address\",\n      },\n    ],\n    name: \"TokenRemoved\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"withdrawer\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Withdrawn\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IAmm\",\n        name: \"_amm\",\n        type: \"address\",\n      },\n    ],\n    name: \"addAmm\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"candidate\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"exchange\",\n    outputs: [\n      {\n        internalType: \"contract IExchangeWrapper\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getAllAmms\",\n    outputs: [\n      {\n        internalType: \"contract IAmm[]\",\n        name: \"\",\n        type: \"address[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getQuoteTokenLength\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"inflationMonitor\",\n    outputs: [\n      {\n        internalType: \"contract IInflationMonitor\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IAmm\",\n        name: \"_amm\",\n        type: \"address\",\n      },\n    ],\n    name: \"isExistedAmm\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"minter\",\n    outputs: [\n      {\n        internalType: \"contract IMinter\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"perpToken\",\n    outputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"quoteTokens\",\n    outputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IAmm\",\n        name: \"_amm\",\n        type: \"address\",\n      },\n    ],\n    name: \"removeAmm\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"_token\",\n        type: \"address\",\n      },\n    ],\n    name: \"removeToken\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_beneficiary\",\n        type: \"address\",\n      },\n    ],\n    name: \"setBeneficiary\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IExchangeWrapper\",\n        name: \"_exchange\",\n        type: \"address\",\n      },\n    ],\n    name: \"setExchange\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IInflationMonitor\",\n        name: \"_inflationMonitor\",\n        type: \"address\",\n      },\n    ],\n    name: \"setInflationMonitor\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IMinter\",\n        name: \"_minter\",\n        type: \"address\",\n      },\n    ],\n    name: \"setMinter\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"setOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"shutdownAllAmm\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"updateOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"_quoteToken\",\n        type: \"address\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_amount\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"withdraw\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x608060405234801561001057600080fd5b50612b88806100206000396000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c80638da5cb5b116100c3578063c68ade371161007c578063c68ade3714610266578063ca58b19814610279578063cf23097914610281578063d2f7265a14610294578063d926de1c1461029c578063fca3b5aa146102af5761014d565b80638da5cb5b1461021c5780639cadb3a0146102245780639dd96eb21461022c578063b7538c6214610234578063bc5920ba14610249578063beb0597a146102515761014d565b80632c9115c7116101155780632c9115c7146101cb5780635fa7b584146101de57806367b1f5df146101f15780636c8381f814610204578063715018a61461020c5780638129fc1c146102145761014d565b806307546172146101525780630774a7841461017057806313af4035146101905780631c31f710146101a5578063252978b8146101b8575b600080fd5b61015a6102c2565b6040516101679190612527565b60405180910390f35b61018361017e3660046123fa565b6102d2565b60405161016791906125a1565b6101a361019e3660046123fa565b6102f1565b005b6101a36101b33660046123fa565b6103d3565b6101a36101c6366004612452565b61042b565b61015a6101d93660046124db565b6105ae565b6101a36101ec3660046123fa565b6105d6565b6101a36101ff3660046123fa565b6107dd565b61015a610835565b6101a3610845565b6101a36108c4565b61015a610957565b61015a610966565b6101a3610976565b61023c610afe565b6040516101679190612554565b6101a3610b61565b610259610c24565b6040516101679190612ae1565b6101a36102743660046123fa565b610c2b565b61015a610c83565b6101a361028f3660046123fa565b610c93565b61015a610df5565b6101a36102aa3660046123fa565b610e05565b6101a36102bd3660046123fa565b610fdd565b610136546001600160a01b031681565b6001600160a01b03166000908152610130602052604090205460ff1690565b6102f96110cb565b6065546001600160a01b0390811691161461032f5760405162461bcd60e51b815260040161032690612a44565b60405180910390fd5b6001600160a01b0381166103555760405162461bcd60e51b815260040161032690612898565b6065546001600160a01b03828116911614156103835760405162461bcd60e51b815260040161032690612a91565b6066546001600160a01b03828116911614156103b15760405162461bcd60e51b815260040161032690612702565b606680546001600160a01b0319166001600160a01b0392909216919091179055565b6103db6110cb565b6065546001600160a01b039081169116146104085760405162461bcd60e51b815260040161032690612a44565b61013880546001600160a01b0319166001600160a01b0392909216919091179055565b6104336110cb565b610138546001600160a01b039081169116146104615760405162461bcd60e51b815260040161032690612694565b61046a826110cf565b6104865760405162461bcd60e51b815260040161032690612827565b61048e6123e7565b610497836110ee565b90506104a281611106565b6104b96104b436859003850185612491565b611106565b11156104ff576104c76123e7565b6104e6826104da36869003860186612491565b9063ffffffff61110a16565b90506104f28482611136565b6104fb846110ee565b9150505b6105116104b436849003840184612491565b61051a82611106565b10156105385760405162461bcd60e51b815260040161032690612a1b565b610558836105446110cb565b61055336869003860186612491565b6113c6565b7f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d56105816110cb565b6105936104b436869003860186612491565b6040516105a192919061253b565b60405180910390a1505050565b61013381815481106105bc57fe5b6000918252602090912001546001600160a01b0316905081565b6105de6110cb565b6065546001600160a01b0390811691161461060b5760405162461bcd60e51b815260040161032690612a44565b610614816110cf565b6106305760405162461bcd60e51b815260040161032690612632565b6001600160a01b038116600090815261013160205260408120805460ff19169055610659610c24565b905060005b8181101561074657826001600160a01b0316610133828154811061067e57fe5b6000918252602090912001546001600160a01b0316141561073e576001820381101561070b5761013360018303815481106106b557fe5b60009182526020909120015461013380546001600160a01b0390921691839081106106dc57fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b61013380548061071757fe5b600082815260209020810160001990810180546001600160a01b0319169055019055610746565b60010161065e565b5060006107556104b4846110ee565b11156107a25760006107656114f5565b90506001600160a01b0381166107845750610135546001600160a01b03165b61079f8382610792866110ee565b61079a61167a565b611695565b50505b7f4c910b69fe65a61f7531b9c5042b2329ca7179c77290aa7e2eb3afa3c8511fd3826040516107d19190612527565b60405180910390a15050565b6107e56110cb565b6065546001600160a01b039081169116146108125760405162461bcd60e51b815260040161032690612a44565b61013480546001600160a01b0319166001600160a01b0392909216919091179055565b6066546001600160a01b03165b90565b61084d6110cb565b6065546001600160a01b0390811691161461087a5760405162461bcd60e51b815260040161032690612a44565b6065546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3606580546001600160a01b0319169055565b600054610100900460ff16806108dd57506108dd611794565b806108eb575060005460ff16155b6109075760405162461bcd60e51b8152600401610326906128da565b600054610100900460ff16158015610932576000805460ff1961ff0019909116610100171660011790555b61093a61179a565b610942611818565b8015610954576000805461ff00191690555b50565b6065546001600160a01b031690565b610135546001600160a01b031681565b61097e6110cb565b6065546001600160a01b039081169116146109ab5760405162461bcd60e51b815260040161032690612a44565b61013760009054906101000a90046001600160a01b03166001600160a01b0316633fe204d96040518163ffffffff1660e01b815260040160206040518083038186803b1580156109fa57600080fd5b505afa158015610a0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a329190612416565b610a3b57610afc565b60005b61013254811015610ac3576101328181548110610a5757fe5b60009182526020822001546040805163fc0e74d160e01b815290516001600160a01b039092169263fc0e74d19260048084019382900301818387803b158015610a9f57600080fd5b505af1158015610ab3573d6000803e3d6000fd5b505060019092019150610a3e9050565b507ffc9f9c6cbb93f675af09b9bb43859333114dfa5e4c5abd35297e153f2434810143604051610af39190612ae1565b60405180910390a15b565b6060610132805480602002602001604051908101604052809291908181526020018280548015610b5757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610b39575b5050505050905090565b6066546001600160a01b0316610b895760405162461bcd60e51b8152600401610326906129cc565b610b916110cb565b6066546001600160a01b03908116911614610bbe5760405162461bcd60e51b815260040161032690612749565b6066546065546040516001600160a01b0392831692909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360668054606580546001600160a01b03199081166001600160a01b03841617909155169055565b6101335490565b610c336110cb565b6065546001600160a01b03908116911614610c605760405162461bcd60e51b815260040161032690612a44565b61013780546001600160a01b0319166001600160a01b0392909216919091179055565b610137546001600160a01b031681565b610c9b6110cb565b6065546001600160a01b03908116911614610cc85760405162461bcd60e51b815260040161032690612a44565b610cd1816102d2565b610ced5760405162461bcd60e51b8152600401610326906127d1565b6001600160a01b038116600090815261013060205260408120805460ff1916905561013254905b81811015610df057826001600160a01b03166101328281548110610d3457fe5b6000918252602090912001546001600160a01b03161415610de8576101326001830381548110610d6057fe5b60009182526020909120015461013280546001600160a01b039092169183908110610d8757fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550610132805480610dc157fe5b600082815260209020810160001990810180546001600160a01b0319169055019055610df0565b600101610d14565b505050565b610134546001600160a01b031681565b610e0d6110cb565b6065546001600160a01b03908116911614610e3a5760405162461bcd60e51b815260040161032690612a44565b610e43816102d2565b15610e605760405162461bcd60e51b815260040161032690612928565b6001600160a01b038116600081815261013060209081526040808320805460ff191660019081179091556101328054918201815584527fc53bdfd4aa1ab65dfdaf681ca6bda958ae4a123d4ed68c4277796592280e78350180546001600160a01b03191685179055805163fdf262b760e01b8152905192939263fdf262b792600480840193919291829003018186803b158015610efc57600080fd5b505afa158015610f10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f349190612436565b9050610f3f816110cf565b610fd957610133805460018082019092557f92e985329fb94cc1b424ebb0f7f2929b6d27383ca94c0ec71c44fb48bdf96d2c0180546001600160a01b0319166001600160a01b0384169081179091556000908152610131602052604090819020805460ff1916909217909155517f784c8f4dbf0ffedd6e72c76501c545a70f8b203b30a26ce542bf92ba87c248a4906107d1908390612527565b5050565b610fe56110cb565b6065546001600160a01b039081169116146110125760405162461bcd60e51b815260040161032690612a44565b61013680546001600160a01b0319166001600160a01b0383811691909117918290556040805163eb7c8c2560e01b81529051929091169163eb7c8c2591600480820192602092909190829003018186803b15801561106f57600080fd5b505afa158015611083573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a79190612436565b61013580546001600160a01b0319166001600160a01b039290921691909117905550565b3390565b6001600160a01b03166000908152610131602052604090205460ff1690565b6110f66123e7565b611100823061188e565b92915050565b5190565b6111126123e7565b61111a6123e7565b8251845161112d9163ffffffff61192216565b81529392505050565b606061114183611964565b905060005b815181101561129b576111576123e7565b61115f6123e7565b6101345484516001600160a01b039091169063c643ea639086908690811061118357fe5b602002602001015188886040518463ffffffff1660e01b81526004016111ab939291906125ac565b60206040518083038186803b1580156111c357600080fd5b505afa1580156111d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111fb91906124b6565b905061121c6104b485858151811061120f57fe5b60200260200101516110ee565b61122582611106565b116112565761124b84848151811061123957fe5b6020026020010151878361079a61167a565b915050505050610fd9565b61127d84848151811061126557fe5b60200260200101518761079287878151811061120f57fe5b915061128f858363ffffffff61110a16565b94505050600101611146565b5060006112a783611106565b1115610df0576112b56123e7565b610134546101355460405163c643ea6360e01b81526001600160a01b039283169263c643ea63926112ef92911690889088906004016125ac565b60206040518083038186803b15801561130757600080fd5b505afa15801561131b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061133f91906124b6565b6101365460405163b90ffc4160e01b81529192506001600160a01b03169063b90ffc4190611371908490600401612ad7565b600060405180830381600087803b15801561138b57600080fd5b505af115801561139f573d6000803e3d6000fd5b5050610135546113bf92506001600160a01b03169050858361079a61167a565b5050505050565b6113cf83611cef565b6113d76123e7565b6113e1848461188e565b905060006113ef8584611d39565b905060006060866001600160a01b031663a9059cbb60e01b878560405160240161141a92919061253b565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051611458919061250b565b6000604051808303816000865af19150503d8060008114611495576040519150601f19603f3d011682016040523d82523d6000602084013e61149a565b606091505b50915091508180156114c45750805115806114c45750808060200190518101906114c49190612416565b6114e05760405162461bcd60e51b81526004016103269061265d565b6114ec87878587611daf565b50505050505050565b610133546000908061150b576000915050610842565b80600114156115415761013360008154811061152357fe5b6000918252602090912001546001600160a01b031691506108429050565b600061013360008154811061155257fe5b6000918252602090912001546001600160a01b03169050806115726123e7565b61157b836110ee565b905060015b84811015611670576000610133828154811061159857fe5b6000918252602090912001546001600160a01b031690506115b76123e7565b610134546001600160a01b031663c1094e5b83886115d4826110ee565b6040518463ffffffff1660e01b81526004016115f2939291906125ac565b60206040518083038186803b15801561160a57600080fd5b505afa15801561161e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061164291906124b6565b90506000611656828663ffffffff611e0816565b60000b1315611666578194508093505b5050600101611580565b5090935050505090565b6116826123e7565b5060408051602081019091526000815290565b61169d6123e7565b6116a683611106565b6116b9576116b261167a565b905061178c565b610134546116d29086906001600160a01b031685611e39565b610134546001600160a01b031663e5e75d1e868686866116f061167a565b6040518663ffffffff1660e01b81526004016117109594939291906125cf565b602060405180830381600087803b15801561172a57600080fd5b505af115801561173e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176291906124b6565b9050600061176f82611106565b1161178c5760405162461bcd60e51b8152600401610326906127fa565b949350505050565b303b1590565b600054610100900460ff16806117b357506117b3611794565b806117c1575060005460ff16155b6117dd5760405162461bcd60e51b8152600401610326906128da565b600054610100900460ff16158015611808576000805460ff1961ff0019909116610100171660011790555b611810611e5f565b610942611ee0565b600054610100900460ff16806118315750611831611794565b8061183f575060005460ff16155b61185b5760405162461bcd60e51b8152600401610326906128da565b600054610100900460ff16158015611886576000805460ff1961ff0019909116610100171660011790555b610942611fba565b6118966123e7565b61191b83846001600160a01b03166370a08231856040518263ffffffff1660e01b81526004016118c69190612527565b60206040518083038186803b1580156118de57600080fd5b505afa1580156118f2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061191691906124f3565b612049565b9392505050565b600061191b83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506120db565b6060806101338054806020026020016040519081016040528092919081815260200182805480156119be57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116119a0575b50939450600093505050505b6119d2610c24565b811015611c1857600061013382815481106119e957fe5b6000918252602090912001546001600160a01b03169050611a086123e7565b61013454610135546001600160a01b039182169163c1094e5b91859116611a2e826110ee565b6040518463ffffffff1660e01b8152600401611a4c939291906125ac565b60206040518083038186803b158015611a6457600080fd5b505afa158015611a78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a9c91906124b6565b9050825b8015611c0d57611aae6123e7565b6101345486516001600160a01b039091169063c1094e5b9088906000198601908110611ad657fe5b602002602001015161013560009054906101000a90046001600160a01b0316611b078a600188038151811061120f57fe5b6040518463ffffffff1660e01b8152600401611b25939291906125ac565b60206040518083038186803b158015611b3d57600080fd5b505afa158015611b51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b7591906124b6565b9050611b8081611106565b611b8984611106565b1115611c0357856001830381518110611b9e57fe5b6020026020010151868381518110611bb257fe5b60200260200101906001600160a01b031690816001600160a01b03168152505083866001840381518110611be257fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b5060001901611aa0565b5050506001016119ca565b50600181510367ffffffffffffffff81118015611c3457600080fd5b50604051908082528060200260200182016040528015611c5e578160200160208202803683370190505b5091506000805b8251811015611ce757846001600160a01b0316838281518110611c8457fe5b60200260200101516001600160a01b03161415611ca057611cdf565b828181518110611cac57fe5b6020026020010151848381518110611cc057fe5b6001600160a01b03909216602092830291909101909101526001909101905b600101611c65565b505050919050565b6000611cfa82612107565b6001600160a01b038316600090815260fd60205260409020549091508114610fd9576001600160a01b0391909116600090815260fd6020526040902055565b600080611d4584612107565b905060128110611d8357611d7b611d6382601263ffffffff61192216565b600a0a611d6f85611106565b9063ffffffff6121f416565b915050611100565b61178c611d9760128363ffffffff61192216565b600a0a611da385611106565b9063ffffffff61222e16565b611de2611dcc611dbf8685612049565b839063ffffffff61227016565b611dd6868661188e565b9063ffffffff611e0816565b60000b15611e025760405162461bcd60e51b81526004016103269061298a565b50505050565b805182516000911015611e1d57506001611100565b815183511015611e305750600019611100565b50600092915050565b611e4283611cef565b611e548383611e4f61167a565b612293565b610df0838383612293565b600054610100900460ff1680611e785750611e78611794565b80611e86575060005460ff16155b611ea25760405162461bcd60e51b8152600401610326906128da565b600054610100900460ff16158015610942576000805460ff1961ff0019909116610100171660011790558015610954576000805461ff001916905550565b600054610100900460ff1680611ef95750611ef9611794565b80611f07575060005460ff16155b611f235760405162461bcd60e51b8152600401610326906128da565b600054610100900460ff16158015611f4e576000805460ff1961ff0019909116610100171660011790555b6000611f586110cb565b606580546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015610954576000805461ff001916905550565b600054610100900460ff1680611fd35750611fd3611794565b80611fe1575060005460ff16155b611ffd5760405162461bcd60e51b8152600401610326906128da565b600054610100900460ff16158015612028576000805460ff1961ff0019909116610100171660011790555b60cb805460ff191660011790558015610954576000805461ff001916905550565b6120516123e7565b600061205c84612107565b9050601281106120a15760408051602081019091528061209661208684601263ffffffff61192216565b8690600a0a63ffffffff61222e16565b815250915050611100565b6040805160208101909152806120d16120c160128563ffffffff61192216565b8690600a0a63ffffffff6121f416565b9052949350505050565b600081848411156120ff5760405162461bcd60e51b815260040161032691906125ff565b505050900390565b6001600160a01b038116600090815260fd6020526040812054806111005760408051600481526024810182526020810180516001600160e01b031663313ce56760e01b17905290516000916060916001600160a01b038716916121699161250b565b600060405180830381855afa9150503d80600081146121a4576040519150601f19603f3d011682016040523d82523d6000602084013e6121a9565b606091505b50915091508180156121bb5750805115155b6121d75760405162461bcd60e51b815260040161032690612790565b808060200190518101906121eb91906124f3565b95945050505050565b60008261220357506000611100565b8282028284828161221057fe5b041461191b5760405162461bcd60e51b815260040161032690612857565b600061191b83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061238b565b6122786123e7565b6122806123e7565b8251845161112d9163ffffffff6123c216565b600060606001600160a01b03851663095ea7b360e01b856122b48887611d39565b6040516024016122c592919061253b565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051612303919061250b565b6000604051808303816000865af19150503d8060008114612340576040519150601f19603f3d011682016040523d82523d6000602084013e612345565b606091505b509150915081801561236f57508051158061236f57508080602001905181019061236f9190612416565b6113bf5760405162461bcd60e51b815260040161032690612953565b600081836123ac5760405162461bcd60e51b815260040161032691906125ff565b5060008385816123b857fe5b0495945050505050565b60008282018381101561191b5760405162461bcd60e51b8152600401610326906126cb565b6040518060200160405280600081525090565b60006020828403121561240b578081fd5b813561191b81612b3d565b600060208284031215612427578081fd5b8151801515811461191b578182fd5b600060208284031215612447578081fd5b815161191b81612b3d565b6000808284036040811215612465578182fd5b833561247081612b3d565b92506020601f1982011215612483578182fd5b506020830190509250929050565b6000602082840312156124a2578081fd5b6124ac6020612aea565b9135825250919050565b6000602082840312156124c7578081fd5b6124d16020612aea565b9151825250919050565b6000602082840312156124ec578081fd5b5035919050565b600060208284031215612504578081fd5b5051919050565b6000825161251d818460208701612b11565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b818110156125955783516001600160a01b031683529284019291840191600101612570565b50909695505050505050565b901515815260200190565b6001600160a01b0393841681529190921660208201529051604082015260600190565b6001600160a01b039586168152939094166020840152905160408301525160608201529051608082015260a00190565b600060208252825180602084015261261e816040850160208701612b11565b601f01601f19169190910160400192915050565b6020808252601190820152701d1bdad95b881b9bdd08195e1a5cdd1959607a1b604082015260600190565b6020808252601d908201527f446563696d616c45524332303a207472616e73666572206661696c6564000000604082015260600190565b60208082526019908201527f63616c6c6572206973206e6f742062656e656669636961727900000000000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526027908201527f5065727046694f776e61626c65557067726164653a2073616d652061732063616040820152666e64696461746560c81b606082015260800190565b60208082526027908201527f5065727046694f776e61626c65557067726164653a206e6f7420746865206e656040820152663b9037bbb732b960c91b606082015260800190565b60208082526021908201527f446563696d616c45524332303a2067657420646563696d616c73206661696c656040820152601960fa1b606082015260800190565b6020808252600f908201526e185b5b481b9bdd08195e1a5cdd1959608a1b604082015260600190565b60208082526013908201527222bc31b430b733b29039bbb0b81032b93937b960691b604082015260600190565b602080825260169082015275105cdcd95d081a5cc81b9bdd081cdd5c1c1bdc9d195960521b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b60208082526022908201527f5065727046694f776e61626c65557067726164653a207a65726f206164647265604082015261737360f01b606082015260800190565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201526d195b881a5b9a5d1a585b1a5e995960921b606082015260800190565b602080825260119082015270185b5b48185b1c9958591e481859191959607a1b604082015260600190565b6020808252601c908201527f446563696d616c45524332303a20617070726f7665206661696c656400000000604082015260600190565b60208082526022908201527f446563696d616c45524332303a2062616c616e636520696e636f6e73697374656040820152611b9d60f21b606082015260800190565b6020808252602f908201527f5065727046694f776e61626c65557067726164653a2063616e6469646174652060408201526e6973207a65726f206164647265737360881b606082015260800190565b6020808252600f908201526e08ceadcc840dcdee840cadcdeeaced608b1b604082015260600190565b6020808252602d908201527f5065727046694f776e61626c65557067726164653a2063616c6c65722069732060408201526c3737ba103a34329037bbb732b960991b606082015260800190565b60208082526026908201527f5065727046694f776e61626c65557067726164653a2073616d65206173206f726040820152651a59da5b985b60d21b606082015260800190565b9051815260200190565b90815260200190565b60405181810167ffffffffffffffff81118282101715612b0957600080fd5b604052919050565b60005b83811015612b2c578181015183820152602001612b14565b83811115611e025750506000910152565b6001600160a01b038116811461095457600080fdfea2646970667358221220b833a04613cfdc51f01aecc7bef720af7e03dee708f1be48aa821cbaae3be77164736f6c63430006090033\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Signer, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { KeeperRewardL1 } from \"../KeeperRewardL1\";\n\nexport class KeeperRewardL1__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<KeeperRewardL1> {\n    return super.deploy(overrides || {}) as Promise<KeeperRewardL1>;\n  }\n  getDeployTransaction(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  attach(address: string): KeeperRewardL1 {\n    return super.attach(address) as KeeperRewardL1;\n  }\n  connect(signer: Signer): KeeperRewardL1__factory {\n    return super.connect(signer) as KeeperRewardL1__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): KeeperRewardL1 {\n    return new Contract(address, _abi, signerOrProvider) as KeeperRewardL1;\n  }\n}\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"keeper\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"bytes4\",\n        name: \"func\",\n        type: \"bytes4\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"reward\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"KeeperCalled\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"candidate\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"_perpToken\",\n        type: \"address\",\n      },\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"rewardToken\",\n    outputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes4[]\",\n        name: \"_funcSelectors\",\n        type: \"bytes4[]\",\n      },\n      {\n        internalType: \"address[]\",\n        name: \"_contracts\",\n        type: \"address[]\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"_rewardAmount\",\n        type: \"uint256[]\",\n      },\n    ],\n    name: \"setKeeperFunctions\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"setOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes4\",\n        name: \"\",\n        type: \"bytes4\",\n      },\n    ],\n    name: \"tasksMap\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"contractAddr\",\n        type: \"address\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"rewardAmount\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"updateOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_priceFeedKey\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"updatePriceFeed\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x608060405234801561001057600080fd5b50611683806100206000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80638da5cb5b116100665780638da5cb5b14610104578063a2d4c5511461010c578063bc5920ba1461012d578063c4d66de814610135578063f7c618c1146101485761009e565b806313af4035146100a35780636c8381f8146100b8578063715018a6146100d65780637a2e6781146100de5780638d49693f146100f1575b600080fd5b6100b66100b1366004611078565b610150565b005b6100c0610232565b6040516100cd91906111be565b60405180910390f35b6100b6610241565b6100b66100ec366004611094565b6102c0565b6100b66100ff36600461114a565b61040e565b6100c0610497565b61011f61011a366004611162565b6104a6565b6040516100cd9291906111fd565b6100b66104d7565b6100b6610143366004611078565b61059a565b6100c0610627565b610158610636565b6065546001600160a01b0390811691161461018e5760405162461bcd60e51b815260040161018590611579565b60405180910390fd5b6001600160a01b0381166101b45760405162461bcd60e51b815260040161018590611421565b6065546001600160a01b03828116911614156101e25760405162461bcd60e51b8152600401610185906115c6565b6066546001600160a01b03828116911614156102105760405162461bcd60e51b8152600401610185906112da565b606680546001600160a01b0319166001600160a01b0392909216919091179055565b6066546001600160a01b031690565b610249610636565b6065546001600160a01b039081169116146102765760405162461bcd60e51b815260040161018590611579565b6065546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3606580546001600160a01b0319169055565b6102c8610636565b6065546001600160a01b039081169116146102f55760405162461bcd60e51b815260040161018590611579565b84838114801561030457508082145b80156103105750600081115b61032c5760405162461bcd60e51b8152600401610185906114b1565b60005b8181101561040457600088888381811061034557fe5b905060200201602081019061035a9190611162565b905086868381811061036857fe5b905060200201602081019061037d9190611078565b6001600160e01b03198216600090815260cd602090815260409182902080546001600160a01b0319166001600160a01b03949094169390931790925580519182019052808686858181106103cd57fe5b602090810292909201359092526001600160e01b0319909316600090815260cd90935250604090912090516001918201550161032f565b5050505050505050565b637a31f0c760e11b61041e610ff4565b6104278261063a565b8051604051637a31f0c760e11b81529192506001600160a01b03169063f463e18e90610457908690600401611230565b600060405180830381600087803b15801561047157600080fd5b505af1158015610485573d6000803e3d6000fd5b505050506104928261069b565b505050565b6065546001600160a01b031690565b60cd60209081526000918252604091829020805483519283019093526001015481526001600160a01b039091169082565b6066546001600160a01b03166104ff5760405162461bcd60e51b81526004016101859061152a565b610507610636565b6066546001600160a01b039081169116146105345760405162461bcd60e51b815260040161018590611321565b6066546065546040516001600160a01b0392831692909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360668054606580546001600160a01b03199081166001600160a01b03841617909155169055565b600054610100900460ff16806105b357506105b3610726565b806105c1575060005460ff16155b6105dd5760405162461bcd60e51b815260040161018590611463565b600054610100900460ff16158015610608576000805460ff1961ff0019909116610100171660011790555b6106118261072c565b8015610623576000805461ff00191690555b5050565b60cc546001600160a01b031681565b3390565b610642610ff4565b506001600160e01b03198116600090815260cd60209081526040918290208251808401845281546001600160a01b0316815283518084019094526001909101548352908101919091528051610696906107d2565b919050565b6106a3610ff4565b6106ac8261063a565b905060006106b8610636565b60cc5460208401519192506106da916001600160a01b039091169083906107fb565b7fd28ad844a5a7a32ffacfc169fad3a2b39b8e7251cacd5976da669031e1d3e86e818461070a856020015161092a565b604051610719939291906111d2565b60405180910390a1505050565b303b1590565b600054610100900460ff16806107455750610745610726565b80610753575060005460ff16155b61076f5760405162461bcd60e51b815260040161018590611463565b600054610100900460ff1615801561079a576000805460ff1961ff0019909116610100171660011790555b6107a261092e565b60cc80546001600160a01b0319166001600160a01b0384161790558015610623576000805461ff00191690555050565b6001600160a01b0381166107f85760405162461bcd60e51b8152600401610185906113ea565b50565b610804836109c0565b61080c61101c565b6108168484610a0a565b905060006108248584610aa0565b905060006060866001600160a01b031663a9059cbb60e01b878560405160240161084f929190611217565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161088d91906111a2565b6000604051808303816000865af19150503d80600081146108ca576040519150601f19603f3d011682016040523d82523d6000602084013e6108cf565b606091505b50915091508180156108f95750805115806108f95750808060200190518101906108f9919061112a565b6109155760405162461bcd60e51b81526004016101859061126c565b61092187878587610b1e565b50505050505050565b5190565b600054610100900460ff16806109475750610947610726565b80610955575060005460ff16155b6109715760405162461bcd60e51b815260040161018590611463565b600054610100900460ff1615801561099c576000805460ff1961ff0019909116610100171660011790555b6109a4610b77565b6109ac610bf8565b80156107f8576000805461ff001916905550565b60006109cb82610cd2565b6001600160a01b0383166000908152609960205260409020549091508114610623576001600160a01b0391909116600090815260996020526040902055565b610a1261101c565b610a9783846001600160a01b03166370a08231856040518263ffffffff1660e01b8152600401610a4291906111be565b60206040518083038186803b158015610a5a57600080fd5b505afa158015610a6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a92919061118a565b610dbf565b90505b92915050565b600080610aac84610cd2565b905060128110610aea57610ae2610aca82601263ffffffff610e5116565b600a0a610ad68561092a565b9063ffffffff610e9316565b915050610a9a565b610b16610afe60128363ffffffff610e5116565b600a0a610b0a8561092a565b9063ffffffff610ecd16565b949350505050565b610b51610b3b610b2e8685610dbf565b839063ffffffff610f0f16565b610b458686610a0a565b9063ffffffff610f3b16565b60000b15610b715760405162461bcd60e51b8152600401610185906114e8565b50505050565b600054610100900460ff1680610b905750610b90610726565b80610b9e575060005460ff16155b610bba5760405162461bcd60e51b815260040161018590611463565b600054610100900460ff161580156109ac576000805460ff1961ff00199091166101001716600117905580156107f8576000805461ff001916905550565b600054610100900460ff1680610c115750610c11610726565b80610c1f575060005460ff16155b610c3b5760405162461bcd60e51b815260040161018590611463565b600054610100900460ff16158015610c66576000805460ff1961ff0019909116610100171660011790555b6000610c70610636565b606580546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35080156107f8576000805461ff001916905550565b6001600160a01b03811660009081526099602052604081205480610a9a5760408051600481526024810182526020810180516001600160e01b031663313ce56760e01b17905290516000916060916001600160a01b03871691610d34916111a2565b600060405180830381855afa9150503d8060008114610d6f576040519150601f19603f3d011682016040523d82523d6000602084013e610d74565b606091505b5091509150818015610d865750805115155b610da25760405162461bcd60e51b815260040161018590611368565b80806020019051810190610db6919061118a565b95945050505050565b610dc761101c565b6000610dd284610cd2565b905060128110610e1757604080516020810190915280610e0c610dfc84601263ffffffff610e5116565b8690600a0a63ffffffff610ecd16565b815250915050610a9a565b604080516020810190915280610e47610e3760128563ffffffff610e5116565b8690600a0a63ffffffff610e9316565b9052949350505050565b6000610a9783836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610f6c565b600082610ea257506000610a9a565b82820282848281610eaf57fe5b0414610a975760405162461bcd60e51b8152600401610185906113a9565b6000610a9783836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250610f98565b610f1761101c565b610f1f61101c565b82518451610f329163ffffffff610fcf16565b81529392505050565b805182516000911015610f5057506001610a9a565b815183511015610f635750600019610a9a565b50600092915050565b60008184841115610f905760405162461bcd60e51b81526004016101859190611239565b505050900390565b60008183610fb95760405162461bcd60e51b81526004016101859190611239565b506000838581610fc557fe5b0495945050505050565b600082820183811015610a975760405162461bcd60e51b8152600401610185906112a3565b604051806040016040528060006001600160a01b0316815260200161101761101c565b905290565b6040518060200160405280600081525090565b60008083601f840112611040578182fd5b50813567ffffffffffffffff811115611057578182fd5b602083019150836020808302850101111561107157600080fd5b9250929050565b600060208284031215611089578081fd5b8135610a9781611638565b600080600080600080606087890312156110ac578182fd5b863567ffffffffffffffff808211156110c3578384fd5b6110cf8a838b0161102f565b909850965060208901359150808211156110e7578384fd5b6110f38a838b0161102f565b9096509450604089013591508082111561110b578384fd5b5061111889828a0161102f565b979a9699509497509295939492505050565b60006020828403121561113b578081fd5b81518015158114610a97578182fd5b60006020828403121561115b578081fd5b5035919050565b600060208284031215611173578081fd5b81356001600160e01b031981168114610a97578182fd5b60006020828403121561119b578081fd5b5051919050565b600082516111b481846020870161160c565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039390931683526001600160e01b0319919091166020830152604082015260600190565b6001600160a01b0392909216825251602082015260400190565b6001600160a01b03929092168252602082015260400190565b90815260200190565b600060208252825180602084015261125881604085016020870161160c565b601f01601f19169190910160400192915050565b6020808252601d908201527f446563696d616c45524332303a207472616e73666572206661696c6564000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526027908201527f5065727046694f776e61626c65557067726164653a2073616d652061732063616040820152666e64696461746560c81b606082015260800190565b60208082526027908201527f5065727046694f776e61626c65557067726164653a206e6f7420746865206e656040820152663b9037bbb732b960c91b606082015260800190565b60208082526021908201527f446563696d616c45524332303a2067657420646563696d616c73206661696c656040820152601960fa1b606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b60208082526019908201527f63616e6e6f742066696e6420636f6e7472616374206164647200000000000000604082015260600190565b60208082526022908201527f5065727046694f776e61626c65557067726164653a207a65726f206164647265604082015261737360f01b606082015260800190565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201526d195b881a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526017908201527f696e636f6e73697374656e7420696e7075742073697a65000000000000000000604082015260600190565b60208082526022908201527f446563696d616c45524332303a2062616c616e636520696e636f6e73697374656040820152611b9d60f21b606082015260800190565b6020808252602f908201527f5065727046694f776e61626c65557067726164653a2063616e6469646174652060408201526e6973207a65726f206164647265737360881b606082015260800190565b6020808252602d908201527f5065727046694f776e61626c65557067726164653a2063616c6c65722069732060408201526c3737ba103a34329037bbb732b960991b606082015260800190565b60208082526026908201527f5065727046694f776e61626c65557067726164653a2073616d65206173206f726040820152651a59da5b985b60d21b606082015260800190565b60005b8381101561162757818101518382015260200161160f565b83811115610b715750506000910152565b6001600160a01b03811681146107f857600080fdfea2646970667358221220564bd2195109b2fe875f955b8ab794c19c280c9d2cd9e6bd606c446c40cabb6164736f6c63430006090033\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Signer, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { KeeperRewardL2 } from \"../KeeperRewardL2\";\n\nexport class KeeperRewardL2__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<KeeperRewardL2> {\n    return super.deploy(overrides || {}) as Promise<KeeperRewardL2>;\n  }\n  getDeployTransaction(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  attach(address: string): KeeperRewardL2 {\n    return super.attach(address) as KeeperRewardL2;\n  }\n  connect(signer: Signer): KeeperRewardL2__factory {\n    return super.connect(signer) as KeeperRewardL2__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): KeeperRewardL2 {\n    return new Contract(address, _abi, signerOrProvider) as KeeperRewardL2;\n  }\n}\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"keeper\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"bytes4\",\n        name: \"func\",\n        type: \"bytes4\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"reward\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"KeeperCalled\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"candidate\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"_perpToken\",\n        type: \"address\",\n      },\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IAmm\",\n        name: \"_amm\",\n        type: \"address\",\n      },\n    ],\n    name: \"payFunding\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"rewardToken\",\n    outputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes4[]\",\n        name: \"_funcSelectors\",\n        type: \"bytes4[]\",\n      },\n      {\n        internalType: \"address[]\",\n        name: \"_contracts\",\n        type: \"address[]\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"_rewardAmount\",\n        type: \"uint256[]\",\n      },\n    ],\n    name: \"setKeeperFunctions\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"setOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes4\",\n        name: \"\",\n        type: \"bytes4\",\n      },\n    ],\n    name: \"tasksMap\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"contractAddr\",\n        type: \"address\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"rewardAmount\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"updateOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x608060405234801561001057600080fd5b50611662806100206000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80638da5cb5b116100665780638da5cb5b14610104578063a2d4c5511461010c578063bc5920ba1461012d578063c4d66de814610135578063f7c618c1146101485761009e565b806313af4035146100a35780633e09fa10146100b85780636c8381f8146100cb578063715018a6146100e95780637a2e6781146100f1575b600080fd5b6100b66100b1366004611078565b610150565b005b6100b66100c6366004611078565b610232565b6100d36102bb565b6040516100e091906111a6565b60405180910390f35b6100b66102ca565b6100b66100ff366004611094565b610349565b6100d3610497565b61011f61011a36600461114a565b6104a6565b6040516100e09291906111e5565b6100b66104d7565b6100b6610143366004611078565b61059a565b6100d3610627565b610158610636565b6065546001600160a01b0390811691161461018e5760405162461bcd60e51b815260040161018590611558565b60405180910390fd5b6001600160a01b0381166101b45760405162461bcd60e51b815260040161018590611400565b6065546001600160a01b03828116911614156101e25760405162461bcd60e51b8152600401610185906115a5565b6066546001600160a01b03828116911614156102105760405162461bcd60e51b8152600401610185906112b9565b606680546001600160a01b0319166001600160a01b0392909216919091179055565b6303e09fa160e41b610242610ff4565b61024b8261063a565b80516040516303e09fa160e41b81529192506001600160a01b031690633e09fa109061027b9086906004016111a6565b600060405180830381600087803b15801561029557600080fd5b505af11580156102a9573d6000803e3d6000fd5b505050506102b68261069b565b505050565b6066546001600160a01b031690565b6102d2610636565b6065546001600160a01b039081169116146102ff5760405162461bcd60e51b815260040161018590611558565b6065546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3606580546001600160a01b0319169055565b610351610636565b6065546001600160a01b0390811691161461037e5760405162461bcd60e51b815260040161018590611558565b84838114801561038d57508082145b80156103995750600081115b6103b55760405162461bcd60e51b815260040161018590611490565b60005b8181101561048d5760008888838181106103ce57fe5b90506020020160208101906103e3919061114a565b90508686838181106103f157fe5b90506020020160208101906104069190611078565b6001600160e01b03198216600090815260cd602090815260409182902080546001600160a01b0319166001600160a01b039490941693909317909255805191820190528086868581811061045657fe5b602090810292909201359092526001600160e01b0319909316600090815260cd9093525060409091209051600191820155016103b8565b5050505050505050565b6065546001600160a01b031690565b60cd60209081526000918252604091829020805483519283019093526001015481526001600160a01b039091169082565b6066546001600160a01b03166104ff5760405162461bcd60e51b815260040161018590611509565b610507610636565b6066546001600160a01b039081169116146105345760405162461bcd60e51b815260040161018590611300565b6066546065546040516001600160a01b0392831692909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360668054606580546001600160a01b03199081166001600160a01b03841617909155169055565b600054610100900460ff16806105b357506105b3610726565b806105c1575060005460ff16155b6105dd5760405162461bcd60e51b815260040161018590611442565b600054610100900460ff16158015610608576000805460ff1961ff0019909116610100171660011790555b6106118261072c565b8015610623576000805461ff00191690555b5050565b60cc546001600160a01b031681565b3390565b610642610ff4565b506001600160e01b03198116600090815260cd60209081526040918290208251808401845281546001600160a01b0316815283518084019094526001909101548352908101919091528051610696906107d2565b919050565b6106a3610ff4565b6106ac8261063a565b905060006106b8610636565b60cc5460208401519192506106da916001600160a01b039091169083906107fb565b7fd28ad844a5a7a32ffacfc169fad3a2b39b8e7251cacd5976da669031e1d3e86e818461070a856020015161092a565b604051610719939291906111ba565b60405180910390a1505050565b303b1590565b600054610100900460ff16806107455750610745610726565b80610753575060005460ff16155b61076f5760405162461bcd60e51b815260040161018590611442565b600054610100900460ff1615801561079a576000805460ff1961ff0019909116610100171660011790555b6107a261092e565b60cc80546001600160a01b0319166001600160a01b0384161790558015610623576000805461ff00191690555050565b6001600160a01b0381166107f85760405162461bcd60e51b8152600401610185906113c9565b50565b610804836109c0565b61080c61101c565b6108168484610a0a565b905060006108248584610aa0565b905060006060866001600160a01b031663a9059cbb60e01b878560405160240161084f9291906111ff565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161088d919061118a565b6000604051808303816000865af19150503d80600081146108ca576040519150601f19603f3d011682016040523d82523d6000602084013e6108cf565b606091505b50915091508180156108f95750805115806108f95750808060200190518101906108f9919061112a565b6109155760405162461bcd60e51b81526004016101859061124b565b61092187878587610b1e565b50505050505050565b5190565b600054610100900460ff16806109475750610947610726565b80610955575060005460ff16155b6109715760405162461bcd60e51b815260040161018590611442565b600054610100900460ff1615801561099c576000805460ff1961ff0019909116610100171660011790555b6109a4610b77565b6109ac610bf8565b80156107f8576000805461ff001916905550565b60006109cb82610cd2565b6001600160a01b0383166000908152609960205260409020549091508114610623576001600160a01b0391909116600090815260996020526040902055565b610a1261101c565b610a9783846001600160a01b03166370a08231856040518263ffffffff1660e01b8152600401610a4291906111a6565b60206040518083038186803b158015610a5a57600080fd5b505afa158015610a6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a929190611172565b610dbf565b90505b92915050565b600080610aac84610cd2565b905060128110610aea57610ae2610aca82601263ffffffff610e5116565b600a0a610ad68561092a565b9063ffffffff610e9316565b915050610a9a565b610b16610afe60128363ffffffff610e5116565b600a0a610b0a8561092a565b9063ffffffff610ecd16565b949350505050565b610b51610b3b610b2e8685610dbf565b839063ffffffff610f0f16565b610b458686610a0a565b9063ffffffff610f3b16565b60000b15610b715760405162461bcd60e51b8152600401610185906114c7565b50505050565b600054610100900460ff1680610b905750610b90610726565b80610b9e575060005460ff16155b610bba5760405162461bcd60e51b815260040161018590611442565b600054610100900460ff161580156109ac576000805460ff1961ff00199091166101001716600117905580156107f8576000805461ff001916905550565b600054610100900460ff1680610c115750610c11610726565b80610c1f575060005460ff16155b610c3b5760405162461bcd60e51b815260040161018590611442565b600054610100900460ff16158015610c66576000805460ff1961ff0019909116610100171660011790555b6000610c70610636565b606580546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35080156107f8576000805461ff001916905550565b6001600160a01b03811660009081526099602052604081205480610a9a5760408051600481526024810182526020810180516001600160e01b031663313ce56760e01b17905290516000916060916001600160a01b03871691610d349161118a565b600060405180830381855afa9150503d8060008114610d6f576040519150601f19603f3d011682016040523d82523d6000602084013e610d74565b606091505b5091509150818015610d865750805115155b610da25760405162461bcd60e51b815260040161018590611347565b80806020019051810190610db69190611172565b95945050505050565b610dc761101c565b6000610dd284610cd2565b905060128110610e1757604080516020810190915280610e0c610dfc84601263ffffffff610e5116565b8690600a0a63ffffffff610ecd16565b815250915050610a9a565b604080516020810190915280610e47610e3760128563ffffffff610e5116565b8690600a0a63ffffffff610e9316565b9052949350505050565b6000610a9783836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610f6c565b600082610ea257506000610a9a565b82820282848281610eaf57fe5b0414610a975760405162461bcd60e51b815260040161018590611388565b6000610a9783836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250610f98565b610f1761101c565b610f1f61101c565b82518451610f329163ffffffff610fcf16565b81529392505050565b805182516000911015610f5057506001610a9a565b815183511015610f635750600019610a9a565b50600092915050565b60008184841115610f905760405162461bcd60e51b81526004016101859190611218565b505050900390565b60008183610fb95760405162461bcd60e51b81526004016101859190611218565b506000838581610fc557fe5b0495945050505050565b600082820183811015610a975760405162461bcd60e51b815260040161018590611282565b604051806040016040528060006001600160a01b0316815260200161101761101c565b905290565b6040518060200160405280600081525090565b60008083601f840112611040578182fd5b50813567ffffffffffffffff811115611057578182fd5b602083019150836020808302850101111561107157600080fd5b9250929050565b600060208284031215611089578081fd5b8135610a9781611617565b600080600080600080606087890312156110ac578182fd5b863567ffffffffffffffff808211156110c3578384fd5b6110cf8a838b0161102f565b909850965060208901359150808211156110e7578384fd5b6110f38a838b0161102f565b9096509450604089013591508082111561110b578384fd5b5061111889828a0161102f565b979a9699509497509295939492505050565b60006020828403121561113b578081fd5b81518015158114610a97578182fd5b60006020828403121561115b578081fd5b81356001600160e01b031981168114610a97578182fd5b600060208284031215611183578081fd5b5051919050565b6000825161119c8184602087016115eb565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039390931683526001600160e01b0319919091166020830152604082015260600190565b6001600160a01b0392909216825251602082015260400190565b6001600160a01b03929092168252602082015260400190565b60006020825282518060208401526112378160408501602087016115eb565b601f01601f19169190910160400192915050565b6020808252601d908201527f446563696d616c45524332303a207472616e73666572206661696c6564000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526027908201527f5065727046694f776e61626c65557067726164653a2073616d652061732063616040820152666e64696461746560c81b606082015260800190565b60208082526027908201527f5065727046694f776e61626c65557067726164653a206e6f7420746865206e656040820152663b9037bbb732b960c91b606082015260800190565b60208082526021908201527f446563696d616c45524332303a2067657420646563696d616c73206661696c656040820152601960fa1b606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b60208082526019908201527f63616e6e6f742066696e6420636f6e7472616374206164647200000000000000604082015260600190565b60208082526022908201527f5065727046694f776e61626c65557067726164653a207a65726f206164647265604082015261737360f01b606082015260800190565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201526d195b881a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526017908201527f696e636f6e73697374656e7420696e7075742073697a65000000000000000000604082015260600190565b60208082526022908201527f446563696d616c45524332303a2062616c616e636520696e636f6e73697374656040820152611b9d60f21b606082015260800190565b6020808252602f908201527f5065727046694f776e61626c65557067726164653a2063616e6469646174652060408201526e6973207a65726f206164647265737360881b606082015260800190565b6020808252602d908201527f5065727046694f776e61626c65557067726164653a2063616c6c65722069732060408201526c3737ba103a34329037bbb732b960991b606082015260800190565b60208082526026908201527f5065727046694f776e61626c65557067726164653a2073616d65206173206f726040820152651a59da5b985b60d21b606082015260800190565b60005b838110156116065781810151838201526020016115ee565b83811115610b715750506000910152565b6001600160a01b03811681146107f857600080fdfea2646970667358221220b90f7c441c2b27c0105ce215bd70c0091ab444550af2be498d9a702b18b4ede964736f6c63430006090033\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Signer, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { L2PriceFeed } from \"../L2PriceFeed\";\n\nexport class L2PriceFeed__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<L2PriceFeed> {\n    return super.deploy(overrides || {}) as Promise<L2PriceFeed>;\n  }\n  getDeployTransaction(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  attach(address: string): L2PriceFeed {\n    return super.attach(address) as L2PriceFeed;\n  }\n  connect(signer: Signer): L2PriceFeed__factory {\n    return super.connect(signer) as L2PriceFeed__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): L2PriceFeed {\n    return new Contract(address, _abi, signerOrProvider) as L2PriceFeed;\n  }\n}\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"bytes32\",\n        name: \"key\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"price\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"timestamp\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"roundId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"PriceFeedDataSet\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_priceFeedKey\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"addAggregator\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"ambBridge\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"candidate\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_priceFeedKey\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"getLatestTimestamp\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_priceFeedKey\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_numOfRoundBack\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getPreviousPrice\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_priceFeedKey\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_numOfRoundBack\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getPreviousTimestamp\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_priceFeedKey\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"getPrice\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_priceFeedKey\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"getPriceFeedLength\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"length\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_priceFeedKey\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_interval\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getTwapPrice\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_ambBridge\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_rootBridge\",\n        type: \"address\",\n      },\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"priceFeedKeys\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"priceFeedMap\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"registered\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_priceFeedKey\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"removeAggregator\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"rootBridge\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_priceFeedKey\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_price\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_timestamp\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_roundId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"setLatestData\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"setOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_rootBridge\",\n        type: \"address\",\n      },\n    ],\n    name: \"setRootBridge\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"updateOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x608060405234801561001057600080fd5b50611a1b806100206000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c80636c8381f8116100ad578063914b14c511610071578063914b14c514610306578063a2173df414610329578063a7596ff81461034c578063bc5920ba14610372578063cdea7c701461037a5761012c565b80636c8381f8146102b4578063715018a6146102bc578063744aca14146102c45780637ad22632146102e15780638da5cb5b146102fe5761012c565b80632bed9e0c116100f45780632bed9e0c1461020c57806331d98b3f14610229578063485cc9551461024657806359bb180e1461027457806359d684cf146102975761012c565b8063031d64bd146101315780630ba54df61461016257806313af403514610186578063250742cc146101ac5780632a0ab1dd146101dd575b600080fd5b6101606004803603608081101561014757600080fd5b5080359060208101359060408101359060600135610382565b005b61016a6105b2565b604080516001600160a01b039092168252519081900360200190f35b6101606004803603602081101561019c57600080fd5b50356001600160a01b03166105c1565b6101c9600480360360208110156101c257600080fd5b5035610716565b604080519115158252519081900360200190f35b6101fa600480360360208110156101f357600080fd5b503561072b565b60408051918252519081900360200190f35b6101606004803603602081101561022257600080fd5b5035610749565b6101fa6004803603602081101561023f57600080fd5b5035610862565b6101606004803603604081101561025c57600080fd5b506001600160a01b038135811691602001351661093e565b6101fa6004803603604081101561028a57600080fd5b5080359060200135610a19565b610160600480360360208110156102ad57600080fd5b5035610b08565b61016a610bb4565b610160610bc4565b6101fa600480360360208110156102da57600080fd5b5035610c62565b6101fa600480360360208110156102f757600080fd5b5035610c77565b61016a610d1c565b6101fa6004803603604081101561031c57600080fd5b5080359060200135610d2b565b6101fa6004803603604081101561033f57600080fd5b5080359060200135610e19565b6101606004803603602081101561036257600080fd5b50356001600160a01b031661111f565b6101606111e0565b61016a6112e1565b60cb546001600160a01b03166103966112f0565b6001600160a01b0316146103de576040805162461bcd60e51b815260206004820152600a60248201526921616d6242726964676560b01b604482015290519081900360640190fd5b60cc5460cb546040805163d67bdd2560e01b815290516001600160a01b03938416939092169163d67bdd2591600480820192602092909190829003018186803b15801561042a57600080fd5b505afa15801561043e573d6000803e3d6000fd5b505050506040513d602081101561045457600080fd5b50516001600160a01b0316146104a9576040805162461bcd60e51b815260206004820152601560248201527473656e646572206e6f7420526f6f7442726964676560581b604482015290519081900360640190fd5b6104b48460016112f4565b6104bd84610c77565b8211610506576040805162461bcd60e51b81526020600482015260136024820152720696e636f72726563742074696d657374616d7606c1b604482015290519081900360640190fd5b61050e61183c565b506040805160608082018352838252602080830187815283850187815260008a815260cd8452868120600190810180548083018255908352918590208751600390930201918255925192810192909255516002909101558351888152908101879052808401869052908101849052915190917fb3b3d4e42c62d694318e0149f90ed0f2e7be9757332da15fd55ae5a01d41722c919081900360800190a15050505050565b60cb546001600160a01b031681565b6105c96112f0565b6065546001600160a01b039081169116146106155760405162461bcd60e51b815260040180806020018281038252602d815260200180611993602d913960400191505060405180910390fd5b6001600160a01b03811661065a5760405162461bcd60e51b81526004018080602001828103825260228152602001806119146022913960400191505060405180910390fd5b6065546001600160a01b03828116911614156106a75760405162461bcd60e51b81526004018080602001828103825260268152602001806119c06026913960400191505060405180910390fd5b6066546001600160a01b03828116911614156106f45760405162461bcd60e51b81526004018080602001828103825260278152602001806118a56027913960400191505060405180910390fd5b606680546001600160a01b0319166001600160a01b0392909216919091179055565b60cd6020526000908152604090205460ff1681565b60ce818154811061073857fe5b600091825260209091200154905081565b6107516112f0565b6065546001600160a01b0390811691161461079d5760405162461bcd60e51b815260040180806020018281038252602d815260200180611993602d913960400191505060405180910390fd5b6107a88160016112f4565b600081815260cd60205260408120805460ff19168155906107cc600183018261185d565b505060ce5460005b8181101561085d578260ce82815481106107ea57fe5b906000526020600020015414156108555760ce600183038154811061080b57fe5b906000526020600020015460ce828154811061082357fe5b60009182526020909120015560ce80548061083a57fe5b6001900381819060005260206000200160009055905561085d565b6001016107d4565b505050565b600061086d82611398565b6108b0576040805162461bcd60e51b815260206004820152600f60248201526e1ad95e481b9bdd08195e1a5cdd1959608a1b604482015290519081900360640190fd5b60006108bb83610c62565b905060008111610902576040805162461bcd60e51b815260206004820152600d60248201526c6e6f207072696365206461746160981b604482015290519081900360640190fd5b600083815260cd602052604090206001018054600019830190811061092357fe5b9060005260206000209060030201600101549150505b919050565b600054610100900460ff168061095757506109576113ad565b80610965575060005460ff16155b6109a05760405162461bcd60e51b815260040180806020018281038252602e815260200180611936602e913960400191505060405180910390fd5b600054610100900460ff161580156109cb576000805460ff1961ff0019909116610100171660011790555b6109d36113b3565b60cb80546001600160a01b038086166001600160a01b03199283161790925560cc805492851692909116919091179055801561085d576000805461ff0019169055505050565b6000610a2483611398565b610a67576040805162461bcd60e51b815260206004820152600f60248201526e1ad95e481b9bdd08195e1a5cdd1959608a1b604482015290519081900360640190fd5b6000610a7284610c62565b9050600081118015610a8357508083105b610ac9576040805162461bcd60e51b81526020600482015260126024820152714e6f7420656e6f75676820686973746f727960701b604482015290519081900360640190fd5b600084815260cd60205260409020600101805460001985840301908110610aec57fe5b9060005260206000209060030201600201549150505b92915050565b610b106112f0565b6065546001600160a01b03908116911614610b5c5760405162461bcd60e51b815260040180806020018281038252602d815260200180611993602d913960400191505060405180910390fd5b610b678160006112f4565b600081815260cd60205260408120805460ff1916600190811790915560ce805491820181559091527fd36cd1c74ef8d7326d8021b776c18fb5a5724b7f7bc93c2f42e43e10ef27d12a0155565b6066546001600160a01b03165b90565b610bcc6112f0565b6065546001600160a01b03908116911614610c185760405162461bcd60e51b815260040180806020018281038252602d815260200180611993602d913960400191505060405180910390fd5b6065546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3606580546001600160a01b0319169055565b600090815260cd602052604090206001015490565b6000610c8282611398565b610cc5576040805162461bcd60e51b815260206004820152600f60248201526e1ad95e481b9bdd08195e1a5cdd1959608a1b604482015290519081900360640190fd5b6000610cd083610c62565b905080610ce1576000915050610939565b600083815260cd6020526040902060010180546000198301908110610d0257fe5b906000526020600020906003020160020154915050919050565b6065546001600160a01b031690565b6000610d3683611398565b610d79576040805162461bcd60e51b815260206004820152600f60248201526e1ad95e481b9bdd08195e1a5cdd1959608a1b604482015290519081900360640190fd5b6000610d8484610c62565b9050600081118015610d9557508083105b610ddb576040805162461bcd60e51b81526020600482015260126024820152714e6f7420656e6f75676820686973746f727960701b604482015290519081900360640190fd5b600084815260cd60205260409020600101805460001985840301908110610dfe57fe5b90600052602060002090600302016001015491505092915050565b6000610e2483611398565b610e67576040805162461bcd60e51b815260206004820152600f60248201526e1ad95e481b9bdd08195e1a5cdd1959608a1b604482015290519081900360640190fd5b81610eaf576040805162461bcd60e51b81526020600482015260136024820152720696e74657276616c2063616e2774206265203606c1b604482015290519081900360640190fd5b6000610eba84610c62565b905060008111610f06576040805162461bcd60e51b81526020600482015260126024820152714e6f7420656e6f75676820686973746f727960701b604482015290519081900360640190fd5b6000198101610f1361183c565b600086815260cd60205260409020600101805483908110610f3057fe5b9060005260206000209060030201604051806060016040529081600082015481526020016001820154815260200160028201548152505090506000816040015190506000610f8c87610f80611465565b9063ffffffff61146916565b905080821080610f9a575083155b15610faf575050602001519250610b02915050565b6000610fbd83610f80611465565b60208501519091508390600090610fda908463ffffffff6114b216565b90505b8661100157610ff2818463ffffffff61150b16565b98505050505050505050610b02565b61101287600163ffffffff61146916565b60008c815260cd602052604090206001018054919850908890811061103357fe5b600091825260209182902060408051606081018252600390930290910180548352600181015493830184905260020154908201819052909750908582116110ad576110a461109761108a868963ffffffff61146916565b839063ffffffff6114b216565b849063ffffffff61154d16565b92505050611100565b60006110bf858463ffffffff61146916565b90506110e16110d4838363ffffffff6114b216565b859063ffffffff61154d16565b93506110f3868263ffffffff61154d16565b9550829450505050610fdd565b611110818b63ffffffff61150b16565b9b9a5050505050505050505050565b6111276112f0565b6065546001600160a01b039081169116146111735760405162461bcd60e51b815260040180806020018281038252602d815260200180611993602d913960400191505060405180910390fd5b6001600160a01b0381166111be576040805162461bcd60e51b815260206004820152600d60248201526c6164647220697320656d70747960981b604482015290519081900360640190fd5b60cc80546001600160a01b0319166001600160a01b0392909216919091179055565b6066546001600160a01b03166112275760405162461bcd60e51b815260040180806020018281038252602f815260200180611964602f913960400191505060405180910390fd5b61122f6112f0565b6066546001600160a01b0390811691161461127b5760405162461bcd60e51b81526004018080602001828103825260278152602001806118cc6027913960400191505060405180910390fd5b6066546065546040516001600160a01b0392831692909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360668054606580546001600160a01b03199081166001600160a01b03841617909155169055565b60cc546001600160a01b031681565b3390565b801561134b5761130382611398565b611346576040805162461bcd60e51b815260206004820152600f60248201526e1ad95e481b9bdd08195e1a5cdd1959608a1b604482015290519081900360640190fd5b611394565b61135482611398565b15611394576040805162461bcd60e51b815260206004820152600b60248201526a1ad95e48195e1a5cdd195960aa1b604482015290519081900360640190fd5b5050565b600090815260cd602052604090205460ff1690565b303b1590565b600054610100900460ff16806113cc57506113cc6113ad565b806113da575060005460ff16155b6114155760405162461bcd60e51b815260040180806020018281038252602e815260200180611936602e913960400191505060405180910390fd5b600054610100900460ff16158015611440576000805460ff1961ff0019909116610100171660011790555b6114486115a7565b611450611647565b8015611462576000805461ff00191690555b50565b4290565b60006114ab83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611740565b9392505050565b6000826114c157506000610b02565b828202828482816114ce57fe5b04146114ab5760405162461bcd60e51b81526004018080602001828103825260218152602001806118f36021913960400191505060405180910390fd5b60006114ab83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506117d7565b6000828201838110156114ab576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600054610100900460ff16806115c057506115c06113ad565b806115ce575060005460ff16155b6116095760405162461bcd60e51b815260040180806020018281038252602e815260200180611936602e913960400191505060405180910390fd5b600054610100900460ff16158015611450576000805460ff1961ff0019909116610100171660011790558015611462576000805461ff001916905550565b600054610100900460ff168061166057506116606113ad565b8061166e575060005460ff16155b6116a95760405162461bcd60e51b815260040180806020018281038252602e815260200180611936602e913960400191505060405180910390fd5b600054610100900460ff161580156116d4576000805460ff1961ff0019909116610100171660011790555b60006116de6112f0565b606580546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015611462576000805461ff001916905550565b600081848411156117cf5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561179457818101518382015260200161177c565b50505050905090810190601f1680156117c15780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600081836118265760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561179457818101518382015260200161177c565b50600083858161183257fe5b0495945050505050565b60405180606001604052806000815260200160008152602001600081525090565b50805460008255600302906000526020600020908101906114629190610bc191905b808211156118a057600080825560018201819055600282015560030161187f565b509056fe5065727046694f776e61626c65557067726164653a2073616d652061732063616e6469646174655065727046694f776e61626c65557067726164653a206e6f7420746865206e6577206f776e6572536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775065727046694f776e61626c65557067726164653a207a65726f2061646472657373436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a65645065727046694f776e61626c65557067726164653a2063616e646964617465206973207a65726f20616464726573735065727046694f776e61626c65557067726164653a2063616c6c6572206973206e6f7420746865206f776e65725065727046694f776e61626c65557067726164653a2073616d65206173206f726967696e616ca264697066735822122065735c16075954326f276fd8fb20c4c4ddd8dc247de685295d18d8f0eb4f477164736f6c63430006090033\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Signer, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { MetaTxGateway } from \"../MetaTxGateway\";\n\nexport class MetaTxGateway__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<MetaTxGateway> {\n    return super.deploy(overrides || {}) as Promise<MetaTxGateway>;\n  }\n  getDeployTransaction(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  attach(address: string): MetaTxGateway {\n    return super.attach(address) as MetaTxGateway;\n  }\n  connect(signer: Signer): MetaTxGateway__factory {\n    return super.connect(signer) as MetaTxGateway__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): MetaTxGateway {\n    return new Contract(address, _abi, signerOrProvider) as MetaTxGateway;\n  }\n}\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"address payable\",\n        name: \"relayerAddress\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"bytes\",\n        name: \"functionSignature\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"MetaTransactionExecuted\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_addr\",\n        type: \"address\",\n      },\n    ],\n    name: \"addToWhitelists\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"candidate\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"functionSignature\",\n        type: \"bytes\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"sigR\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"sigS\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"sigV\",\n        type: \"uint8\",\n      },\n    ],\n    name: \"executeMetaTransaction\",\n    outputs: [\n      {\n        internalType: \"bytes\",\n        name: \"\",\n        type: \"bytes\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"user\",\n        type: \"address\",\n      },\n    ],\n    name: \"getNonce\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"nonce\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"string\",\n        name: \"_name\",\n        type: \"string\",\n      },\n      {\n        internalType: \"string\",\n        name: \"_version\",\n        type: \"string\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_chainIdL1\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_addr\",\n        type: \"address\",\n      },\n    ],\n    name: \"isInWhitelists\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_addr\",\n        type: \"address\",\n      },\n    ],\n    name: \"removeFromWhitelists\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"setOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"updateOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x608060405234801561001057600080fd5b506116d4806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c806384f272aa1161007157806384f272aa146101745780638da5cb5b1461019a578063976af64d146101a2578063a9cae653146101c8578063b119490e146102d3578063bc5920ba146103fe576100a9565b80630773d9eb146100ae57806313af4035146100e85780632d0335ab146101105780636c8381f814610148578063715018a61461016c575b600080fd5b6100d4600480360360208110156100c457600080fd5b50356001600160a01b0316610406565b604080519115158252519081900360200190f35b61010e600480360360208110156100fe57600080fd5b50356001600160a01b0316610428565b005b6101366004803603602081101561012657600080fd5b50356001600160a01b031661057d565b60408051918252519081900360200190f35b610150610598565b604080516001600160a01b039092168252519081900360200190f35b61010e6105a7565b61010e6004803603602081101561018a57600080fd5b50356001600160a01b0316610645565b6101506106bd565b61010e600480360360208110156101b857600080fd5b50356001600160a01b03166106cc565b61025e600480360360c08110156101de57600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b81111561021157600080fd5b82018360208201111561022357600080fd5b803590602001918460018302840111600160201b8311171561024457600080fd5b91935091508035906020810135906040013560ff16610741565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610298578181015183820152602001610280565b50505050905090810190601f1680156102c55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61010e600480360360608110156102e957600080fd5b810190602081018135600160201b81111561030357600080fd5b82018360208201111561031557600080fd5b803590602001918460018302840111600160201b8311171561033657600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561038857600080fd5b82018360208201111561039a57600080fd5b803590602001918460018302840111600160201b831117156103bb57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505091359250610af0915050565b61010e610c85565b6001600160a01b038116600090815260ce602052604090205460ff165b919050565b610430610d86565b6065546001600160a01b0390811691161461047c5760405162461bcd60e51b815260040180806020018281038252602d81526020018061164c602d913960400191505060405180910390fd5b6001600160a01b0381166104c15760405162461bcd60e51b81526004018080602001828103825260228152602001806115cd6022913960400191505060405180910390fd5b6065546001600160a01b038281169116141561050e5760405162461bcd60e51b81526004018080602001828103825260268152602001806116796026913960400191505060405180910390fd5b6066546001600160a01b038281169116141561055b5760405162461bcd60e51b81526004018080602001828103825260278152602001806115046027913960400191505060405180910390fd5b606680546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0316600090815260cd602052604090205490565b6066546001600160a01b031690565b6105af610d86565b6065546001600160a01b039081169116146105fb5760405162461bcd60e51b815260040180806020018281038252602d81526020018061164c602d913960400191505060405180910390fd5b6065546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3606580546001600160a01b0319169055565b61064d610d86565b6065546001600160a01b039081169116146106995760405162461bcd60e51b815260040180806020018281038252602d81526020018061164c602d913960400191505060405180910390fd5b6001600160a01b0316600090815260ce60205260409020805460ff19166001179055565b6065546001600160a01b031690565b6106d4610d86565b6065546001600160a01b039081169116146107205760405162461bcd60e51b815260040180806020018281038252602d81526020018061164c602d913960400191505060405180910390fd5b6001600160a01b0316600090815260ce60205260409020805460ff19169055565b606061074c87610406565b61078c576040805162461bcd60e51b815260206004820152600c60248201526b085dda1a5d195b1a5cdd195960a21b604482015290519081900360640190fd5b61079461148f565b604051806080016040528060cd60008c6001600160a01b03166001600160a01b031681526020019081526020016000205481526020018a6001600160a01b03168152602001896001600160a01b0316815260200188888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505091525060cb54909150610835908a9083888888610d8a565b8061084b575061084b8960cc5483888888610d8a565b6108865760405162461bcd60e51b81526004018080602001828103825260298152602001806115526029913960400191505060405180910390fd5b6001600160a01b038916600090815260cd60205260409020546108b090600163ffffffff610e7916565b60cd60008b6001600160a01b03166001600160a01b031681526020019081526020016000208190555060006060896001600160a01b031689898d6040516020018084848082843780830192505050826001600160a01b03166001600160a01b031660601b815260140193505050506040516020818303038152906040526040518082805190602001908083835b6020831061095c5780518252601f19909201916020918201910161093d565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146109be576040519150601f19603f3d011682016040523d82523d6000602084013e6109c3565b606091505b5091509150816109d282610eda565b90610a5b5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610a20578181015183820152602001610a08565b50505050905090810190601f168015610a4d5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50604080516001600160a01b03808e1682528c166020820152339181018290526080606082018181529082018b90527f5b557a9dd19c959c831e99f62df0ada0a8dedff9754a57596e351545da0832b4928e928e928e918e9160a08201848480828437600083820152604051601f909101601f19169092018290039850909650505050505050a19a9950505050505050505050565b600054610100900460ff1680610b095750610b09611008565b80610b17575060005460ff16155b610b525760405162461bcd60e51b815260040180806020018281038252602e8152602001806115ef602e913960400191505060405180910390fd5b600054610100900460ff16158015610b7d576000805460ff1961ff0019909116610100171660011790555b610b8561100e565b60405180608001604052806052815260200161157b6052913980516020918201208551868301208551868401206040805180860194909452838101929092526060830152608082018590523060a0808401919091528151808403909101815260c083018083528151919094012060cb556101408201905260528083529061157b9060e001398051906020012084805190602001208480519060200120610c296110c0565b6040805160208082019690965280820194909452606084019290925260808301523060a0808401919091528151808403909101815260c09092019052805191012060cc558015610c7f576000805461ff00191690555b50505050565b6066546001600160a01b0316610ccc5760405162461bcd60e51b815260040180806020018281038252602f81526020018061161d602f913960400191505060405180910390fd5b610cd4610d86565b6066546001600160a01b03908116911614610d205760405162461bcd60e51b815260040180806020018281038252602781526020018061152b6027913960400191505060405180910390fd5b6066546065546040516001600160a01b0392831692909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360668054606580546001600160a01b03199081166001600160a01b03841617909155169055565b3390565b6000806001610da188610d9c896110c4565b61116e565b84878760405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015610dfb573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610e57576040805162461bcd60e51b8152602060048201526011602482015270696e76616c6964207369676e617475726560781b604482015290519081900360640190fd5b876001600160a01b0316816001600160a01b0316149150509695505050505050565b600082820183811015610ed3576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6060604482511015610f20575060408051808201909152601d81527f5472616e73616374696f6e2072657665727465642073696c656e746c790000006020820152610423565b6060610f3b600480855103856111a99092919063ffffffff16565b9050808060200190516020811015610f5257600080fd5b8101908080516040519392919084600160201b821115610f7157600080fd5b908301906020820185811115610f8657600080fd5b8251600160201b811182820188101715610f9f57600080fd5b82525081516020918201929091019080838360005b83811015610fcc578181015183820152602001610fb4565b50505050905090810190601f168015610ff95780820380516001836020036101000a031916815260200191505b50604052505050915050919050565b303b1590565b600054610100900460ff16806110275750611027611008565b80611035575060005460ff16155b6110705760405162461bcd60e51b815260040180806020018281038252602e8152602001806115ef602e913960400191505060405180910390fd5b600054610100900460ff1615801561109b576000805460ff1961ff0019909116610100171660011790555b6110a36112f6565b6110ab611396565b80156110bd576000805461ff00191690555b50565b4690565b60006040518060800160405280604e81526020016114b6604e91398051906020012082600001518360200151846040015185606001518051906020012060405160200180868152602001858152602001846001600160a01b03166001600160a01b03168152602001836001600160a01b03166001600160a01b0316815260200182815260200195505050505050604051602081830303815290604052805190602001209050919050565b6040805161190160f01b6020808301919091526022820194909452604280820193909352815180820390930183526062019052805191012090565b60608182601f0110156111f4576040805162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b604482015290519081900360640190fd5b82828401101561123c576040805162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b604482015290519081900360640190fd5b81830184511015611288576040805162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b604482015290519081900360640190fd5b6060821580156112a3576040519150602082016040526112ed565b6040519150601f8416801560200281840101858101878315602002848b0101015b818310156112dc5780518352602092830192016112c4565b5050858452601f01601f1916604052505b50949350505050565b600054610100900460ff168061130f575061130f611008565b8061131d575060005460ff16155b6113585760405162461bcd60e51b815260040180806020018281038252602e8152602001806115ef602e913960400191505060405180910390fd5b600054610100900460ff161580156110ab576000805460ff1961ff00199091166101001716600117905580156110bd576000805461ff001916905550565b600054610100900460ff16806113af57506113af611008565b806113bd575060005460ff16155b6113f85760405162461bcd60e51b815260040180806020018281038252602e8152602001806115ef602e913960400191505060405180910390fd5b600054610100900460ff16158015611423576000805460ff1961ff0019909116610100171660011790555b600061142d610d86565b606580546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35080156110bd576000805461ff001916905550565b60408051608081018252600080825260208201819052918101919091526060808201529056fe4d6574615472616e73616374696f6e2875696e74323536206e6f6e63652c616464726573732066726f6d2c6164647265737320746f2c62797465732066756e6374696f6e5369676e6174757265295065727046694f776e61626c65557067726164653a2073616d652061732063616e6469646174655065727046694f776e61626c65557067726164653a206e6f7420746865206e6577206f776e65724d657461207478205369676e657220616e64207369676e617475726520646f206e6f74206d61746368454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e7472616374295065727046694f776e61626c65557067726164653a207a65726f2061646472657373436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a65645065727046694f776e61626c65557067726164653a2063616e646964617465206973207a65726f20616464726573735065727046694f776e61626c65557067726164653a2063616c6c6572206973206e6f7420746865206f776e65725065727046694f776e61626c65557067726164653a2073616d65206173206f726967696e616ca2646970667358221220d450fa05ba9cb68f6f493cde781c33cca9c2f78e87c91a33d72866213a15bae964736f6c63430006090033\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Signer, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { Minter } from \"../Minter\";\n\nexport class Minter__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<Minter> {\n    return super.deploy(overrides || {}) as Promise<Minter>;\n  }\n  getDeployTransaction(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  attach(address: string): Minter {\n    return super.attach(address) as Minter;\n  }\n  connect(signer: Signer): Minter__factory {\n    return super.connect(signer) as Minter__factory;\n  }\n  static connect(address: string, signerOrProvider: Signer | Provider): Minter {\n    return new Contract(address, _abi, signerOrProvider) as Minter;\n  }\n}\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"PerpMinted\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"candidate\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getPerpToken\",\n    outputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"inflationMonitor\",\n    outputs: [\n      {\n        internalType: \"contract IInflationMonitor\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_perpToken\",\n        type: \"address\",\n      },\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"insuranceFund\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_amount\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"mintForLoss\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"mintReward\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"rewardsDistribution\",\n    outputs: [\n      {\n        internalType: \"contract RewardsDistribution\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IInflationMonitor\",\n        name: \"_inflationMonitor\",\n        type: \"address\",\n      },\n    ],\n    name: \"setInflationMonitor\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_insuranceFund\",\n        type: \"address\",\n      },\n    ],\n    name: \"setInsuranceFund\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"setOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract RewardsDistribution\",\n        name: \"_rewardsDistribution\",\n        type: \"address\",\n      },\n    ],\n    name: \"setRewardsDistribution\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract SupplySchedule\",\n        name: \"_supplySchedule\",\n        type: \"address\",\n      },\n    ],\n    name: \"setSupplySchedule\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"supplySchedule\",\n    outputs: [\n      {\n        internalType: \"contract SupplySchedule\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"updateOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport {\n  Signer,\n  BytesLike,\n  BigNumberish,\n  Contract,\n  ContractFactory,\n  Overrides,\n} from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { AmmFake } from \"../AmmFake\";\n\nexport class AmmFake__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    _dcQuoteAssetReserve: BigNumberish,\n    _dcBaseAssetReserve: BigNumberish,\n    _dcTradeLimitRatio: BigNumberish,\n    _fundingPeriod: BigNumberish,\n    _priceFeed: string,\n    _priceFeedKey: BytesLike,\n    _quoteAsset: string,\n    _fluctuation: BigNumberish,\n    _tollRatio: BigNumberish,\n    _spreadRatio: BigNumberish,\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<AmmFake> {\n    return super.deploy(\n      _dcQuoteAssetReserve,\n      _dcBaseAssetReserve,\n      _dcTradeLimitRatio,\n      _fundingPeriod,\n      _priceFeed,\n      _priceFeedKey,\n      _quoteAsset,\n      _fluctuation,\n      _tollRatio,\n      _spreadRatio,\n      overrides || {}\n    ) as Promise<AmmFake>;\n  }\n  getDeployTransaction(\n    _dcQuoteAssetReserve: BigNumberish,\n    _dcBaseAssetReserve: BigNumberish,\n    _dcTradeLimitRatio: BigNumberish,\n    _fundingPeriod: BigNumberish,\n    _priceFeed: string,\n    _priceFeedKey: BytesLike,\n    _quoteAsset: string,\n    _fluctuation: BigNumberish,\n    _tollRatio: BigNumberish,\n    _spreadRatio: BigNumberish,\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(\n      _dcQuoteAssetReserve,\n      _dcBaseAssetReserve,\n      _dcTradeLimitRatio,\n      _fundingPeriod,\n      _priceFeed,\n      _priceFeedKey,\n      _quoteAsset,\n      _fluctuation,\n      _tollRatio,\n      _spreadRatio,\n      overrides || {}\n    );\n  }\n  attach(address: string): AmmFake {\n    return super.attach(address) as AmmFake;\n  }\n  connect(signer: Signer): AmmFake__factory {\n    return super.connect(signer) as AmmFake__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): AmmFake {\n    return new Contract(address, _abi, signerOrProvider) as AmmFake;\n  }\n}\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_dcQuoteAssetReserve\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_dcBaseAssetReserve\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_dcTradeLimitRatio\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_fundingPeriod\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"contract IPriceFeed\",\n        name: \"_priceFeed\",\n        type: \"address\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"_priceFeedKey\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_quoteAsset\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_fluctuation\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_tollRatio\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_spreadRatio\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"maxHoldingBaseAsset\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"openInterestNotionalCap\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"CapChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"int256\",\n        name: \"rate\",\n        type: \"int256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"underlyingPrice\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"FundingRateUpdated\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"quoteReserve\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"baseReserve\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"int256\",\n        name: \"cumulativeNotional\",\n        type: \"int256\",\n      },\n    ],\n    name: \"LiquidityChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"priceFeed\",\n        type: \"address\",\n      },\n    ],\n    name: \"PriceFeedUpdated\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"quoteAssetReserve\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"baseAssetReserve\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"timestamp\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"ReserveSnapshotted\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"settlementPrice\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Shutdown\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"enum IAmm.Dir\",\n        name: \"dir\",\n        type: \"uint8\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"quoteAssetAmount\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"baseAssetAmount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"SwapInput\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"enum IAmm.Dir\",\n        name: \"dir\",\n        type: \"uint8\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"quoteAssetAmount\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"baseAssetAmount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"SwapOutput\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"MAX_ORACLE_SPREAD_RATIO\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"baseAssetReserve\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"d\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"int256\",\n            name: \"d\",\n            type: \"int256\",\n          },\n        ],\n        internalType: \"struct SignedDecimal.signedDecimal\",\n        name: \"_baseAssetAmount\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_fromQuoteReserve\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_fromBaseReserve\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"calcBaseAssetAfterLiquidityMigration\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"int256\",\n            name: \"d\",\n            type: \"int256\",\n          },\n        ],\n        internalType: \"struct SignedDecimal.signedDecimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_quoteAssetAmount\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"calcFee\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"candidate\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"fluctuationLimitRatio\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"d\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"fundingBufferPeriod\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"fundingPeriod\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"fundingRate\",\n    outputs: [\n      {\n        internalType: \"int256\",\n        name: \"d\",\n        type: \"int256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getBaseAssetDelta\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"int256\",\n            name: \"d\",\n            type: \"int256\",\n          },\n        ],\n        internalType: \"struct SignedDecimal.signedDecimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getBaseAssetDeltaThisFundingPeriod\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"int256\",\n            name: \"d\",\n            type: \"int256\",\n          },\n        ],\n        internalType: \"struct SignedDecimal.signedDecimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getCumulativeNotional\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"int256\",\n            name: \"d\",\n            type: \"int256\",\n          },\n        ],\n        internalType: \"struct SignedDecimal.signedDecimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"enum IAmm.Dir\",\n        name: \"_dirOfQuote\",\n        type: \"uint8\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_quoteAssetAmount\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"getInputPrice\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"enum IAmm.Dir\",\n        name: \"_dirOfQuote\",\n        type: \"uint8\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_quoteAssetAmount\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_quoteAssetPoolAmount\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_baseAssetPoolAmount\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"getInputPriceWithReserves\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"pure\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"enum IAmm.Dir\",\n        name: \"_dir\",\n        type: \"uint8\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_quoteAssetAmount\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_quoteAssetPoolAmount\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_baseAssetPoolAmount\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"getInputPriceWithReservesPublic\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"enum IAmm.Dir\",\n        name: \"_dirOfQuote\",\n        type: \"uint8\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_quoteAssetAmount\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"getInputTwap\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getLatestLiquidityChangedSnapshots\",\n    outputs: [\n      {\n        components: [\n          {\n            components: [\n              {\n                internalType: \"int256\",\n                name: \"d\",\n                type: \"int256\",\n              },\n            ],\n            internalType: \"struct SignedDecimal.signedDecimal\",\n            name: \"cumulativeNotional\",\n            type: \"tuple\",\n          },\n          {\n            components: [\n              {\n                internalType: \"uint256\",\n                name: \"d\",\n                type: \"uint256\",\n              },\n            ],\n            internalType: \"struct Decimal.decimal\",\n            name: \"quoteAssetReserve\",\n            type: \"tuple\",\n          },\n          {\n            components: [\n              {\n                internalType: \"uint256\",\n                name: \"d\",\n                type: \"uint256\",\n              },\n            ],\n            internalType: \"struct Decimal.decimal\",\n            name: \"baseAssetReserve\",\n            type: \"tuple\",\n          },\n          {\n            components: [\n              {\n                internalType: \"int256\",\n                name: \"d\",\n                type: \"int256\",\n              },\n            ],\n            internalType: \"struct SignedDecimal.signedDecimal\",\n            name: \"totalPositionSize\",\n            type: \"tuple\",\n          },\n        ],\n        internalType: \"struct IAmm.LiquidityChangedSnapshot\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"i\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getLiquidityChangedSnapshots\",\n    outputs: [\n      {\n        components: [\n          {\n            components: [\n              {\n                internalType: \"int256\",\n                name: \"d\",\n                type: \"int256\",\n              },\n            ],\n            internalType: \"struct SignedDecimal.signedDecimal\",\n            name: \"cumulativeNotional\",\n            type: \"tuple\",\n          },\n          {\n            components: [\n              {\n                internalType: \"uint256\",\n                name: \"d\",\n                type: \"uint256\",\n              },\n            ],\n            internalType: \"struct Decimal.decimal\",\n            name: \"quoteAssetReserve\",\n            type: \"tuple\",\n          },\n          {\n            components: [\n              {\n                internalType: \"uint256\",\n                name: \"d\",\n                type: \"uint256\",\n              },\n            ],\n            internalType: \"struct Decimal.decimal\",\n            name: \"baseAssetReserve\",\n            type: \"tuple\",\n          },\n          {\n            components: [\n              {\n                internalType: \"int256\",\n                name: \"d\",\n                type: \"int256\",\n              },\n            ],\n            internalType: \"struct SignedDecimal.signedDecimal\",\n            name: \"totalPositionSize\",\n            type: \"tuple\",\n          },\n        ],\n        internalType: \"struct IAmm.LiquidityChangedSnapshot\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getLiquidityHistoryLength\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getMaxHoldingBaseAsset\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getOpenInterestNotionalCap\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"enum IAmm.Dir\",\n        name: \"_dirOfBase\",\n        type: \"uint8\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_baseAssetAmount\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"getOutputPrice\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"enum IAmm.Dir\",\n        name: \"_dirOfBase\",\n        type: \"uint8\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_baseAssetAmount\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_quoteAssetPoolAmount\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_baseAssetPoolAmount\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"getOutputPriceWithReserves\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"pure\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"enum IAmm.Dir\",\n        name: \"_dir\",\n        type: \"uint8\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_baseAssetAmount\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_quoteAssetPoolAmount\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_baseAssetPoolAmount\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"getOutputPriceWithReservesPublic\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"enum IAmm.Dir\",\n        name: \"_dirOfBase\",\n        type: \"uint8\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_baseAssetAmount\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"getOutputTwap\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getReserve\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getSettlementPrice\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getSnapshotLen\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getSpotPrice\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_intervalInSeconds\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getTwapPrice\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getUnderlyingPrice\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_intervalInSeconds\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getUnderlyingTwapPrice\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"globalShutdown\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_quoteAssetReserve\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_baseAssetReserve\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_tradeLimitRatio\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_fundingPeriod\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"contract IPriceFeed\",\n        name: \"_priceFeed\",\n        type: \"address\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"_priceFeedKey\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_quoteAsset\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_fluctuationLimitRatio\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_tollRatio\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_spreadRatio\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"isOverSpreadLimit\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_quoteReserve\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_baseReserve\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"mockSetReserve\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"mock_getCurrentBlockNumber\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"mock_getCurrentTimestamp\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_number\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"mock_setBlockNumber\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_timestamp\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"mock_setBlockTimestamp\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"nextFundingTime\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"open\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"priceFeed\",\n    outputs: [\n      {\n        internalType: \"contract IPriceFeed\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"priceFeedKey\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"quoteAsset\",\n    outputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"quoteAssetReserve\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"d\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"reserveSnapshots\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"quoteAssetReserve\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"baseAssetReserve\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"timestamp\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"blockNumber\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_maxHoldingBaseAsset\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_openInterestNotionalCap\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"setCap\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_counterParty\",\n        type: \"address\",\n      },\n    ],\n    name: \"setCounterParty\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_fluctuationLimitRatio\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"setFluctuationLimitRatio\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_globalShutdown\",\n        type: \"address\",\n      },\n    ],\n    name: \"setGlobalShutdown\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bool\",\n        name: \"_open\",\n        type: \"bool\",\n      },\n    ],\n    name: \"setOpen\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"setOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IPriceFeed\",\n        name: \"_priceFeed\",\n        type: \"address\",\n      },\n    ],\n    name: \"setPriceFeed\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_interval\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"setSpotPriceTwapInterval\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_spreadRatio\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"setSpreadRatio\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_tollRatio\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"setTollRatio\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"settleFunding\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"int256\",\n            name: \"d\",\n            type: \"int256\",\n          },\n        ],\n        internalType: \"struct SignedDecimal.signedDecimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"shutdown\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"spotPriceTwapInterval\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"spreadRatio\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"d\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"enum IAmm.Dir\",\n        name: \"_dirOfQuote\",\n        type: \"uint8\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_quoteAssetAmount\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_baseAssetAmountLimit\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"_singleTxFluctuationCheck\",\n        type: \"bool\",\n      },\n    ],\n    name: \"swapInput\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"enum IAmm.Dir\",\n        name: \"_dirOfBase\",\n        type: \"uint8\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_baseAssetAmount\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_quoteAssetAmountLimit\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"_fluctuationCheck\",\n        type: \"bool\",\n      },\n    ],\n    name: \"swapOutput\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"tollAmount\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"d\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"tollRatio\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"d\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"totalPositionSize\",\n    outputs: [\n      {\n        internalType: \"int256\",\n        name: \"d\",\n        type: \"int256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"tradeLimitRatio\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"d\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"updateOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x6080604052635611c23061011755612711610118553480156200002157600080fd5b5060405162004d7038038062004d708339810160408190526200004491620007ae565b620000638a8a8a8a8a8a8a8a8a8a6200007360201b62000fd61760201c565b5050505050505050505062000932565b600054610100900460ff1680620000985750620000986001600160e01b036200045516565b80620000a7575060005460ff16155b620000cf5760405162461bcd60e51b8152600401620000c69062000891565b60405180910390fd5b600054610100900460ff16158015620000fb576000805460ff1961ff0019909116610100171660011790555b8a158015906200010a57508815155b80156200011657508915155b80156200012257508715155b80156200013757506001600160a01b03871615155b80156200014c57506001600160a01b03851615155b6200016b5760405162461bcd60e51b8152600401620000c690620008df565b6200017e6001600160e01b036200045b16565b6040805160208082018352908d905260d18d9055815180820183528c905260d28c9055815180820183528b905260d08b90558151808201835285905260d48590558151808201835284905260d584905581518082019092529085905260d385905560dc899055620001fd90899060029062001fcc62000516821b17901c565b60dd55610e1060db5560df86905560e380546001600160a01b03199081166001600160a01b038881169190911790925560e480549091169189169190911790556200025362000567602090811b6200200e17901c565b5160d955604080516080810190915260da90806200027c6200059a602090811b6200202b17901c565b8152604080516020818101835260d1548252808401919091528151808201835260d254815291830191909152606090910190620002c2906200202b6200059a821b17901c565b9052815460018181018455600093845260209384902083515160049093020191825583830151519082015560408083015151600283015560609092015151600390910155805160a08101825260d1546080820190815281528151808401835260d25481529281019290925260e091908101620003466001600160e01b03620005b716565b81526020016200035e6001600160e01b03620005be16565b905281546001818101845560009384526020938490208351516004909302019182558383015151908201556040808301516002830155606090920151600390910155805180830190915260d15481527f3a3348362552c3897fd1f06a3233519ebd8bd76ad6e99a418a9741155fe9051591620003e4919062002046620005c5821b17901c565b60408051602080820190925260d2548152620004099162002046620005c5821b17901c565b6200041c6001600160e01b03620005b716565b6040516200042d9392919062000906565b60405180910390a1801562000448576000805461ff00191690555b5050505050505050505050565b303b1590565b600054610100900460ff1680620004805750620004806001600160e01b036200045516565b806200048f575060005460ff16155b620004ae5760405162461bcd60e51b8152600401620000c69062000891565b600054610100900460ff16158015620004da576000805460ff1961ff0019909116610100171660011790555b620004ed6001600160e01b03620005c916565b620005006001600160e01b036200065c16565b801562000513576000805461ff00191690555b50565b60006200056083836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506200075360201b60201c565b9392505050565b620005716200079b565b60405180602001604052806200059360126200078e60201b6200204a1760201c565b9052905090565b620005a46200079b565b5060408051602081019091526000815290565b6101175490565b6101185490565b5190565b600054610100900460ff1680620005ee5750620005ee6001600160e01b036200045516565b80620005fd575060005460ff16155b6200061c5760405162461bcd60e51b8152600401620000c69062000891565b600054610100900460ff1615801562000500576000805460ff1961ff001990911661010017166001179055801562000513576000805461ff001916905550565b600054610100900460ff1680620006815750620006816001600160e01b036200045516565b8062000690575060005460ff16155b620006af5760405162461bcd60e51b8152600401620000c69062000891565b600054610100900460ff16158015620006db576000805460ff1961ff0019909116610100171660011790555b6000620006f06001600160e01b036200079716565b606580546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350801562000513576000805461ff001916905550565b60008183620007775760405162461bcd60e51b8152600401620000c691906200083b565b5060008385816200078457fe5b0495945050505050565b60ff16600a0a90565b3390565b6040518060200160405280600081525090565b6000806000806000806000806000806101408b8d031215620007ce578586fd5b8a51995060208b0151985060408b0151975060608b0151965060808b0151620007f7816200091c565b60a08c015160c08d0151919750955062000811816200091c565b8094505060e08b015192506101008b015191506101208b015190509295989b9194979a5092959850565b6000602080835283518082850152825b8181101562000869578581018301518582016040015282016200084b565b818111156200087b5783604083870101525b50601f01601f1916929092016040019392505050565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201526d195b881a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252600d908201526c1a5b9d985b1a59081a5b9c1d5d609a1b604082015260600190565b9283526020830191909152604082015260600190565b6001600160a01b03811681146200051357600080fd5b61442e80620009426000396000f3fe608060405234801561001057600080fd5b50600436106104115760003560e01c80636fa42ede11610220578063b2ed32c711610130578063e1f1027f116100b8578063ed83d79c11610087578063ed83d79c146107c7578063f1b5df86146107cf578063fc0e74d1146107e2578063fcfff16f146107ea578063fdf262b7146107f257610411565b8063e1f1027f1461079c578063e4bc2eb9146107af578063e805d6fc146107b7578063ec2c0e63146107bf57610411565b8063c9566fcc116100ff578063c9566fcc1461075e578063da0c592714610766578063dc3184a014610779578063dc76fabc1461078c578063e0037a6c1461079457610411565b8063b2ed32c714610733578063bc5920ba14610746578063c2de442f1461074e578063c77f7c611461075657610411565b80637ec3246d116101b35780639bf5d1d4116101825780639bf5d1d4146106d25780639e010362146106e55780639ece77c8146106fa578063a8f8be4e1461070d578063ad6891211461072057610411565b80637ec3246d1461069c5780638da5cb5b146106af5780638f40d932146106b75780639432665a146106bf57610411565b8063724e78da116101ef578063724e78da14610666578063741bef1a1461067957806374d7c62b1461068157806375df63891461068957610411565b80636fa42ede146106305780636fdca5e0146106435780636febdd5014610656578063715018a61461065e57610411565b806341d3c84c1161032657806358a4c3dc116102ae578063622679551161027d57806362267955146105e757806362e7a176146105fa578063644dce1f1461060d5780636baccaba146106205780636c8381f81461062857610411565b806358a4c3dc146105ae57806359bf5d39146105b65780635f1ba1fd146105cc578063620be067146105d457610411565b80634cb876f2116102f55780634cb876f21461056557806350799c811461056d578063524f15a114610580578063525454101461059357806354e636c51461059b57610411565b806341d3c84c1461053a57806342b3198b14610542578063468f02d21461054a5780634894d1831461055257610411565b80631b584d6c116103a957806329f9b17b1161037857806329f9b17b146104fc5780632d666e38146105045780632f8488591461050c578063349532491461051457806340d71cd91461052757610411565b80631b584d6c146104a95780631d3acb44146104be57806321e00985146104c6578063237f17ee146104e957610411565b80630d451c8f116103e55780630d451c8f146104665780630dd68c701461046e578063113773941461048157806313af40351461049657610411565b8062c141b6146104165780630244accf1461042b57806305172a2514610449578063093383831461045e575b600080fd5b610429610424366004613a52565b6107fa565b005b610433610800565b6040516104409190613b09565b60405180910390f35b61045161080f565b6040516104409190613b28565b61045161081b565b61045161082a565b61042961047c3660046139de565b610830565b6104896108e6565b6040516104409190614323565b6104296104a436600461388a565b610902565b6104b16109db565b60405161044091906142f4565b610451610a69565b6104d96104d4366004613a52565b610a6f565b604051610440949392919061433d565b6104b16104f7366004613a52565b610abd565b610489610b5d565b610451610b79565b610489610b7f565b610489610522366004613a52565b610b9b565b6104896105353660046139fa565b610c3a565b610451610cf6565b610451610cfc565b610489610d02565b61048961056036600461391b565b610d9f565b610451610dbf565b61048961057b366004613950565b610dc5565b61042961058e3660046139c3565b610f36565b610489610f71565b6104296105a93660046139de565b610f8d565b610451610f98565b6105be610f9e565b60405161044092919061432d565b610451610fd0565b6104296105e2366004613a82565b610fd6565b6105be6105f53660046139a8565b611315565b610429610608366004613a52565b6113b0565b61048961061b366004613950565b611407565b610451611424565b61043361142a565b61048961063e36600461391b565b611439565b6104296106513660046138a6565b611450565b61045161150a565b610429611510565b61042961067436600461388a565b61158f565b610433611646565b610451611655565b6104896106973660046138c2565b61165b565b6104296106aa3660046139c3565b6118ae565b6104336118e9565b6104516118f8565b6104296106cd366004613a52565b6118fe565b6104896106e0366004613950565b611904565b6106ed6119e2565b6040516104409190613b1d565b61042961070836600461388a565b611a90565b61042961071b3660046139c3565b611ae7565b61048961072e366004613950565b611b22565b61042961074136600461388a565b611b36565b610429611b8d565b610451611c50565b610451611c56565b610451611c60565b61048961077436600461391b565b611c66565b6104896107873660046138c2565b611c98565b610489611d26565b610451611d5b565b6104896107aa36600461391b565b611d61565b610451611d93565b610489611d99565b610489611db5565b610489611dd1565b6104896107dd366004613a52565b611f2e565b610429611f3f565b6106ed611fad565b610433611fbd565b61011855565b60e2546001600160a01b031681565b67016345785d8a000081565b6000610825612053565b905090565b60e05490565b61083861205a565b6065546001600160a01b0390811691161461086e5760405162461bcd60e51b81526004016108659061422c565b60405180910390fd5b815160d7819055815160d85560408051602081019091529081527f7338f3784ceb8f9456bac0c4a69f1c6354dc325fa6455e3e3f6a8a9bf9249a7c906108b390612046565b604080516020810190915260d85481526108cc90612046565b6040516108da929190613b31565b60405180910390a15050565b6108ee613782565b50604080516020810190915260d754815290565b61090a61205a565b6065546001600160a01b039081169116146109375760405162461bcd60e51b81526004016108659061422c565b6001600160a01b03811661095d5760405162461bcd60e51b815260040161086590613f8f565b6065546001600160a01b038281169116141561098b5760405162461bcd60e51b8152600401610865906142ae565b6066546001600160a01b03828116911614156109b95760405162461bcd60e51b815260040161086590613cb6565b606680546001600160a01b0319166001600160a01b0392909216919091179055565b6109e3613795565b60da80546109f890600163ffffffff61205e16565b81548110610a0257fe5b60009182526020918290206040805160a0810182526004909302909101805460808401908152835281518085018352600182015481528385015281518085018352600282015481528383015281519384019091526003015482526060810191909152905090565b60d35481565b60e08181548110610a7c57fe5b600091825260209182902060408051808501825260049093029091018054835281519384019091526001810154835260028101546003909101549193509084565b610ac5613795565b60da548210610ae65760405162461bcd60e51b815260040161086590613db1565b60da8281548110610af357fe5b60009182526020918290206040805160a081018252600490930290910180546080840190815283528151808501835260018201548152838501528151808501835260028201548152838301528151938401909152600301548252606081019190915290505b919050565b610b65613782565b50604080516020810190915260ce54815290565b60d65481565b610b87613782565b50604080516020810190915260cc54815290565b610ba3613782565b60408051602081019182905260e45460df54632885cf7d60e21b909352909182916001600160a01b03169063a2173df490610be2908760248601613b31565b60206040518083038186803b158015610bfa57600080fd5b505afa158015610c0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c329190613a6a565b905292915050565b610c42613782565b610c4b846120a0565b610c56575082610cef565b600080610c6286612046565b13610c6e576000610c71565b60015b9050610c7b613782565b610c9d82610c8a576001610c8d565b60005b610c96886120b2565b8787611904565b9050610ca7613782565b610cc7610cc284610cb9576000610cbc565b60015b84611d61565b6120e0565b9050610ce983610cd957600019610cdc565b60015b829063ffffffff61214416565b93505050505b9392505050565b60cd5481565b60da5490565b610d0a613782565b60408051602081019182905260e45460df546331d98b3f60e01b909352909182916001600160a01b0316906331d98b3f90610d489060248501613b28565b60206040518083038186803b158015610d6057600080fd5b505afa158015610d74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d989190613a6a565b9052905090565b610da7613782565b610db68383600061038461216f565b90505b92915050565b60cc5481565b610dcd613782565b610dd684612046565b610de957610de261202b565b9050610f2e565b600080866001811115610df857fe5b149050610e03613782565b610e16610cc2868663ffffffff6121f516565b9050610e20613782565b610e28613782565b610e30613782565b8415610e4d57610e46888a63ffffffff61221816565b9150610e60565b610e5d888a63ffffffff61223b16565b91505b610e6982612046565b610e855760405162461bcd60e51b81526004016108659061410b565b610e95848363ffffffff61225e16565b9250610eaf610eaa848963ffffffff6122cf16565b6120b2565b9050610ed2610ecd83610ec1876120b2565b9063ffffffff61234416565b612046565b15610f27578415610f0457604080516020810190915260018152610efd90829063ffffffff61223b16565b9050610f27565b604080516020810190915260018152610f2490829063ffffffff61221816565b90505b9450505050505b949350505050565b610f3e61205a565b6065546001600160a01b03908116911614610f6b5760405162461bcd60e51b81526004016108659061422c565b5160d555565b610f79613782565b50604080516020810190915260d854815290565b905160d1555160d255565b60df5481565b610fa6613782565b610fae613782565b5050604080516020808201835260d1548252825190810190925260d254825291565b60db5481565b600054610100900460ff1680610fef5750610fef612388565b80610ffd575060005460ff16155b6110195760405162461bcd60e51b815260040161086590613fd1565b600054610100900460ff16158015611044576000805460ff1961ff0019909116610100171660011790555b8a1580159061105257508815155b801561105d57508915155b801561106857508715155b801561107c57506001600160a01b03871615155b801561109057506001600160a01b03851615155b6110ac5760405162461bcd60e51b815260040161086590614172565b6110b461238e565b6040805160208082018352908d905260d18d9055815180820183528c905260d28c9055815180820183528b905260d08b90558151808201835285905260d48590558151808201835284905260d5849055815190810190915284905260d384905560dc88905561112a88600263ffffffff611fcc16565b60dd55610e1060db5560df86905560e380546001600160a01b038088166001600160a01b03199283161790925560e48054928a169290911691909117905561117061200e565b5160d955604080516080810190915260da908061118b61202b565b8152604080516020818101835260d1548252808401919091528151908101825260d2548152908201526060016111bf61202b565b9052815460018181018455600093845260209384902083515160049093020191825583830151519082015560408083015151600283015560609092015151600390910155805160a08101825260d1546080820190815281528151808401835260d25481529281019290925260e091908101611238612420565b8152602001611245612053565b9052815460018181018455600093845260209384902083515160049093020191825583830151519082015560408083015160028301556060909201516003909101558051918201905260d15481527f3a3348362552c3897fd1f06a3233519ebd8bd76ad6e99a418a9741155fe90515906112be90612046565b604080516020810190915260d25481526112d790612046565b6112df612420565b6040516112ee93929190614358565b60405180910390a18015611308576000805461ff00191690555b5050505050505050505050565b61131d613782565b611325613782565b611337610ecd368590038501856139c3565b6113545761134361202b565b61134b61202b565b915091506113ab565b604080516020810190915260d454815261138390611377368690038601866139c3565b9063ffffffff6121f516565b604080516020810190915260d55481526113a690611377368790038701876139c3565b915091505b915091565b6113b861205a565b6065546001600160a01b039081169116146113e55760405162461bcd60e51b81526004016108659061422c565b806114025760405162461bcd60e51b815260040161086590613c48565b60db55565b61140f613782565b61141b85858585610dc5565b95945050505050565b60d45481565b6066546001600160a01b031690565b611441613782565b610db68383600161038461216f565b61145861205a565b6065546001600160a01b039081169116146114855760405162461bcd60e51b81526004016108659061422c565b60e45460ff600160a01b90910416151581151514156114a357611507565b60e4805482158015600160a01b0260ff60a01b199092169190911790915561150757611503610e106114f7610e106114eb60dc546114df612420565b9063ffffffff61242716565b9063ffffffff611fcc16565b9063ffffffff61244c16565b60de555b50565b60d55481565b61151861205a565b6065546001600160a01b039081169116146115455760405162461bcd60e51b81526004016108659061422c565b6065546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3606580546001600160a01b0319169055565b61159761205a565b6065546001600160a01b039081169116146115c45760405162461bcd60e51b81526004016108659061422c565b6001600160a01b0381166115ea5760405162461bcd60e51b815260040161086590614066565b60e480546001600160a01b0319166001600160a01b0383811691909117918290556040517fe5b20b8497e4f3e2435ef9c20e2e26b47497ee13745ce1c681ad6640653119e69261163b921690613b09565b60405180910390a150565b60e4546001600160a01b031681565b60dc5481565b611663613782565b60e454600160a01b900460ff1661168c5760405162461bcd60e51b815260040161086590613eb8565b61169461205a565b60e1546001600160a01b039081169116146116c15760405162461bcd60e51b815260040161086590613c7f565b6116d3610ecd368690038601866139c3565b6116df57610de261202b565b60018560018111156116ed57fe5b141561175357611705610ecd368690038601866139c3565b604080516020808201835260d0548252825190810190925260d154825261173591610ecd9163ffffffff6121f516565b10156117535760405162461bcd60e51b815260040161086590613d3e565b61175b613782565b61176e866107aa368890038801886139c3565b9050611782610ecd368690038601866139c3565b1561181257600086600181111561179557fe5b14156117d9576117ad610ecd368690038601866139c3565b6117b682612046565b10156117d45760405162461bcd60e51b815260040161086590613f58565b611812565b6117eb610ecd368690038601866139c3565b6117f482612046565b11156118125760405162461bcd60e51b8152600401610865906140d4565b821580611836576118328761182c368990038901896139c3565b84612486565b1590505b61185087611849368990038901896139c3565b84846125cc565b7fae6a2b946841d9afc0e1e19a94ae4af26f01125b87b5095bbfb177a9741a2ede87611884610ecd368a90038a018a6139c3565b61188d85612046565b60405161189c93929190613b3f565b60405180910390a15095945050505050565b6118b661205a565b6065546001600160a01b039081169116146118e35760405162461bcd60e51b81526004016108659061422c565b5160d455565b6065546001600160a01b031690565b60d05481565b61011755565b61190c613782565b61191584612046565b61192157610de261202b565b60008086600181111561193057fe5b14905061193b613782565b61194e610cc2868663ffffffff6121f516565b9050611958613782565b611960613782565b611968613782565b84156119855761197e878a63ffffffff61221816565b9150611998565b611995878a63ffffffff61223b16565b91505b6119a182612046565b6119bd5760405162461bcd60e51b815260040161086590613bb4565b6119cd848363ffffffff61225e16565b9250610eaf610eaa848a63ffffffff6122cf16565b60006119ec613782565b6119f4610d02565b90506000611a0182612046565b11611a1e5760405162461bcd60e51b815260040161086590613dda565b611a26613782565b611a2e611d26565b9050611a38613782565b611a64610eaa84611a5886611a4c876120e0565b9063ffffffff6122cf16565b9063ffffffff61225e16565b905067016345785d8a0000611a7882612046565b1015611a85576000611a88565b60015b935050505090565b611a9861205a565b6065546001600160a01b03908116911614611ac55760405162461bcd60e51b81526004016108659061422c565b60e180546001600160a01b0319166001600160a01b0392909216919091179055565b611aef61205a565b6065546001600160a01b03908116911614611b1c5760405162461bcd60e51b81526004016108659061422c565b5160d355565b611b2a613782565b61141b85858585611904565b611b3e61205a565b6065546001600160a01b03908116911614611b6b5760405162461bcd60e51b81526004016108659061422c565b60e280546001600160a01b0319166001600160a01b0392909216919091179055565b6066546001600160a01b0316611bb55760405162461bcd60e51b8152600401610865906141dd565b611bbd61205a565b6066546001600160a01b03908116911614611bea5760405162461bcd60e51b815260040161086590613d6a565b6066546065546040516001600160a01b0392831692909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360668054606580546001600160a01b03199081166001600160a01b03841617909155169055565b60dd5481565b6000610825612420565b60d25481565b611c6e613782565b604080516020808201835260d1548252825190810190925260d2548252610db69185918591611904565b611ca0613782565b60e454600160a01b900460ff16611cc95760405162461bcd60e51b815260040161086590613eb8565b611cd161205a565b60e1546001600160a01b03908116911614611cfe5760405162461bcd60e51b815260040161086590613c7f565b61141b85611d11368790038701876139c3565b611d20368790038701876139c3565b8561277b565b611d2e613782565b604080516020808201835260d2548252825190810190925260d1548252610825919063ffffffff61291316565b60de5481565b611d69613782565b604080516020808201835260d1548252825190810190925260d2548252610db69185918591610dc5565b60d15481565b611da1613782565b50604080516020810190915260cb54815290565b611dbd613782565b50604080516020810190915260cf54815290565b611dd9613782565b60e454600160a01b900460ff16611e025760405162461bcd60e51b815260040161086590613eb8565b611e0a61205a565b60e1546001600160a01b03908116911614611e375760405162461bcd60e51b815260040161086590613c7f565b60de54611e42612420565b1015611e605760405162461bcd60e51b81526004016108659061413b565b611e68613782565b611e7360db54610b9b565b9050611e7d613782565b611e8f82611a4c610cc260db54611f2e565b9050611e99613782565b611ec162015180611eb560dc548561293690919063ffffffff16565b9063ffffffff61299916565b9050611ecd81846129bb565b6000611edd60dd546114df612420565b90506000611f04610e106114f7610e106114eb60dc5460de5461242790919063ffffffff16565b9050818111611f135781611f15565b805b60de55611f2061202b565b5160cb555090935050505090565b611f36613782565b610db982612a13565b611f476118e9565b6001600160a01b0316611f5861205a565b6001600160a01b03161480611f87575060e2546001600160a01b0316611f7c61205a565b6001600160a01b0316145b611fa35760405162461bcd60e51b815260040161086590613f21565b611fab612a44565b565b60e454600160a01b900460ff1681565b60e3546001600160a01b031681565b6000610db683836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612b9c565b612016613782565b6040518060200160405280610d98601261204a565b612033613782565b5060408051602081019091526000815290565b5190565b60ff16600a0a90565b6101185490565b3390565b6000610db683836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612bd3565b60006120ab826120b2565b5192915050565b6120ba613782565b6120c2613782565b8251600013156120d85782516000038152610db9565b915182525090565b6120e8613782565b8180600001516001600160ff1b0310156040518060600160405280603381526020016143c6603391399061212f5760405162461bcd60e51b81526004016108659190613b61565b50506040805160208101909152915182525090565b61214c613782565b612154613782565b8351612166908463ffffffff612bff16565b81529392505050565b612177613782565b61217f6137d4565b600180825260e0546121909161205e565b602082015260408101518660018111156121a657fe5b908160018111156121b357fe5b9052506040808201805160200187905251018460018111156121d157fe5b908160018111156121de57fe5b9052506121eb8184612c6a565b9695505050505050565b6121fd613782565b612205613782565b825184516121669163ffffffff612ed716565b612220613782565b612228613782565b825184516121669163ffffffff61242716565b612243613782565b61224b613782565b825184516121669163ffffffff61205e16565b612266613782565b8180600001516001600160ff1b0310156040518060600160405280603381526020016143c660339139906122ad5760405162461bcd60e51b81526004016108659190613b61565b506122b6613782565b61141b6122c2856120e0565b869063ffffffff612ee516565b6122d7613782565b8180600001516001600160ff1b0310156040518060600160405280603381526020016143c6603391399061231e5760405162461bcd60e51b81526004016108659190613b61565b50612327613782565b8351855161233a9163ffffffff612f0816565b8152949350505050565b61234c613782565b60405180602001604052808360000151612377612369601261204a565b87519063ffffffff61244c16565b8161237e57fe5b0690529392505050565b303b1590565b600054610100900460ff16806123a757506123a7612388565b806123b5575060005460ff16155b6123d15760405162461bcd60e51b815260040161086590613fd1565b600054610100900460ff161580156123fc576000805460ff1961ff0019909116610100171660011790555b612404612f4e565b61240c612fcf565b8015611507576000805461ff001916905550565b6101175490565b600082820183811015610db65760405162461bcd60e51b815260040161086590613c11565b60008261245b57506000610db9565b8282028284828161246857fe5b0414610db65760405162461bcd60e51b815260040161086590613ee0565b6000612490613782565b600085600181111561249e57fe5b146124f857604080516020810190915260d25481526124f3906124c7908563ffffffff61221816565b604080516020810190915260d15481526124e7908763ffffffff61223b16565b9063ffffffff61291316565b61253c565b604080516020810190915260d254815261253c9061251c908563ffffffff61223b16565b604080516020810190915260d15481526124e7908763ffffffff61221816565b604080516020810190915260d354815260e0805492935061141b928492919061256c90600163ffffffff61205e16565b8154811061257657fe5b60009182526020918290206040805160a0810182526004909302909101805460808401908152835281518085018352600182015481529383019390935260028301549082015260039091015460608201526130a9565b60008460018111156125da57fe5b141561269957604080516020810190915260d1548152612600908463ffffffff61221816565b5160d155604080516020810190915260d2548152612624908363ffffffff61223b16565b5160d255604080516020810190915260cb548152612648908363ffffffff6122cf16565b5160cb55604080516020810190915260cc54815261266c908363ffffffff61318316565b5160cc55604080516020810190915260ce548152612690908463ffffffff61318316565b5160ce5561274e565b604080516020810190915260d15481526126b9908463ffffffff61223b16565b5160d155604080516020810190915260d25481526126dd908363ffffffff61221816565b5160d255604080516020810190915260cb548152612701908363ffffffff61318316565b5160cb55604080516020810190915260cc548152612725908363ffffffff6122cf16565b5160cc55604080516020810190915260ce548152612749908463ffffffff6122cf16565b5160ce555b801561276d57604080516020810190915260d354815261276d906131ee565b612775613349565b50505050565b612783613782565b61278c84612046565b61279857610de261202b565b60018560018111156127a657fe5b1415612803576127b584612046565b604080516020808201835260d0548252825190810190925260d25482526127e591610ecd9163ffffffff6121f516565b10156128035760405162461bcd60e51b815260040161086590613d3e565b61280b613782565b6128158686611c66565b905061282084612046565b1561289e57600086600181111561283357fe5b141561286e5761284284612046565b61284b82612046565b10156128695760405162461bcd60e51b815260040161086590613e81565b61289e565b61287784612046565b61288082612046565b111561289e5760405162461bcd60e51b81526004016108659061409d565b6000808760018111156128ad57fe5b146128b95760006128bc565b60015b905083156128d3576128cf818388612486565b1593505b6128df818388876125cc565b7f0dd4066b1a6ce97fb670c3e4201e908c644193f38cbdaffd0229d7e26da3e5338761290a84612046565b61188d89612046565b61291b613782565b612923613782565b825184516121669163ffffffff61348116565b61293e613782565b816001600160ff1b0310156040518060600160405280603381526020016143c660339139906129805760405162461bcd60e51b81526004016108659190613b61565b50612989613782565b610f2e848463ffffffff61214416565b6129a1613782565b6129a9613782565b8351612166908463ffffffff61348f16565b6129cb828263ffffffff61225e16565b5160cd81905560408051602081019091529081527fd2805fe76d30598332a67c1061cee82e2e102b0f59f5457b1729bce028a054a090612a0a90612046565b6108cc83612046565b612a1b613782565b612a236137d4565b6000815260e054612a3590600161205e565b6020820152610cef8184612c6a565b612a4c613795565b612a546109db565b9050612a5e613782565b60208201516040830151612a779163ffffffff6121f516565b9050612a81613782565b60408301516060840151612a9a9163ffffffff61318316565b9050612aa4613782565b612abd82612ab1856120e0565b9063ffffffff612ee516565b9050612ac7613782565b604080516020810190915260d1548152612ae890839063ffffffff6122cf16565b604080516020810190915260cc548152909150606490612b07906120a0565b1115612b3857604080516020810190915260cc548152612b3390612b2a906120b2565b6124e7836120b2565b5160cf555b60e4805460ff60a01b19169055604080516020810190915260cf5481527f574214b195bf5273a95bb4498e35cf1fde0ce327c727a95ec2ab359f7ba4e11a90612b8090612046565b604051612b8d9190613b28565b60405180910390a15050505050565b60008183612bbd5760405162461bcd60e51b81526004016108659190613b61565b506000838581612bc957fe5b0495945050505050565b60008184841115612bf75760405162461bcd60e51b81526004016108659190613b61565b505050900390565b600082612c0e57506000610db9565b82600019148015612c225750600160ff1b82145b15612c3f5760405162461bcd60e51b81526004016108659061401f565b82820282848281612c4c57fe5b0514610db65760405162461bcd60e51b81526004016108659061401f565b612c72613782565b612c7a613782565b612c83846134f3565b905082612c91579050610db9565b6000612cab84612c9f612420565b9063ffffffff61205e16565b9050612cb56137f3565b60e0866020015181548110612cc657fe5b60009182526020918290206040805160a081018252600490930290910180546080840190815283528151808501835260018083015482529484015260028101549183019190915260030154606082015260e0549092501480612d2c575081816040015111155b15612d3c57829350505050610db9565b60408101516000612d4f82612c9f612420565b9050612d59613782565b612d69868363ffffffff61365116565b90505b6020890151612d9257612d85818363ffffffff61367316565b9650505050505050610db9565b6020890151612da890600163ffffffff61205e16565b60208a0181905260e080549091908110612dbe57fe5b60009182526020918290206040805160a0810182526004909302909101805460808401908152835281518085018352600182015481529383019390935260028301549082015260039091015460608201529350612e1a896134f3565b955084846040015111612e5e57612e57612e4a612e3d858863ffffffff61205e16565b889063ffffffff61365116565b829063ffffffff61221816565b9050612eba565b6000612e7785604001518561205e90919063ffffffff16565b9050612e99612e8c888363ffffffff61365116565b839063ffffffff61221816565b9150612eab838263ffffffff61242716565b92508460400151935050612d6c565b612eca818963ffffffff61367316565b9998505050505050505050565b6000610db683836012613695565b612eed613782565b612ef5613782565b825184516121669163ffffffff6136b316565b6000818303818312801590612f1d5750838113155b80612f325750600083128015612f3257508381135b610db65760405162461bcd60e51b815260040161086590614199565b600054610100900460ff1680612f675750612f67612388565b80612f75575060005460ff16155b612f915760405162461bcd60e51b815260040161086590613fd1565b600054610100900460ff1615801561240c576000805460ff1961ff0019909116610100171660011790558015611507576000805461ff001916905550565b600054610100900460ff1680612fe85750612fe8612388565b80612ff6575060005460ff16155b6130125760405162461bcd60e51b815260040161086590613fd1565b600054610100900460ff1615801561303d576000805460ff1961ff0019909116610100171660011790555b600061304761205a565b606580546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015611507576000805461ff001916905550565b60006130b3613782565b602083015183516130c99163ffffffff61291316565b90506130d3613782565b6130fb6130ee866130e261200e565b9063ffffffff61221816565b839063ffffffff6121f516565b9050613105613782565b61312d6131208761311461200e565b9063ffffffff61223b16565b849063ffffffff6121f516565b90506000613141888463ffffffff6136c116565b60000b131580156131655750600061315f888363ffffffff6136c116565b60000b12155b156131765760009350505050610cef565b5060019695505050505050565b61318b613782565b8180600001516001600160ff1b0310156040518060600160405280603381526020016143c660339139906131d25760405162461bcd60e51b81526004016108659190613b61565b506131db613782565b8351855161233a9163ffffffff6136f216565b60006131f982612046565b11156115075760e05461320a6137f3565b60e0600183038154811061321a57fe5b60009182526020918290206040805160a0810182526004909302909101805460808401908152835281518085018352600182015481529383019390935260028301549082015260039091015460608201529050613275612053565b81606001511480156132875750600182115b156132f05760e0600283038154811061329c57fe5b60009182526020918290206040805160a08101825260049093029091018054608084019081528352815180850183526001820154815293830193909352600283015490820152600390910154606082015290505b604080516020808201835260d2548252825190810190925260d1548252613327916133209163ffffffff61291316565b84836130a9565b156133445760405162461bcd60e51b815260040161086590613e09565b505050565b6000613353612053565b60e08054919250600091600019810190811061336b57fe5b9060005260206000209060040201905080600301548214156133995760d154815560d2546001820155613416565b6040805160a08101825260d15460808201908152815281516020818101845260d254825282015260e09181016133cd612420565b8152602090810185905282546001818101855560009485529382902083515160049092020190815590820151519281019290925560408101516002830155606001516003909101555b604080516020810190915260d15481527f3a3348362552c3897fd1f06a3233519ebd8bd76ad6e99a418a9741155fe905159061345190612046565b604080516020810190915260d254815261346a90612046565b613472612420565b6040516108da93929190614358565b6000610db683836012613738565b6000816134ae5760405162461bcd60e51b815260040161086590614279565b816000191480156134c25750600160ff1b83145b156134df5760405162461bcd60e51b815260040161086590613e40565b60008284816134ea57fe5b05949350505050565b6134fb613782565b6135036137f3565b60e083602001518154811061351457fe5b600091825260208083206040805160a0810182526004909402909101805460808501908152845281518084018352600182015481529284019290925260028201549083015260030154606082015291508351600181111561357157fe5b1415613595576020810151815161358d9163ffffffff61291316565b915050610b58565b6001835160018111156135a457fe5b1415613639576135bb836040015160200151612046565b6135c75761358d61202b565b600083604001516040015160018111156135dd57fe5b1415613600576040830151805160209182015183519284015161358d9390610dc5565b6001836040015160400151600181111561361657fe5b1415613639576040830151805160209182015183519284015161358d9390611904565b60405162461bcd60e51b815260040161086590613be3565b613659613782565b613661613782565b8351612166908463ffffffff61244c16565b61367b613782565b613683613782565b8351612166908463ffffffff611fcc16565b6000610f2e6136a38361204a565b6114eb868663ffffffff61244c16565b6000610db683836012613757565b8051825160009110156136d657506001610db9565b8151835110156136e95750600019610db9565b50600092915050565b60008282018183128015906137075750838112155b8061371c575060008312801561371c57508381125b610db65760405162461bcd60e51b815260040161086590613cfd565b6000610f2e836114eb61374a8561204a565b879063ffffffff61244c16565b6000610f2e836137766137698561204a565b879063ffffffff612bff16565b9063ffffffff61348f16565b6040518060200160405280600081525090565b60405180608001604052806137a8613782565b81526020016137b5613782565b81526020016137c2613782565b81526020016137cf613782565b905290565b60408051606081018252600080825260208201529081016137cf613827565b6040518060800160405280613806613782565b8152602001613813613782565b815260200160008152602001600081525090565b60408051606081019091528060008152602001613842613782565b815260200160006137cf565b60006020828403121561385f578081fd5b50919050565b600060208284031215613876578081fd5b613880602061436e565b9135825250919050565b60006020828403121561389b578081fd5b8135610db681614395565b6000602082840312156138b7578081fd5b8135610db6816143aa565b600080600080608085870312156138d7578283fd5b84356138e2816143b8565b93506138f1866020870161384e565b9250613900866040870161384e565b91506060850135613910816143aa565b939692955090935050565b6000806040838503121561392d578182fd5b8235613938816143b8565b91506139478460208501613865565b90509250929050565b60008060008060808587031215613965578384fd5b8435613970816143b8565b935061397f8660208701613865565b925061398e8660408701613865565b915061399d8660608701613865565b905092959194509250565b6000602082840312156139b9578081fd5b610db6838361384e565b6000602082840312156139d4578081fd5b610db68383613865565b600080604083850312156139f0578182fd5b6139388484613865565b60008060008385036060811215613a0f578384fd5b6020811215613a1c578384fd5b50613a27602061436e565b843581529250613a3a8560208601613865565b9150613a498560408601613865565b90509250925092565b600060208284031215613a63578081fd5b5035919050565b600060208284031215613a7b578081fd5b5051919050565b6000806000806000806000806000806101408b8d031215613aa1578586fd5b8a35995060208b0135985060408b0135975060608b0135965060808b0135613ac881614395565b955060a08b0135945060c08b0135613adf81614395565b8094505060e08b013592506101008b013591506101208b013590509295989b9194979a5092959850565b6001600160a01b0391909116815260200190565b901515815260200190565b90815260200190565b918252602082015260400190565b6060810160028510613b4d57fe5b938152602081019290925260409091015290565b6000602080835283518082850152825b81811015613b8d57858101830151858201604001528201613b71565b81811115613b9e5783604083870101525b50601f01601f1916929092016040019392505050565b602080825260159082015274062617365206173736574206166746572206973203605c1b604082015260600190565b6020808252601490820152733737ba1039bab83837b93a32b21037b83a34b7b760611b604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526019908201527f63616e206e6f742073657420696e74657276616c20746f203000000000000000604082015260600190565b6020808252601a908201527f63616c6c6572206973206e6f7420636f756e7465725061727479000000000000604082015260600190565b60208082526027908201527f5065727046694f776e61626c65557067726164653a2073616d652061732063616040820152666e64696461746560c81b606082015260800190565b60208082526021908201527f5369676e6564536166654d6174683a206164646974696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252601290820152711bdd995c881d1c98591a5b99c81b1a5b5a5d60721b604082015260600190565b60208082526027908201527f5065727046694f776e61626c65557067726164653a206e6f7420746865206e656040820152663b9037bbb732b960c91b606082015260800190565b6020808252600f908201526e0d2dcc6dee4e4cac6e840d2dcc8caf608b1b604082015260600190565b6020808252601590820152740756e6465726c79696e67207072696365206973203605c1b604082015260600190565b6020808252601f908201527f7072696365206973206f76657220666c756374756174696f6e206c696d697400604082015260600190565b60208082526021908201527f5369676e6564536166654d6174683a206469766973696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252601d908201527f4c657373207468616e206d696e696d616c2071756f746520746f6b656e000000604082015260600190565b6020808252600e908201526d185b5b481dd85cc818db1bdcd95960921b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252601c908201527f6e6f74206f776e6572206e6f7220676c6f62616c53687574646f776e00000000604082015260600190565b6020808252601c908201527f4c657373207468616e206d696e696d616c206261736520746f6b656e00000000604082015260600190565b60208082526022908201527f5065727046694f776e61626c65557067726164653a207a65726f206164647265604082015261737360f01b606082015260800190565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201526d195b881a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526027908201527f5369676e6564536166654d6174683a206d756c7469706c69636174696f6e206f604082015266766572666c6f7760c81b606082015260800190565b60208082526019908201527f696e76616c696420507269636546656564206164647265737300000000000000604082015260600190565b6020808252601d908201527f4d6f7265207468616e206d6178696d616c2071756f746520746f6b656e000000604082015260600190565b6020808252601c908201527f4d6f7265207468616e206d6178696d616c206261736520746f6b656e00000000604082015260600190565b602080825260169082015275071756f746520617373657420616674657220697320360541b604082015260600190565b60208082526018908201527f736574746c652066756e64696e6720746f6f206561726c790000000000000000604082015260600190565b6020808252600d908201526c1a5b9d985b1a59081a5b9c1d5d609a1b604082015260600190565b60208082526024908201527f5369676e6564536166654d6174683a207375627472616374696f6e206f766572604082015263666c6f7760e01b606082015260800190565b6020808252602f908201527f5065727046694f776e61626c65557067726164653a2063616e6469646174652060408201526e6973207a65726f206164647265737360881b606082015260800190565b6020808252602d908201527f5065727046694f776e61626c65557067726164653a2063616c6c65722069732060408201526c3737ba103a34329037bbb732b960991b606082015260800190565b6020808252818101527f5369676e6564536166654d6174683a206469766973696f6e206279207a65726f604082015260600190565b60208082526026908201527f5065727046694f776e61626c65557067726164653a2073616d65206173206f726040820152651a59da5b985b60d21b606082015260800190565b815151815260208083015151908201526040808301515190820152606091820151519181019190915260800190565b9051815260200190565b9151825251602082015260400190565b93518452915160208401526040830152606082015260800190565b9283526020830191909152604082015260600190565b60405181810167ffffffffffffffff8111828210171561438d57600080fd5b604052919050565b6001600160a01b038116811461150757600080fd5b801515811461150757600080fd5b6002811061150757600080fdfe4d69786564446563696d616c3a2075696e742076616c756520697320626967676572207468616e205f494e543235365f4d4158a26469706673582212204623aaa56c327cc8d93b47b1943d06589bf123f0883e68a0ed80b542d5c4f6ff64736f6c63430006090033\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Signer, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { ChainlinkL1Fake } from \"../ChainlinkL1Fake\";\n\nexport class ChainlinkL1Fake__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<ChainlinkL1Fake> {\n    return super.deploy(overrides || {}) as Promise<ChainlinkL1Fake>;\n  }\n  getDeployTransaction(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  attach(address: string): ChainlinkL1Fake {\n    return super.attach(address) as ChainlinkL1Fake;\n  }\n  connect(signer: Signer): ChainlinkL1Fake__factory {\n    return super.connect(signer) as ChainlinkL1Fake__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): ChainlinkL1Fake {\n    return new Contract(address, _abi, signerOrProvider) as ChainlinkL1Fake;\n  }\n}\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"priceFeedL2\",\n        type: \"address\",\n      },\n    ],\n    name: \"PriceFeedL2Changed\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"bytes32\",\n        name: \"messageId\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"PriceUpdateMessageIdSent\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint80\",\n        name: \"roundId\",\n        type: \"uint80\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"price\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"timestamp\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"PriceUpdated\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"rootBridge\",\n        type: \"address\",\n      },\n    ],\n    name: \"RootBridgeChanged\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_priceFeedKey\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_aggregator\",\n        type: \"address\",\n      },\n    ],\n    name: \"addAggregator\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"candidate\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_priceFeedKey\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"getAggregator\",\n    outputs: [\n      {\n        internalType: \"contract AggregatorV3Interface\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_rootBridge\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_priceFeedL2\",\n        type: \"address\",\n      },\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"mock_getCurrentTimestamp\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_number\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"mock_setBlockNumber\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_timestamp\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"mock_setBlockTimestamp\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"prevTimestampMap\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"priceFeedKeys\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"priceFeedL2Address\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"priceFeedMap\",\n    outputs: [\n      {\n        internalType: \"contract AggregatorV3Interface\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_priceFeedKey\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"removeAggregator\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"rootBridge\",\n    outputs: [\n      {\n        internalType: \"contract RootBridge\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"setOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_priceFeedL2\",\n        type: \"address\",\n      },\n    ],\n    name: \"setPriceFeedL2\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_rootBridge\",\n        type: \"address\",\n      },\n    ],\n    name: \"setRootBridge\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_priceFeedKey\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"updateLatestRoundData\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"updateOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Signer, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { ChainlinkPriceFeedFake } from \"../ChainlinkPriceFeedFake\";\n\nexport class ChainlinkPriceFeedFake__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<ChainlinkPriceFeedFake> {\n    return super.deploy(overrides || {}) as Promise<ChainlinkPriceFeedFake>;\n  }\n  getDeployTransaction(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  attach(address: string): ChainlinkPriceFeedFake {\n    return super.attach(address) as ChainlinkPriceFeedFake;\n  }\n  connect(signer: Signer): ChainlinkPriceFeedFake__factory {\n    return super.connect(signer) as ChainlinkPriceFeedFake__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): ChainlinkPriceFeedFake {\n    return new Contract(\n      address,\n      _abi,\n      signerOrProvider\n    ) as ChainlinkPriceFeedFake;\n  }\n}\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_priceFeedKey\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_aggregator\",\n        type: \"address\",\n      },\n    ],\n    name: \"addAggregator\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"candidate\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_priceFeedKey\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"getAggregator\",\n    outputs: [\n      {\n        internalType: \"contract AggregatorV3Interface\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_priceFeedKey\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"getLatestTimestamp\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_priceFeedKey\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_numOfRoundBack\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getPreviousPrice\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_priceFeedKey\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_numOfRoundBack\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getPreviousTimestamp\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_priceFeedKey\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"getPrice\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_priceFeedKey\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_interval\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getTwapPrice\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"mock_getCurrentBlockNumber\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"mock_getCurrentTimestamp\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_number\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"mock_setBlockNumber\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_timestamp\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"mock_setBlockTimestamp\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"priceFeedDecimalMap\",\n    outputs: [\n      {\n        internalType: \"uint8\",\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"priceFeedKeys\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"priceFeedMap\",\n    outputs: [\n      {\n        internalType: \"contract AggregatorV3Interface\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_priceFeedKey\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"removeAggregator\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_priceFeedKey\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_price\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_timestamp\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_roundId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"setLatestData\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"setOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"updateOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x6080604052635611c230610100556127116101015534801561002057600080fd5b50611986806100306000396000f3fe608060405234801561001057600080fd5b50600436106101415760003560e01c80636c8381f8116100b85780638da5cb5b1161007c5780638da5cb5b14610338578063914b14c5146103405780639432665a14610363578063a2173df414610380578063bc5920ba146103a3578063c77f7c61146103ab57610141565b80636c8381f8146102d05780636d4b8585146102d8578063715018a61461030b5780637ad22632146103135780638129fc1c1461033057610141565b80632a0ab1dd1161010a5780632a0ab1dd1461020d5780632bed9e0c1461022a57806331d98b3f14610247578063331b1816146102645780633f0e084f1461028157806359bb180e146102ad57610141565b8062c141b614610146578063031d64bd14610165578063093383831461019457806313af4035146101ae578063250742cc146101d4575b600080fd5b6101636004803603602081101561015c57600080fd5b50356103b3565b005b6101636004803603608081101561017b57600080fd5b50803590602081013590604081013590606001356103b9565b61019c6103f4565b60408051918252519081900360200190f35b610163600480360360208110156101c457600080fd5b50356001600160a01b0316610403565b6101f1600480360360208110156101ea57600080fd5b5035610558565b604080516001600160a01b039092168252519081900360200190f35b61019c6004803603602081101561022357600080fd5b5035610573565b6101636004803603602081101561024057600080fd5b5035610591565b61019c6004803603602081101561025d57600080fd5b50356106c2565b6101f16004803603602081101561027a57600080fd5b503561070e565b6101636004803603604081101561029757600080fd5b50803590602001356001600160a01b0316610729565b61019c600480360360408110156102c357600080fd5b5080359060200135610888565b6101f1610a1a565b6102f5600480360360208110156102ee57600080fd5b5035610a29565b6040805160ff9092168252519081900360200190f35b610163610a3e565b61019c6004803603602081101561032957600080fd5b5035610adc565b610163610b08565b6101f1610bb2565b61019c6004803603604081101561035657600080fd5b5080359060200135610bc1565b6101636004803603602081101561037957600080fd5b5035610d59565b61019c6004803603604081101561039657600080fd5b5080359060200135610d5f565b610163610f5a565b61019c61105b565b61010155565b6040805162461bcd60e51b815260206004820152600b60248201526a1b9bdd081cdd5c1c1bdc9d60aa1b604482015290519081900360640190fd5b60006103fe611065565b905090565b61040b61106c565b6065546001600160a01b039081169116146104575760405162461bcd60e51b815260040180806020018281038252602d8152602001806118fe602d913960400191505060405180910390fd5b6001600160a01b03811661049c5760405162461bcd60e51b815260040180806020018281038252602281526020018061187f6022913960400191505060405180910390fd5b6065546001600160a01b03828116911614156104e95760405162461bcd60e51b815260040180806020018281038252602681526020018061192b6026913960400191505060405180910390fd5b6066546001600160a01b03828116911614156105365760405162461bcd60e51b81526004018080602001828103825260278152602001806118106027913960400191505060405180910390fd5b606680546001600160a01b0319166001600160a01b0392909216919091179055565b60cb602052600090815260409020546001600160a01b031681565b60cc818154811061058057fe5b600091825260209091200154905081565b61059961106c565b6065546001600160a01b039081169116146105e55760405162461bcd60e51b815260040180806020018281038252602d8152602001806118fe602d913960400191505060405180910390fd5b6105f66105f18261070e565b611070565b600081815260cb6020908152604080832080546001600160a01b031916905560cd9091528120805460ff1916905560cc54905b818110156106bd578260cc828154811061063f57fe5b906000526020600020015414156106b55760018203811461068f5760cc600183038154811061066a57fe5b906000526020600020015460cc828154811061068257fe5b6000918252602090912001555b60cc80548061069a57fe5b600190038181906000526020600020016000905590556106bd565b600101610629565b505050565b6000806106ce8361070e565b90506106d981611070565b60006106e4826110bb565b50600086815260cd60205260409020549092506107069150829060ff16611173565b949350505050565b600090815260cb60205260409020546001600160a01b031690565b61073161106c565b6065546001600160a01b0390811691161461077d5760405162461bcd60e51b815260040180806020018281038252602d8152602001806118fe602d913960400191505060405180910390fd5b61078681611070565b600082815260cb60205260409020546001600160a01b03166107d85760cc80546001810182556000919091527f47197230e1e4b29fc0bd84d7d78966c0925452aff72a2a121538b102457e9ebe018290555b600082815260cb602090815260409182902080546001600160a01b0319166001600160a01b038516908117909155825163313ce56760e01b81529251909263313ce567926004808301939192829003018186803b15801561083857600080fd5b505afa15801561084c573d6000803e3d6000fd5b505050506040513d602081101561086257600080fd5b5051600092835260cd6020526040909220805460ff191660ff9093169290921790915550565b6000806108948461070e565b905061089f81611070565b6000816001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156108da57600080fd5b505afa1580156108ee573d6000803e3d6000fd5b505050506040513d60a081101561090457600080fd5b505190506001600160501b03811615801590610929575083816001600160501b031610155b61096f576040805162461bcd60e51b81526020600482015260126024820152714e6f7420656e6f75676820686973746f727960701b604482015290519081900360640190fd5b600080836001600160a01b0316639a6fc8f58785036040518263ffffffff1660e01b815260040180826001600160501b03166001600160501b0316815260200191505060a06040518083038186803b1580156109ca57600080fd5b505afa1580156109de573d6000803e3d6000fd5b505050506040513d60a08110156109f457600080fd5b5060208101516060909101519092509050610a0e826111aa565b93505050505b92915050565b6066546001600160a01b031690565b60cd6020526000908152604090205460ff1681565b610a4661106c565b6065546001600160a01b03908116911614610a925760405162461bcd60e51b815260040180806020018281038252602d8152602001806118fe602d913960400191505060405180910390fd5b6065546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3606580546001600160a01b0319169055565b600080610ae88361070e565b9050610af381611070565b6000610afe826110bb565b9695505050505050565b600054610100900460ff1680610b215750610b216111f0565b80610b2f575060005460ff16155b610b6a5760405162461bcd60e51b815260040180806020018281038252602e8152602001806118a1602e913960400191505060405180910390fd5b600054610100900460ff16158015610b95576000805460ff1961ff0019909116610100171660011790555b610b9d6111f6565b8015610baf576000805461ff00191690555b50565b6065546001600160a01b031690565b600080610bcd8461070e565b9050610bd881611070565b6000816001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610c1357600080fd5b505afa158015610c27573d6000803e3d6000fd5b505050506040513d60a0811015610c3d57600080fd5b505190506001600160501b03811615801590610c62575083816001600160501b031610155b610ca8576040805162461bcd60e51b81526020600482015260126024820152714e6f7420656e6f75676820686973746f727960701b604482015290519081900360640190fd5b6000826001600160a01b0316639a6fc8f58684036040518263ffffffff1660e01b815260040180826001600160501b03166001600160501b0316815260200191505060a06040518083038186803b158015610d0257600080fd5b505afa158015610d16573d6000803e3d6000fd5b505050506040513d60a0811015610d2c57600080fd5b50602001519050610d3c816111aa565b600086815260cd6020526040902054610a0e90829060ff16611173565b61010055565b600080610d6b8461070e565b9050610d7681611070565b82610dbe576040805162461bcd60e51b81526020600482015260136024820152720696e74657276616c2063616e2774206265203606c1b604482015290519081900360640190fd5b600084815260cd602052604081205460ff16908080610ddc856110bb565b9250925092506000610dfc88610df0611293565b9063ffffffff61129a16565b905080821080610e1357506001600160501b038416155b15610e2f57610e228386611173565b9650505050505050610a14565b816000610e3e82610df0611293565b90506000610e52868363ffffffff6112dc16565b90505b6001600160501b038716610e8c57610e7c610e76828463ffffffff61133516565b89611173565b9950505050505050505050610a14565b600187039650600080610e9f8b8a611377565b9250925050858111610ee457610edb610ece610ec1878963ffffffff61129a16565b849063ffffffff6112dc16565b849063ffffffff6114cd16565b92505050610f37565b6000610ef6868363ffffffff61129a16565b9050610f18610f0b848363ffffffff6112dc16565b859063ffffffff6114cd16565b9350610f2a858263ffffffff6114cd16565b9450819550505050610e55565b610f4a610e76828d63ffffffff61133516565b9c9b505050505050505050505050565b6066546001600160a01b0316610fa15760405162461bcd60e51b815260040180806020018281038252602f8152602001806118cf602f913960400191505060405180910390fd5b610fa961106c565b6066546001600160a01b03908116911614610ff55760405162461bcd60e51b81526004018080602001828103825260278152602001806118376027913960400191505060405180910390fd5b6066546065546040516001600160a01b0392831692909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360668054606580546001600160a01b03199081166001600160a01b03841617909155169055565b60006103fe611293565b6101015490565b3390565b6001600160a01b038116610baf576040805162461bcd60e51b815260206004820152600d60248201526c656d707479206164647265737360981b604482015290519081900360640190fd5b600080600080600080866001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156110fd57600080fd5b505afa158015611111573d6000803e3d6000fd5b505050506040513d60a081101561112757600080fd5b50805160208201516060909201519196509350859250905060008212156111675761115183611527565b61115e8760018503611377565b90965090935090505b91969395509093505050565b60006111a360ff8316600a0a61119785670de0b6b3a764000063ffffffff6112dc16565b9063ffffffff61133516565b9392505050565b60008113610baf576040805162461bcd60e51b815260206004820152600e60248201526d4e6567617469766520707269636560901b604482015290519081900360640190fd5b303b1590565b600054610100900460ff168061120f575061120f6111f0565b8061121d575060005460ff16155b6112585760405162461bcd60e51b815260040180806020018281038252602e8152602001806118a1602e913960400191505060405180910390fd5b600054610100900460ff16158015611283576000805460ff1961ff0019909116610100171660011790555b61128b61157a565b610b9d61161a565b6101005490565b60006111a383836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611713565b6000826112eb57506000610a14565b828202828482816112f857fe5b04146111a35760405162461bcd60e51b815260040180806020018281038252602181526020018061185e6021913960400191505060405180910390fd5b60006111a383836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506117aa565b600080600080600080876001600160a01b0316639a6fc8f5886040518263ffffffff1660e01b815260040180826001600160501b03166001600160501b0316815260200191505060a06040518083038186803b1580156113d657600080fd5b505afa1580156113ea573d6000803e3d6000fd5b505050506040513d60a081101561140057600080fd5b508051602082015160609092015190945090925090505b60008212156114bf5761142983611527565b60408051639a6fc8f560e01b81526001600160501b03600019909501948516600482015290516001600160a01b038a1691639a6fc8f59160248083019260a0929190829003018186803b15801561147f57600080fd5b505afa158015611493573d6000803e3d6000fd5b505050506040513d60a08110156114a957600080fd5b5060208101516060909101519092509050611417565b919450925090509250925092565b6000828201838110156111a3576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000816001600160501b031611610baf576040805162461bcd60e51b81526020600482015260126024820152714e6f7420656e6f75676820686973746f727960701b604482015290519081900360640190fd5b600054610100900460ff168061159357506115936111f0565b806115a1575060005460ff16155b6115dc5760405162461bcd60e51b815260040180806020018281038252602e8152602001806118a1602e913960400191505060405180910390fd5b600054610100900460ff16158015610b9d576000805460ff1961ff0019909116610100171660011790558015610baf576000805461ff001916905550565b600054610100900460ff168061163357506116336111f0565b80611641575060005460ff16155b61167c5760405162461bcd60e51b815260040180806020018281038252602e8152602001806118a1602e913960400191505060405180910390fd5b600054610100900460ff161580156116a7576000805460ff1961ff0019909116610100171660011790555b60006116b161106c565b606580546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015610baf576000805461ff001916905550565b600081848411156117a25760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561176757818101518382015260200161174f565b50505050905090810190601f1680156117945780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600081836117f95760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561176757818101518382015260200161174f565b50600083858161180557fe5b049594505050505056fe5065727046694f776e61626c65557067726164653a2073616d652061732063616e6469646174655065727046694f776e61626c65557067726164653a206e6f7420746865206e6577206f776e6572536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775065727046694f776e61626c65557067726164653a207a65726f2061646472657373436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a65645065727046694f776e61626c65557067726164653a2063616e646964617465206973207a65726f20616464726573735065727046694f776e61626c65557067726164653a2063616c6c6572206973206e6f7420746865206f776e65725065727046694f776e61626c65557067726164653a2073616d65206173206f726967696e616ca26469706673582212201c064dbc73f372ea08c5a8d7b4dc1adae1b53f1a1721de9adf85e0d4bd8db32064736f6c63430006090033\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Signer, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { ClearingHouseFake } from \"../ClearingHouseFake\";\n\nexport class ClearingHouseFake__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<ClearingHouseFake> {\n    return super.deploy(overrides || {}) as Promise<ClearingHouseFake>;\n  }\n  getDeployTransaction(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  attach(address: string): ClearingHouseFake {\n    return super.attach(address) as ClearingHouseFake;\n  }\n  connect(signer: Signer): ClearingHouseFake__factory {\n    return super.connect(signer) as ClearingHouseFake__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): ClearingHouseFake {\n    return new Contract(address, _abi, signerOrProvider) as ClearingHouseFake;\n  }\n}\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"liquidationFeeRatio\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"LiquidationFeeRatioChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"amm\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"int256\",\n        name: \"amount\",\n        type: \"int256\",\n      },\n      {\n        indexed: false,\n        internalType: \"int256\",\n        name: \"fundingPayment\",\n        type: \"int256\",\n      },\n    ],\n    name: \"MarginChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"marginRatio\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"MarginRatioChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"Paused\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"amm\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"trader\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"int256\",\n        name: \"newPositionSize\",\n        type: \"int256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"oldLiquidityIndex\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"newLiquidityIndex\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"PositionAdjusted\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"trader\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"amm\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"margin\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"positionNotional\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"int256\",\n        name: \"exchangedPositionSize\",\n        type: \"int256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"fee\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"int256\",\n        name: \"positionSizeAfter\",\n        type: \"int256\",\n      },\n      {\n        indexed: false,\n        internalType: \"int256\",\n        name: \"realizedPnl\",\n        type: \"int256\",\n      },\n      {\n        indexed: false,\n        internalType: \"int256\",\n        name: \"unrealizedPnlAfter\",\n        type: \"int256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"badDebt\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"liquidationPenalty\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"spotPrice\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"int256\",\n        name: \"fundingPayment\",\n        type: \"int256\",\n      },\n    ],\n    name: \"PositionChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"trader\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"amm\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"positionNotional\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"positionSize\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"liquidationFee\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"liquidator\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"badDebt\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"PositionLiquidated\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"amm\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"trader\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"valueTransferred\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"PositionSettled\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"referralCode\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"ReferredPositionChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"amm\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"blockNumber\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"RestrictionModeEntered\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"Unpaused\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IAmm\",\n        name: \"_amm\",\n        type: \"address\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_addedMargin\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"addMargin\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IAmm\",\n        name: \"_amm\",\n        type: \"address\",\n      },\n    ],\n    name: \"adjustPosition\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"candidate\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IAmm\",\n        name: \"_amm\",\n        type: \"address\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_quoteAssetAmountLimit\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"closePosition\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IAmm\",\n        name: \"_amm\",\n        type: \"address\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_quoteAssetAmountLimit\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"_referralCode\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"closePositionWithReferral\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"feePool\",\n    outputs: [\n      {\n        internalType: \"contract IMultiTokenRewardRecipient\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IAmm\",\n        name: \"_amm\",\n        type: \"address\",\n      },\n    ],\n    name: \"getLatestCumulativePremiumFraction\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"int256\",\n            name: \"d\",\n            type: \"int256\",\n          },\n        ],\n        internalType: \"struct SignedDecimal.signedDecimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IAmm\",\n        name: \"_amm\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_trader\",\n        type: \"address\",\n      },\n    ],\n    name: \"getMarginRatio\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"int256\",\n            name: \"d\",\n            type: \"int256\",\n          },\n        ],\n        internalType: \"struct SignedDecimal.signedDecimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IAmm\",\n        name: \"_amm\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_trader\",\n        type: \"address\",\n      },\n    ],\n    name: \"getPosition\",\n    outputs: [\n      {\n        components: [\n          {\n            components: [\n              {\n                internalType: \"int256\",\n                name: \"d\",\n                type: \"int256\",\n              },\n            ],\n            internalType: \"struct SignedDecimal.signedDecimal\",\n            name: \"size\",\n            type: \"tuple\",\n          },\n          {\n            components: [\n              {\n                internalType: \"uint256\",\n                name: \"d\",\n                type: \"uint256\",\n              },\n            ],\n            internalType: \"struct Decimal.decimal\",\n            name: \"margin\",\n            type: \"tuple\",\n          },\n          {\n            components: [\n              {\n                internalType: \"uint256\",\n                name: \"d\",\n                type: \"uint256\",\n              },\n            ],\n            internalType: \"struct Decimal.decimal\",\n            name: \"openNotional\",\n            type: \"tuple\",\n          },\n          {\n            components: [\n              {\n                internalType: \"int256\",\n                name: \"d\",\n                type: \"int256\",\n              },\n            ],\n            internalType: \"struct SignedDecimal.signedDecimal\",\n            name: \"lastUpdatedCumulativePremiumFraction\",\n            type: \"tuple\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"liquidityHistoryIndex\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"blockNumber\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct ClearingHouse.Position\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IAmm\",\n        name: \"_amm\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_trader\",\n        type: \"address\",\n      },\n      {\n        internalType: \"enum ClearingHouse.PnlCalcOption\",\n        name: \"_pnlCalcOption\",\n        type: \"uint8\",\n      },\n    ],\n    name: \"getPositionNotionalAndUnrealizedPnl\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"positionNotional\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"int256\",\n            name: \"d\",\n            type: \"int256\",\n          },\n        ],\n        internalType: \"struct SignedDecimal.signedDecimal\",\n        name: \"unrealizedPnl\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_token\",\n        type: \"address\",\n      },\n    ],\n    name: \"getPrepaidBadDebt\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IAmm\",\n        name: \"_amm\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_trader\",\n        type: \"address\",\n      },\n    ],\n    name: \"getUnadjustedPosition\",\n    outputs: [\n      {\n        components: [\n          {\n            components: [\n              {\n                internalType: \"int256\",\n                name: \"d\",\n                type: \"int256\",\n              },\n            ],\n            internalType: \"struct SignedDecimal.signedDecimal\",\n            name: \"size\",\n            type: \"tuple\",\n          },\n          {\n            components: [\n              {\n                internalType: \"uint256\",\n                name: \"d\",\n                type: \"uint256\",\n              },\n            ],\n            internalType: \"struct Decimal.decimal\",\n            name: \"margin\",\n            type: \"tuple\",\n          },\n          {\n            components: [\n              {\n                internalType: \"uint256\",\n                name: \"d\",\n                type: \"uint256\",\n              },\n            ],\n            internalType: \"struct Decimal.decimal\",\n            name: \"openNotional\",\n            type: \"tuple\",\n          },\n          {\n            components: [\n              {\n                internalType: \"int256\",\n                name: \"d\",\n                type: \"int256\",\n              },\n            ],\n            internalType: \"struct SignedDecimal.signedDecimal\",\n            name: \"lastUpdatedCumulativePremiumFraction\",\n            type: \"tuple\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"liquidityHistoryIndex\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"blockNumber\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct ClearingHouse.Position\",\n        name: \"position\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"initMarginRatio\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"d\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_initMarginRatio\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_maintenanceMarginRatio\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_liquidationFeeRatio\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"contract IInsuranceFund\",\n        name: \"_insuranceFund\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_trustedForwarder\",\n        type: \"address\",\n      },\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"insuranceFund\",\n    outputs: [\n      {\n        internalType: \"contract IInsuranceFund\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_amm\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_block\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"isInRestrictMode\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"forwarder\",\n        type: \"address\",\n      },\n    ],\n    name: \"isTrustedForwarder\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IAmm\",\n        name: \"_amm\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_trader\",\n        type: \"address\",\n      },\n    ],\n    name: \"liquidate\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"liquidationFeeRatio\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"d\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"maintenanceMarginRatio\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"d\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IAmm\",\n        name: \"_amm\",\n        type: \"address\",\n      },\n    ],\n    name: \"mockSetRestrictionMode\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"mock_getCurrentBlockNumber\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_number\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"mock_setBlockNumber\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_timestamp\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"mock_setBlockTimestamp\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"openInterestNotionalMap\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"d\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IAmm\",\n        name: \"_amm\",\n        type: \"address\",\n      },\n      {\n        internalType: \"enum ClearingHouse.Side\",\n        name: \"_side\",\n        type: \"uint8\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_quoteAssetAmount\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_leverage\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_baseAssetAmountLimit\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"openPosition\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IAmm\",\n        name: \"_amm\",\n        type: \"address\",\n      },\n      {\n        internalType: \"enum ClearingHouse.Side\",\n        name: \"_side\",\n        type: \"uint8\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_quoteAssetAmount\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_leverage\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_baseAssetAmountLimit\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"_referralCode\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"openPositionWithReferral\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"partialLiquidationRatio\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"d\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"pause\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"paused\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IAmm\",\n        name: \"_amm\",\n        type: \"address\",\n      },\n    ],\n    name: \"payFunding\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IAmm\",\n        name: \"_amm\",\n        type: \"address\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_removedMargin\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"removeMargin\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_liquidationFeeRatio\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"setLiquidationFeeRatio\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_maintenanceMarginRatio\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"setMaintenanceMarginRatio\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"setOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_ratio\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"setPartialLiquidationRatio\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_feePool\",\n        type: \"address\",\n      },\n    ],\n    name: \"setTollPool\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_whitelist\",\n        type: \"address\",\n      },\n    ],\n    name: \"setWhitelist\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IAmm\",\n        name: \"_amm\",\n        type: \"address\",\n      },\n    ],\n    name: \"settlePosition\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"trustedForwarder\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"unpause\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"updateOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"versionRecipient\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Signer, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { DecimalERC20Fake } from \"../DecimalERC20Fake\";\n\nexport class DecimalERC20Fake__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<DecimalERC20Fake> {\n    return super.deploy(overrides || {}) as Promise<DecimalERC20Fake>;\n  }\n  getDeployTransaction(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  attach(address: string): DecimalERC20Fake {\n    return super.attach(address) as DecimalERC20Fake;\n  }\n  connect(signer: Signer): DecimalERC20Fake__factory {\n    return super.connect(signer) as DecimalERC20Fake__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): DecimalERC20Fake {\n    return new Contract(address, _abi, signerOrProvider) as DecimalERC20Fake;\n  }\n}\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"_token\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_owner\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_spender\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"_token\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_spender\",\n        type: \"address\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_amount\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"_token\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"_token\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_receiver\",\n        type: \"address\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_amount\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"_token\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_receiver\",\n        type: \"address\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_amount\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x608060405234801561001057600080fd5b50610eb7806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80632b8c77761461005c5780635ed283ea14610071578063927da105146100845780639577ee82146100ad578063f7888aec146100c0575b600080fd5b61006f61006a366004610ad9565b6100d3565b005b61006f61007f366004610b33565b6100f3565b610097610092366004610a8f565b610111565b6040516100a49190610e33565b60405180910390f35b61006f6100bb366004610b33565b61012c565b6100976100ce366004610a57565b610145565b6100ed8484846100e836869003860186610b7a565b610160565b50505050565b61010c838361010736859003850185610b7a565b61029b565b505050565b610119610a0d565b6101248484846103ca565b949350505050565b61010c838361014036859003850185610b7a565b610459565b61014d610a0d565b610157838361047f565b90505b92915050565b610169846104b7565b610171610a0d565b61017b858461047f565b905060006101898684610504565b905060006060876001600160a01b03166323b872dd60e01b8888866040516024016101b693929190610c19565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516101f49190610bcf565b6000604051808303816000865af19150503d8060008114610231576040519150601f19603f3d011682016040523d82523d6000602084013e610236565b606091505b50915091508180156102605750805115806102605750808060200190518101906102609190610a37565b6102855760405162461bcd60e51b815260040161027c90610d38565b60405180910390fd5b6102918887858761057a565b5050505050505050565b6102a4836104b7565b6102ac610a0d565b6102b6848461047f565b905060006102c48584610504565b905060006060866001600160a01b031663a9059cbb60e01b87856040516024016102ef929190610c3d565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161032d9190610bcf565b6000604051808303816000865af19150503d806000811461036a576040519150601f19603f3d011682016040523d82523d6000602084013e61036f565b606091505b50915091508180156103995750805115806103995750808060200190518101906103999190610a37565b6103b55760405162461bcd60e51b815260040161027c90610c89565b6103c18787858761057a565b50505050505050565b6103d2610a0d565b61012484856001600160a01b031663dd62ed3e86866040518363ffffffff1660e01b8152600401610404929190610bff565b60206040518083038186803b15801561041c57600080fd5b505afa158015610430573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104549190610bb7565b6105cd565b610462836104b7565b610474838361046f61065f565b61067a565b61010c83838361067a565b610487610a0d565b61015783846001600160a01b03166370a08231856040518263ffffffff1660e01b81526004016104049190610beb565b60006104c282610779565b6001600160a01b0383166000908152602081905260409020549091508114610500576001600160a01b03821660009081526020819052604090208190555b5050565b60008061051084610779565b90506012811061054e5761054661052e82601263ffffffff61086616565b600a0a61053a856108a8565b9063ffffffff6108ac16565b91505061015a565b61012461056260128363ffffffff61086616565b600a0a61056e856108a8565b9063ffffffff6108e616565b6105ad61059761058a86856105cd565b839063ffffffff61092816565b6105a1868661047f565b9063ffffffff61095416565b60000b156100ed5760405162461bcd60e51b815260040161027c90610df1565b6105d5610a0d565b60006105e084610779565b9050601281106106255760408051602081019091528061061a61060a84601263ffffffff61086616565b8690600a0a63ffffffff6108e616565b81525091505061015a565b60408051602081019091528061065561064560128563ffffffff61086616565b8690600a0a63ffffffff6108ac16565b9052949350505050565b610667610a0d565b5060408051602081019091526000815290565b600060606001600160a01b03851663095ea7b360e01b8561069b8887610504565b6040516024016106ac929190610c3d565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516106ea9190610bcf565b6000604051808303816000865af19150503d8060008114610727576040519150601f19603f3d011682016040523d82523d6000602084013e61072c565b606091505b50915091508180156107565750805115806107565750808060200190518101906107569190610a37565b6107725760405162461bcd60e51b815260040161027c90610dba565b5050505050565b6001600160a01b0381166000908152602081905260408120548061015a5760408051600481526024810182526020810180516001600160e01b031663313ce56760e01b17905290516000916060916001600160a01b038716916107db91610bcf565b600060405180830381855afa9150503d8060008114610816576040519150601f19603f3d011682016040523d82523d6000602084013e61081b565b606091505b509150915081801561082d5750805115155b6108495760405162461bcd60e51b815260040161027c90610cf7565b8080602001905181019061085d9190610bb7565b95945050505050565b600061015783836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610985565b5190565b6000826108bb5750600061015a565b828202828482816108c857fe5b04146101575760405162461bcd60e51b815260040161027c90610d79565b600061015783836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506109b1565b610930610a0d565b610938610a0d565b8251845161094b9163ffffffff6109e816565b81529392505050565b8051825160009110156109695750600161015a565b81518351101561097c575060001961015a565b50600092915050565b600081848411156109a95760405162461bcd60e51b815260040161027c9190610c56565b505050900390565b600081836109d25760405162461bcd60e51b815260040161027c9190610c56565b5060008385816109de57fe5b0495945050505050565b6000828201838110156101575760405162461bcd60e51b815260040161027c90610cc0565b6040518060200160405280600081525090565b600060208284031215610a31578081fd5b50919050565b600060208284031215610a48578081fd5b81518015158114610157578182fd5b60008060408385031215610a69578081fd5b8235610a7481610e69565b91506020830135610a8481610e69565b809150509250929050565b600080600060608486031215610aa3578081fd5b8335610aae81610e69565b92506020840135610abe81610e69565b91506040840135610ace81610e69565b809150509250925092565b60008060008060808587031215610aee578081fd5b8435610af981610e69565b93506020850135610b0981610e69565b92506040850135610b1981610e69565b9150610b288660608701610a20565b905092959194509250565b600080600060608486031215610b47578283fd5b8335610b5281610e69565b92506020840135610b6281610e69565b9150610b718560408601610a20565b90509250925092565b600060208284031215610b8b578081fd5b6040516020810181811067ffffffffffffffff82111715610baa578283fd5b6040529135825250919050565b600060208284031215610bc8578081fd5b5051919050565b60008251610be1818460208701610e3d565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6000602082528251806020840152610c75816040850160208701610e3d565b601f01601f19169190910160400192915050565b6020808252601d908201527f446563696d616c45524332303a207472616e73666572206661696c6564000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526021908201527f446563696d616c45524332303a2067657420646563696d616c73206661696c656040820152601960fa1b606082015260800190565b60208082526021908201527f446563696d616c45524332303a207472616e7366657246726f6d206661696c656040820152601960fa1b606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252601c908201527f446563696d616c45524332303a20617070726f7665206661696c656400000000604082015260600190565b60208082526022908201527f446563696d616c45524332303a2062616c616e636520696e636f6e73697374656040820152611b9d60f21b606082015260800190565b9051815260200190565b60005b83811015610e58578181015183820152602001610e40565b838111156100ed5750506000910152565b6001600160a01b0381168114610e7e57600080fd5b5056fea2646970667358221220e4a7bd9206a67de3d4aec31051e90a2d7b6eda869082a77d0c8f38d8d6c795d564736f6c63430006090033\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Signer, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { DecimalFake } from \"../DecimalFake\";\n\nexport class DecimalFake__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<DecimalFake> {\n    return super.deploy(overrides || {}) as Promise<DecimalFake>;\n  }\n  getDeployTransaction(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  attach(address: string): DecimalFake {\n    return super.attach(address) as DecimalFake;\n  }\n  connect(signer: Signer): DecimalFake__factory {\n    return super.connect(signer) as DecimalFake__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): DecimalFake {\n    return new Contract(address, _abi, signerOrProvider) as DecimalFake;\n  }\n}\n\nconst _abi = [\n  {\n    inputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"x\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"y\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"div\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"z\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"pure\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"x\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"y\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"divScalar\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"z\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"pure\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"x\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"y\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"mul\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"z\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"pure\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"x\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"y\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"mulScalar\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"z\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"pure\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x608060405234801561001057600080fd5b50610463806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806345a5e9d014610051578063b0df7c1d1461007a578063b2eb1a5a1461008d578063c7fcab82146100a0575b600080fd5b61006461005f366004610365565b6100b3565b6040516100719190610423565b60405180910390f35b610064610088366004610331565b6100d2565b61006461009b366004610331565b6100ea565b6100646100ae366004610365565b610102565b6100bb6102e1565b6100cb838363ffffffff61011a16565b9392505050565b6100da6102e1565b6100cb838363ffffffff61014716565b6100f26102e1565b6100cb838363ffffffff61016a16565b61010a6102e1565b6100cb838363ffffffff61018d16565b6101226102e1565b61012a6102e1565b835161013c908463ffffffff6101af16565b815290505b92915050565b61014f6102e1565b6101576102e1565b8251845161013c9163ffffffff6101f216565b6101726102e1565b61017a6102e1565b8251845161013c9163ffffffff61020016565b6101956102e1565b61019d6102e1565b835161013c908463ffffffff61020e16565b6000826101be57506000610141565b828202828482816101cb57fe5b04146100cb5760405162461bcd60e51b81526004016101e9906103e2565b60405180910390fd5b60006100cb83836012610250565b60006100cb83836012610283565b60006100cb83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506102a1565b600061027b8361026f610262856102d8565b879063ffffffff6101af16565b9063ffffffff61020e16565b949350505050565b600061027b610291836102d8565b61026f868663ffffffff6101af16565b600081836102c25760405162461bcd60e51b81526004016101e9919061038f565b5060008385816102ce57fe5b0495945050505050565b60ff16600a0a90565b6040518060200160405280600081525090565b600060208284031215610305578081fd5b6040516020810181811067ffffffffffffffff82111715610324578283fd5b6040529135825250919050565b60008060408385031215610343578182fd5b61034d84846102f4565b915061035c84602085016102f4565b90509250929050565b60008060408385031215610377578081fd5b61038184846102f4565b946020939093013593505050565b6000602080835283518082850152825b818110156103bb5785810183015185820160400152820161039f565b818111156103cc5783604083870101525b50601f01601f1916929092016040019392505050565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b905181526020019056fea26469706673582212206770a9a28d14fd287ec733a8a1a5976f5aaaf4d8a0e82642f0c9f6cc5cec728b64736f6c63430006090033\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Signer, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { ERC20Fake } from \"../ERC20Fake\";\n\nexport class ERC20Fake__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<ERC20Fake> {\n    return super.deploy(overrides || {}) as Promise<ERC20Fake>;\n  }\n  getDeployTransaction(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  attach(address: string): ERC20Fake {\n    return super.attach(address) as ERC20Fake;\n  }\n  connect(signer: Signer): ERC20Fake__factory {\n    return super.connect(signer) as ERC20Fake__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): ERC20Fake {\n    return new Contract(address, _abi, signerOrProvider) as ERC20Fake;\n  }\n}\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"Paused\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n    ],\n    name: \"RoleGranted\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n    ],\n    name: \"RoleRevoked\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"Unpaused\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"DEFAULT_ADMIN_ROLE\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"MINTER_ROLE\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"PAUSER_ROLE\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"burn\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"burnFrom\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        internalType: \"uint8\",\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"subtractedValue\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"decreaseAllowance\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"getRoleAdmin\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"index\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getRoleMember\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"getRoleMemberCount\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"grantRole\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"hasRole\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"addedValue\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"increaseAllowance\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"string\",\n        name: \"name\",\n        type: \"string\",\n      },\n      {\n        internalType: \"string\",\n        name: \"symbol\",\n        type: \"string\",\n      },\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"initialSupply\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"string\",\n        name: \"name\",\n        type: \"string\",\n      },\n      {\n        internalType: \"string\",\n        name: \"symbol\",\n        type: \"string\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"decimal\",\n        type: \"uint8\",\n      },\n    ],\n    name: \"initializeERC20Fake\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"mint\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"pause\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"paused\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"renounceRole\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"revokeRole\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"unpause\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x608060405234801561001057600080fd5b50611ece806100206000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c80636cb9fd5411610104578063a217fddf116100a2578063d539139311610071578063d5391393146103a3578063d547741f146103ab578063dd62ed3e146103be578063e63ab1e9146103d1576101cf565b8063a217fddf14610362578063a457c2d71461036a578063a9059cbb1461037d578063ca15c87314610390576101cf565b80638456cb59116100de5780638456cb591461031f5780639010d07c1461032757806391d148541461034757806395d89b411461035a576101cf565b80636cb9fd54146102e657806370a08231146102f957806379cc67901461030c576101cf565b806336568abe1161017157806340c10f191161014b57806340c10f19146102a557806342966c68146102b85780634cd88b76146102cb5780635c975abb146102de576101cf565b806336568abe14610277578063395093511461028a5780633f4ba83a1461029d576101cf565b806323b872dd116101ad57806323b872dd14610227578063248a9ca31461023a5780632f2ff15d1461024d578063313ce56714610262576101cf565b806306fdde03146101d4578063095ea7b3146101f257806318160ddd14610212575b600080fd5b6101dc6103d9565b6040516101e9919061187c565b60405180910390f35b6102056102003660046116b1565b610470565b6040516101e99190611868565b61021a61048e565b6040516101e99190611873565b610205610235366004611671565b610494565b61021a6102483660046116db565b610521565b61026061025b3660046116f3565b610536565b005b61026a610587565b6040516101e99190611dbc565b6102606102853660046116f3565b610590565b6102056102983660046116b1565b6105d2565b610260610626565b6102606102b33660046116b1565b61066b565b6102606102c63660046116db565b6106a0565b6102606102d9366004611743565b6106b4565b6102056106be565b6102606102f43660046117a4565b6106c7565b61021a610307366004611622565b610772565b61026061031a3660046116b1565b61078d565b6102606107e8565b61033a610335366004611722565b61081b565b6040516101e99190611854565b6102056103553660046116f3565b610840565b6101dc61085e565b61021a6108bf565b6102056103783660046116b1565b6108c4565b61020561038b3660046116b1565b610932565b61021a61039e3660046116db565b610946565b61021a61095d565b6102606103b93660046116f3565b610974565b61021a6103cc36600461163d565b6109ae565b61021a6109d9565b609a8054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104655780601f1061043a57610100808354040283529160200191610465565b820191906000526020600020905b81548152906001019060200180831161044857829003601f168201915b505050505090505b90565b600061048461047d6109e5565b84846109e9565b5060015b92915050565b60995490565b60006104a1848484610a9d565b610517846104ad6109e5565b61051285604051806060016040528060288152602001611e28602891396001600160a01b038a166000908152609860205260408120906104eb6109e5565b6001600160a01b03168152602081019190915260400160002054919063ffffffff610bbe16565b6109e9565b5060019392505050565b60009081526065602052604090206002015490565b600082815260656020526040902060020154610554906103556109e5565b6105795760405162461bcd60e51b815260040161057090611954565b60405180910390fd5b6105838282610bea565b5050565b609c5460ff1690565b6105986109e5565b6001600160a01b0316816001600160a01b0316146105c85760405162461bcd60e51b815260040161057090611cec565b6105838282610c59565b60006104846105df6109e5565b8461051285609860006105f06109e5565b6001600160a01b03908116825260208083019390935260409182016000908120918c16815292529020549063ffffffff610cc816565b61064560405161063590611826565b60405180910390206103556109e5565b6106615760405162461bcd60e51b8152600401610570906119d1565b610669610ced565b565b61067a6040516106359061183d565b6106965760405162461bcd60e51b815260040161057090611b21565b6105838282610d59565b6106b16106ab6109e5565b82610e25565b50565b6105838282610f07565b60fb5460ff1690565b600054610100900460ff16806106e057506106e0610fc7565b806106ee575060005460ff16155b61070a5760405162461bcd60e51b815260040161057090611b77565b600054610100900460ff16158015610735576000805460ff1961ff0019909116610100171660011790555b61073f84846106b4565b61074882610fcd565b6107596107536109e5565b86610d59565b801561076b576000805461ff00191690555b5050505050565b6001600160a01b031660009081526097602052604090205490565b60006107c582604051806060016040528060248152602001611e50602491396107b8866103cc6109e5565b919063ffffffff610bbe16565b90506107d9836107d36109e5565b836109e9565b6107e38383610e25565b505050565b6107f760405161063590611826565b6108135760405162461bcd60e51b815260040161057090611c8f565b610669610fe3565b6000828152606560205260408120610839908363ffffffff61103c16565b9392505050565b6000828152606560205260408120610839908363ffffffff61104816565b609b8054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104655780601f1061043a57610100808354040283529160200191610465565b600081565b60006104846108d16109e5565b8461051285604051806060016040528060258152602001611e7460259139609860006108fb6109e5565b6001600160a01b03908116825260208083019390935260409182016000908120918d1681529252902054919063ffffffff610bbe16565b600061048461093f6109e5565b8484610a9d565b60008181526065602052604081206104889061105d565b6040516109699061183d565b604051809103902081565b600082815260656020526040902060020154610992906103556109e5565b6105c85760405162461bcd60e51b815260040161057090611aa7565b6001600160a01b03918216600090815260986020908152604080832093909416825291909152205490565b60405161096990611826565b3390565b6001600160a01b038316610a0f5760405162461bcd60e51b815260040161057090611c4b565b6001600160a01b038216610a355760405162461bcd60e51b815260040161057090611a2e565b6001600160a01b0380841660008181526098602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610a90908590611873565b60405180910390a3505050565b6001600160a01b038316610ac35760405162461bcd60e51b815260040161057090611c06565b6001600160a01b038216610ae95760405162461bcd60e51b815260040161057090611911565b610af4838383611068565b610b3781604051806060016040528060268152602001611e02602691396001600160a01b038616600090815260976020526040902054919063ffffffff610bbe16565b6001600160a01b038085166000908152609760205260408082209390935590841681522054610b6c908263ffffffff610cc816565b6001600160a01b0380841660008181526097602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610a90908590611873565b60008184841115610be25760405162461bcd60e51b8152600401610570919061187c565b505050900390565b6000828152606560205260409020610c08908263ffffffff61107316565b1561058357610c156109e5565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152606560205260409020610c77908263ffffffff61108816565b1561058357610c846109e5565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b6000828201838110156108395760405162461bcd60e51b815260040161057090611a70565b60fb5460ff16610d0f5760405162461bcd60e51b8152600401610570906119a3565b60fb805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa610d426109e5565b604051610d4f9190611854565b60405180910390a1565b6001600160a01b038216610d7f5760405162461bcd60e51b815260040161057090611d3b565b610d8b60008383611068565b609954610d9e908263ffffffff610cc816565b6099556001600160a01b038216600090815260976020526040902054610dca908263ffffffff610cc816565b6001600160a01b0383166000818152609760205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610e19908590611873565b60405180910390a35050565b6001600160a01b038216610e4b5760405162461bcd60e51b815260040161057090611bc5565b610e5782600083611068565b610e9a81604051806060016040528060228152602001611de0602291396001600160a01b038516600090815260976020526040902054919063ffffffff610bbe16565b6001600160a01b038316600090815260976020526040902055609954610ec6908263ffffffff61109d16565b6099556040516000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610e19908590611873565b600054610100900460ff1680610f205750610f20610fc7565b80610f2e575060005460ff16155b610f4a5760405162461bcd60e51b815260040161057090611b77565b600054610100900460ff16158015610f75576000805460ff1961ff0019909116610100171660011790555b610f7d6110df565b610f856110df565b610f8f8383611161565b610f976110df565b610f9f61121a565b610fa76110df565b610fb183836112a6565b80156107e3576000805461ff0019169055505050565b303b1590565b609c805460ff191660ff92909216919091179055565b60fb5460ff16156110065760405162461bcd60e51b815260040161057090611af7565b60fb805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610d426109e5565b60006108398383611354565b6000610839836001600160a01b038416611399565b6000610488826113b1565b6107e38383836113b5565b6000610839836001600160a01b0384166113e5565b6000610839836001600160a01b03841661142f565b600061083983836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610bbe565b600054610100900460ff16806110f857506110f8610fc7565b80611106575060005460ff16155b6111225760405162461bcd60e51b815260040161057090611b77565b600054610100900460ff1615801561114d576000805460ff1961ff0019909116610100171660011790555b80156106b1576000805461ff001916905550565b600054610100900460ff168061117a575061117a610fc7565b80611188575060005460ff16155b6111a45760405162461bcd60e51b815260040161057090611b77565b600054610100900460ff161580156111cf576000805460ff1961ff0019909116610100171660011790555b82516111e290609a9060208601906114f5565b5081516111f690609b9060208501906114f5565b50609c805460ff1916601217905580156107e3576000805461ff0019169055505050565b600054610100900460ff16806112335750611233610fc7565b80611241575060005460ff16155b61125d5760405162461bcd60e51b815260040161057090611b77565b600054610100900460ff16158015611288576000805460ff1961ff0019909116610100171660011790555b60fb805460ff1916905580156106b1576000805461ff001916905550565b600054610100900460ff16806112bf57506112bf610fc7565b806112cd575060005460ff16155b6112e95760405162461bcd60e51b815260040161057090611b77565b600054610100900460ff16158015611314576000805460ff1961ff0019909116610100171660011790555b61132660006113216109e5565b610579565b6113456040516113359061183d565b60405180910390206113216109e5565b610fb160405161133590611826565b815460009082106113775760405162461bcd60e51b8152600401610570906118cf565b82600001828154811061138657fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b5490565b6113c08383836107e3565b6113c86106be565b156107e35760405162461bcd60e51b815260040161057090611d72565b60006113f18383611399565b61142757508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610488565b506000610488565b600081815260018301602052604081205480156114eb578354600019808301919081019060009087908390811061146257fe5b906000526020600020015490508087600001848154811061147f57fe5b6000918252602080832090910192909255828152600189810190925260409020908401905586548790806114af57fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610488565b6000915050610488565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061153657805160ff1916838001178555611563565b82800160010185558215611563579182015b82811115611563578251825591602001919060010190611548565b5061156f929150611573565b5090565b61046d91905b8082111561156f5760008155600101611579565b80356001600160a01b038116811461048857600080fd5b600082601f8301126115b4578081fd5b813567ffffffffffffffff808211156115cb578283fd5b604051601f8301601f1916810160200182811182821017156115eb578485fd5b60405282815292508284830160200186101561160657600080fd5b8260208601602083013760006020848301015250505092915050565b600060208284031215611633578081fd5b610839838361158d565b6000806040838503121561164f578081fd5b611659848461158d565b9150611668846020850161158d565b90509250929050565b600080600060608486031215611685578081fd5b833561169081611dca565b925060208401356116a081611dca565b929592945050506040919091013590565b600080604083850312156116c3578182fd5b6116cd848461158d565b946020939093013593505050565b6000602082840312156116ec578081fd5b5035919050565b60008060408385031215611705578182fd5b82359150602083013561171781611dca565b809150509250929050565b60008060408385031215611734578182fd5b50508035926020909101359150565b60008060408385031215611755578182fd5b823567ffffffffffffffff8082111561176c578384fd5b611778868387016115a4565b9350602085013591508082111561178d578283fd5b5061179a858286016115a4565b9150509250929050565b600080600080608085870312156117b9578081fd5b84359350602085013567ffffffffffffffff808211156117d7578283fd5b6117e3888389016115a4565b945060408701359150808211156117f8578283fd5b50611805878288016115a4565b925050606085013560ff8116811461181b578182fd5b939692955090935050565b6a5041555345525f524f4c4560a81b8152600b0190565b6a4d494e5445525f524f4c4560a81b8152600b0190565b6001600160a01b0391909116815260200190565b901515815260200190565b90815260200190565b6000602080835283518082850152825b818110156118a85785810183015185820160400152820161188c565b818111156118b95783604083870101525b50601f01601f1916929092016040019392505050565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201526e0818591b5a5b881d1bc819dc985b9d608a1b606082015260800190565b60208082526014908201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604082015260600190565b60208082526039908201527f45524332305072657365744d696e7465725061757365723a206d75737420686160408201527f76652070617573657220726f6c6520746f20756e706175736500000000000000606082015260800190565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604082015261737360f01b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526030908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201526f2061646d696e20746f207265766f6b6560801b606082015260800190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60208082526036908201527f45524332305072657365744d696e7465725061757365723a206d7573742068616040820152751d99481b5a5b9d195c881c9bdb19481d1bc81b5a5b9d60521b606082015260800190565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201526d195b881a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526021908201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736040820152607360f81b606082015260800190565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526037908201527f45524332305072657365744d696e7465725061757365723a206d75737420686160408201527f76652070617573657220726f6c6520746f207061757365000000000000000000606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201526e103937b632b9903337b91039b2b63360891b606082015260800190565b6020808252601f908201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604082015260600190565b6020808252602a908201527f45524332305061757361626c653a20746f6b656e207472616e736665722077686040820152691a5b19481c185d5cd95960b21b606082015260800190565b60ff91909116815260200190565b6001600160a01b03811681146106b157600080fdfe45524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e20616d6f756e74206578636565647320616c6c6f77616e636545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa26469706673582212201162b717e7e89588c9fa44a282db2084ef6f6a5cd5136fbff8f46cc32256f23164736f6c63430006090033\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Signer, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { ERC20MinimalFake } from \"../ERC20MinimalFake\";\n\nexport class ERC20MinimalFake__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<ERC20MinimalFake> {\n    return super.deploy(overrides || {}) as Promise<ERC20MinimalFake>;\n  }\n  getDeployTransaction(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  attach(address: string): ERC20MinimalFake {\n    return super.attach(address) as ERC20MinimalFake;\n  }\n  connect(signer: Signer): ERC20MinimalFake__factory {\n    return super.connect(signer) as ERC20MinimalFake__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): ERC20MinimalFake {\n    return new Contract(address, _abi, signerOrProvider) as ERC20MinimalFake;\n  }\n}\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"subtractedValue\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"decreaseAllowance\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"addedValue\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"increaseAllowance\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"initialSupply\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"initializeERC20MinimalFake\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x608060405234801561001057600080fd5b50610bb5806100206000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c806370a082311161006657806370a08231146100fc578063a457c2d71461010f578063a9059cbb14610122578063b5d25dcb14610135578063dd62ed3e1461014a57610093565b8063095ea7b31461009857806318160ddd146100c157806323b872dd146100d657806339509351146100e9575b600080fd5b6100ab6100a636600461084d565b61015d565b6040516100b8919061088f565b60405180910390f35b6100c961017b565b6040516100b89190610aee565b6100ab6100e436600461080d565b610181565b6100ab6100f736600461084d565b61020e565b6100c961010a3660046107be565b610262565b6100ab61011d36600461084d565b61027d565b6100ab61013036600461084d565b6102eb565b610148610143366004610877565b6102ff565b005b6100c96101583660046107d9565b6103a5565b600061017161016a6103d0565b84846103d4565b5060015b92915050565b60675490565b600061018e8484846104d4565b6102048461019a6103d0565b6101ff85604051806060016040528060288152602001610b33602891396001600160a01b038a166000908152606660205260408120906101d86103d0565b6001600160a01b03168152602081019190915260400160002054919063ffffffff6105f516565b6103d4565b5060019392505050565b600061017161021b6103d0565b846101ff856066600061022c6103d0565b6001600160a01b03908116825260208083019390935260409182016000908120918c16815292529020549063ffffffff61062116565b6001600160a01b031660009081526065602052604090205490565b600061017161028a6103d0565b846101ff85604051806060016040528060258152602001610b5b60259139606660006102b46103d0565b6001600160a01b03908116825260208083019390935260409182016000908120918d1681529252902054919063ffffffff6105f516565b60006101716102f86103d0565b84846104d4565b600054610100900460ff1680610318575061031861064d565b80610326575060005460ff16155b61034b5760405162461bcd60e51b8152600401610342906109e0565b60405180910390fd5b600054610100900460ff16158015610376576000805460ff1961ff0019909116610100171660011790555b61037e610653565b61038f6103896103d0565b836106d6565b80156103a1576000805461ff00191690555b5050565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205490565b3390565b6001600160a01b0383166103fa5760405162461bcd60e51b815260040161034290610a73565b6001600160a01b0382166104205760405162461bcd60e51b815260040161034290610930565b6001600160a01b038084166000908152606660209081526040808320938616835292905220541580610450575080155b61046c5760405162461bcd60e51b8152600401610342906109a9565b6001600160a01b0380841660008181526066602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906104c7908590610aee565b60405180910390a3505050565b6001600160a01b0383166104fa5760405162461bcd60e51b815260040161034290610a2e565b6001600160a01b0382166105205760405162461bcd60e51b8152600401610342906108ed565b61052b8383836107a2565b61056e81604051806060016040528060268152602001610b0d602691396001600160a01b038616600090815260656020526040902054919063ffffffff6105f516565b6001600160a01b0380851660009081526065602052604080822093909355908416815220546105a3908263ffffffff61062116565b6001600160a01b0380841660008181526065602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906104c7908590610aee565b600081848411156106195760405162461bcd60e51b8152600401610342919061089a565b505050900390565b6000828201838110156106465760405162461bcd60e51b815260040161034290610972565b9392505050565b303b1590565b600054610100900460ff168061066c575061066c61064d565b8061067a575060005460ff16155b6106965760405162461bcd60e51b8152600401610342906109e0565b600054610100900460ff161580156106c1576000805460ff1961ff0019909116610100171660011790555b80156106d3576000805461ff00191690555b50565b6001600160a01b0382166106fc5760405162461bcd60e51b815260040161034290610ab7565b610708600083836107a2565b60675461071b908263ffffffff61062116565b6067556001600160a01b038216600090815260656020526040902054610747908263ffffffff61062116565b6001600160a01b0383166000818152606560205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610796908590610aee565b60405180910390a35050565b505050565b80356001600160a01b038116811461017557600080fd5b6000602082840312156107cf578081fd5b61064683836107a7565b600080604083850312156107eb578081fd5b6107f584846107a7565b915061080484602085016107a7565b90509250929050565b600080600060608486031215610821578081fd5b833561082c81610af7565b9250602084013561083c81610af7565b929592945050506040919091013590565b6000806040838503121561085f578182fd5b61086984846107a7565b946020939093013593505050565b600060208284031215610888578081fd5b5035919050565b901515815260200190565b6000602080835283518082850152825b818110156108c6578581018301518582016040015282016108aa565b818111156108d75783604083870101525b50601f01601f1916929092016040019392505050565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604082015261737360f01b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601e908201527f45524332303a20617070726f7665206e6f6e207a65726f20616d6f756e740000604082015260600190565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201526d195b881a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646040820152637265737360e01b606082015260800190565b6020808252601f908201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604082015260600190565b90815260200190565b6001600160a01b03811681146106d357600080fdfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa264697066735822122056b6460ee6a6c7ba813be3b7a7a35de7dcef163068b3843a74ae573e7ec31da364736f6c63430006090033\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Signer, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { FeeRewardPoolL1Fake } from \"../FeeRewardPoolL1Fake\";\n\nexport class FeeRewardPoolL1Fake__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<FeeRewardPoolL1Fake> {\n    return super.deploy(overrides || {}) as Promise<FeeRewardPoolL1Fake>;\n  }\n  getDeployTransaction(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  attach(address: string): FeeRewardPoolL1Fake {\n    return super.attach(address) as FeeRewardPoolL1Fake;\n  }\n  connect(signer: Signer): FeeRewardPoolL1Fake__factory {\n    return super.connect(signer) as FeeRewardPoolL1Fake__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): FeeRewardPoolL1Fake {\n    return new Contract(address, _abi, signerOrProvider) as FeeRewardPoolL1Fake;\n  }\n}\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"RewardTransferred\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"staker\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"RewardWithdrawn\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"DURATION\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"candidate\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_staker\",\n        type: \"address\",\n      },\n    ],\n    name: \"earned\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"feeTokenPoolDispatcher\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"_token\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract StakedPerpToken\",\n        name: \"_stakedPerpToken\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_feeTokenPoolDispatcher\",\n        type: \"address\",\n      },\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"lastTimeRewardApplicable\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"lastUpdateTime\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"mock_getCurrentBlockNumber\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"mock_getCurrentTimestamp\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_number\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"mock_setBlockNumber\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_timestamp\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"mock_setBlockTimestamp\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_stakedPerpTokenAddr\",\n        type: \"address\",\n      },\n    ],\n    name: \"mock_setStakedPerpTokenAddr\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_reward\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"notifyRewardAmount\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_staker\",\n        type: \"address\",\n      },\n    ],\n    name: \"notifyStakeChanged\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"periodFinish\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"rewardPerToken\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"rewardPerTokenStored\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"d\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"rewardRate\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"d\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"rewards\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"d\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"setOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"stakedPerpToken\",\n    outputs: [\n      {\n        internalType: \"contract StakedPerpToken\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"stakedPerpTokenAddr\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"token\",\n    outputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"updateOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"userRewardPerTokenPaid\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"d\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"withdrawReward\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x6080604052635611c2306101395561271161013a5534801561002057600080fd5b50611c71806100306000396000f3fe608060405234801561001057600080fd5b50600436106101c25760003560e01c80639432665a116100f9578063cd8ae3dd11610097578063ebe2b12b11610071578063ebe2b12b1461031c578063f6aa49e714610324578063fc0c546a1461032c578063ff59f86d14610334576101c2565b8063cd8ae3dd146102ee578063df136d6514610301578063e40859dd14610309576101c2565b8063c77f7c61116100d3578063c77f7c61146102ce578063c885bc58146102d6578063c8f33c91146102de578063cd3daf9d146102e6576101c2565b80639432665a146102a0578063bc5920ba146102b3578063c0c53b8b146102bb576101c2565b80635e4629cd116101665780637b0a47ee116101405780637b0a47ee1461027557806380faa57d1461027d5780638b876347146102855780638da5cb5b14610298576101c2565b80635e4629cd1461025d5780636c8381f814610265578063715018a61461026d576101c2565b806309338383116101a2578063093383831461022557806313af40351461022d5780631be05289146102405780634cd7ee9514610248576101c2565b80628cc262146101c7578062c141b6146101f05780630700037d14610205575b600080fd5b6101da6101d536600461164e565b610347565b6040516101e79190611be7565b60405180910390f35b6102036101fe366004611728565b6103d4565b005b61021861021336600461164e565b6103da565b6040516101e79190611bf1565b6102186103ec565b61020361023b36600461164e565b6103fc565b6102186104de565b6102506104e5565b6040516101e79190611774565b6102506104f5565b610250610505565b610203610514565b610218610593565b61021861059a565b61021861029336600461164e565b6105b0565b6102506105c2565b6102036102ae366004611728565b6105d1565b6102036105d7565b6102036102c936600461168a565b61069a565b61021861078e565b610203610798565b610218610886565b6101da61088d565b6102036102fc36600461164e565b610947565b61021861097e565b61020361031736600461164e565b610985565b6102186109a8565b6102506109af565b6102506109bf565b6102036103423660046116d4565b6109cf565b61034f61163b565b6001600160a01b038216600081815260ff60209081526040808320815180840183529054815293835260fe8252918290208251918201909252905481526103ce91906103c2906103ad906103a161088d565b9063ffffffff610b5b16565b6103b686610b87565b9063ffffffff610c2016565b9063ffffffff610c4316565b92915050565b61013a55565b60ff6020526000908152604090205481565b60006103f6610c66565b90505b90565b610404610c6d565b6065546001600160a01b0390811691161461043a5760405162461bcd60e51b815260040161043190611b54565b60405180910390fd5b6001600160a01b0381166104605760405162461bcd60e51b8152600401610431906119ae565b6065546001600160a01b038281169116141561048e5760405162461bcd60e51b815260040161043190611ba1565b6066546001600160a01b03828116911614156104bc5760405162461bcd60e51b815260040161043190611842565b606680546001600160a01b0319166001600160a01b0392909216919091179055565b6201518081565b610105546001600160a01b031681565b61013b546001600160a01b031681565b6066546001600160a01b031690565b61051c610c6d565b6065546001600160a01b039081169116146105495760405162461bcd60e51b815260040161043190611b54565b6065546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3606580546001600160a01b0319169055565b6101015481565b60006103f66105a7610c71565b61010354610c78565b60fe6020526000908152604090205481565b6065546001600160a01b031690565b61013955565b6066546001600160a01b03166105ff5760405162461bcd60e51b815260040161043190611b05565b610607610c6d565b6066546001600160a01b039081169116146106345760405162461bcd60e51b8152600401610431906118ae565b6066546065546040516001600160a01b0392831692909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360668054606580546001600160a01b03199081166001600160a01b03841617909155169055565b600054610100900460ff16806106b357506106b3610c90565b806106c1575060005460ff16155b6106dd5760405162461bcd60e51b8152600401610431906119f0565b600054610100900460ff16158015610708576000805460ff1961ff0019909116610100171660011790555b6001600160a01b03831661072e5760405162461bcd60e51b815260040161043190611a3e565b610736610c96565b61010580546001600160a01b038086166001600160a01b03199283161790925561010480548584169083161790556101068054928716929091169190911790558015610788576000805461ff00191690555b50505050565b60006103f6610c71565b60006107a2610c6d565b90506107ad81610d28565b6107b561163b565b506001600160a01b038116600090815260ff602090815260408083208151928301909152548152906107e682610d87565b116108035760405162461bcd60e51b815260040161043190611889565b61080b610d8b565b6001600160a01b03808416600090815260ff6020526040902091519091556101065461083991168383610da6565b816001600160a01b03167f1d3eee4ca001cff39eec6ec7615aacf2f2bd61791273830728ba00ccbd6e133761086d83610d87565b60405161087a9190611bf1565b60405180910390a25050565b6101025481565b61089561163b565b61089d61163b565b6108a5610ed5565b90506108b081610d87565b6108cc57505060408051602081019091526101005481526103f9565b60006108e9610102546108dd61059a565b9063ffffffff610f7616565b604080516020810190915261010154815290915061094090610923908390610917908663ffffffff610fb816565b9063ffffffff610fdb16565b60408051602081019091526101005481529063ffffffff610c4316565b9250505090565b61013b546001600160a01b031633146109725760405162461bcd60e51b815260040161043190611a65565b61097b81610d28565b50565b6101005481565b61013b80546001600160a01b0319166001600160a01b0392909216919091179055565b6101035481565b610104546001600160a01b031681565b610106546001600160a01b031681565b610104546001600160a01b03166109e4610c6d565b6001600160a01b031614610a0a5760405162461bcd60e51b815260040161043190611936565b6000610a23610a1e368490038401846116eb565b610d87565b11610a405760405162461bcd60e51b815260040161043190611a9c565b610a4a6000610d28565b6000610a54610c71565b9050610103548110610a8c57610a8262015180610a76368590038501856116eb565b9063ffffffff610ffd16565b5161010155610af2565b61010354600090610aa3908363ffffffff610f7616565b9050610aad61163b565b6040805160208101909152610101548152610ace908363ffffffff610fdb16565b9050610aea62015180610a76836103c2368990038901896116eb565b516101015550505b610102819055610b0b816201518063ffffffff61101f16565b610103557fe7b1adc654f4988d82260a00603bcc1f508dc3aa94b2b9cd5bc9ab42cfc591dc610b42610a1e368590038501856116eb565b604051610b4f9190611bf1565b60405180910390a15050565b610b6361163b565b610b6b61163b565b82518451610b7e9163ffffffff610f7616565b81529392505050565b610b8f61163b565b604080516020810191829052610105546370a0823160e01b9092529081906001600160a01b03166370a08231610bc88660248501611774565b60206040518083038186803b158015610be057600080fd5b505afa158015610bf4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c189190611740565b905292915050565b610c2861163b565b610c3061163b565b82518451610b7e9163ffffffff61104416565b610c4b61163b565b610c5361163b565b82518451610b7e9163ffffffff61101f16565b61013a5490565b3390565b6101395490565b6000818310610c875781610c89565b825b9392505050565b303b1590565b600054610100900460ff1680610caf5750610caf610c90565b80610cbd575060005460ff16155b610cd95760405162461bcd60e51b8152600401610431906119f0565b600054610100900460ff16158015610d04576000805460ff1961ff0019909116610100171660011790555b610d0c611052565b610d146110d3565b801561097b576000805461ff001916905550565b610d3061088d565b5161010055610d3d61059a565b610102556001600160a01b0381161561097b57610d5981610347565b6001600160a01b038216600090815260ff60209081526040808320935190935560fe90522061010054905550565b5190565b610d9361163b565b5060408051602081019091526000815290565b610daf836111ad565b610db761163b565b610dc184846111fa565b90506000610dcf8584611287565b905060006060866001600160a01b031663a9059cbb60e01b8785604051602401610dfa929190611788565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051610e389190611758565b6000604051808303816000865af19150503d8060008114610e75576040519150601f19603f3d011682016040523d82523d6000602084013e610e7a565b606091505b5091509150818015610ea4575080511580610ea4575080806020019051810190610ea4919061166a565b610ec05760405162461bcd60e51b8152600401610431906117d4565b610ecc87878587611305565b50505050505050565b610edd61163b565b604051806020016040528061010560009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f3757600080fd5b505afa158015610f4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6f9190611740565b9052905090565b6000610c8983836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611358565b610fc061163b565b610fc861163b565b82518451610b7e9163ffffffff61138416565b610fe361163b565b610feb61163b565b8351610b7e908463ffffffff61139216565b61100561163b565b61100d61163b565b8351610b7e908463ffffffff6113cc16565b600082820183811015610c895760405162461bcd60e51b81526004016104319061180b565b6000610c898383601261140e565b600054610100900460ff168061106b575061106b610c90565b80611079575060005460ff16155b6110955760405162461bcd60e51b8152600401610431906119f0565b600054610100900460ff16158015610d14576000805460ff1961ff001990911661010017166001179055801561097b576000805461ff001916905550565b600054610100900460ff16806110ec57506110ec610c90565b806110fa575060005460ff16155b6111165760405162461bcd60e51b8152600401610431906119f0565b600054610100900460ff16158015611141576000805460ff1961ff0019909116610100171660011790555b600061114b610c6d565b606580546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350801561097b576000805461ff001916905550565b60006111b88261142c565b6001600160a01b038316600090815260cb602052604090205490915081146111f6576001600160a01b038216600090815260cb602052604090208190555b5050565b61120261163b565b610c8983846001600160a01b03166370a08231856040518263ffffffff1660e01b81526004016112329190611774565b60206040518083038186803b15801561124a57600080fd5b505afa15801561125e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112829190611740565b611519565b6000806112938461142c565b9050601281106112d1576112c96112b182601263ffffffff610f7616565b600a0a6112bd85610d87565b9063ffffffff61139216565b9150506103ce565b6112fd6112e560128363ffffffff610f7616565b600a0a6112f185610d87565b9063ffffffff6113cc16565b949350505050565b6113386113226113158685611519565b839063ffffffff610c4316565b61132c86866111fa565b9063ffffffff6115ab16565b60000b156107885760405162461bcd60e51b815260040161043190611ac3565b6000818484111561137c5760405162461bcd60e51b815260040161043191906117a1565b505050900390565b6000610c89838360126115dc565b6000826113a1575060006103ce565b828202828482816113ae57fe5b0414610c895760405162461bcd60e51b81526004016104319061196d565b6000610c8983836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506115fb565b60006112fd61141c83611632565b6112f1868663ffffffff61139216565b6001600160a01b038116600090815260cb6020526040812054806103ce5760408051600481526024810182526020810180516001600160e01b031663313ce56760e01b17905290516000916060916001600160a01b0387169161148e91611758565b600060405180830381855afa9150503d80600081146114c9576040519150601f19603f3d011682016040523d82523d6000602084013e6114ce565b606091505b50915091508180156114e05750805115155b6114fc5760405162461bcd60e51b8152600401610431906118f5565b808060200190518101906115109190611740565b95945050505050565b61152161163b565b600061152c8461142c565b9050601281106115715760408051602081019091528061156661155684601263ffffffff610f7616565b8690600a0a63ffffffff6113cc16565b8152509150506103ce565b6040805160208101909152806115a161159160128563ffffffff610f7616565b8690600a0a63ffffffff61139216565b9052949350505050565b8051825160009110156115c0575060016103ce565b8151835110156115d357506000196103ce565b50600092915050565b60006112fd836112f16115ee85611632565b879063ffffffff61139216565b6000818361161c5760405162461bcd60e51b815260040161043191906117a1565b50600083858161162857fe5b0495945050505050565b60ff16600a0a90565b6040518060200160405280600081525090565b60006020828403121561165f578081fd5b8135610c8981611c26565b60006020828403121561167b578081fd5b81518015158114610c89578182fd5b60008060006060848603121561169e578182fd5b83356116a981611c26565b925060208401356116b981611c26565b915060408401356116c981611c26565b809150509250925092565b6000602082840312156116e5578081fd5b50919050565b6000602082840312156116fc578081fd5b6040516020810181811067ffffffffffffffff8211171561171b578283fd5b6040529135825250919050565b600060208284031215611739578081fd5b5035919050565b600060208284031215611751578081fd5b5051919050565b6000825161176a818460208701611bfa565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b60006020825282518060208401526117c0816040850160208701611bfa565b601f01601f19169190910160400192915050565b6020808252601d908201527f446563696d616c45524332303a207472616e73666572206661696c6564000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526027908201527f5065727046694f776e61626c65557067726164653a2073616d652061732063616040820152666e64696461746560c81b606082015260800190565b6020808252600b908201526a072657761726420697320360ac1b604082015260600190565b60208082526027908201527f5065727046694f776e61626c65557067726164653a206e6f7420746865206e656040820152663b9037bbb732b960c91b606082015260800190565b60208082526021908201527f446563696d616c45524332303a2067657420646563696d616c73206661696c656040820152601960fa1b606082015260800190565b6020808252601b908201527f6f6e6c7920666565546f6b656e506f6f6c446973706174636865720000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b60208082526022908201527f5065727046694f776e61626c65557067726164653a207a65726f206164647265604082015261737360f01b606082015260800190565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201526d195b881a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252600d908201526c125b9d985b1a59081a5b9c1d5d609a1b604082015260600190565b6020808252601d908201527f6f6e6c7920466565546f6b656e506f6f6c446973706174636865724c31000000604082015260600190565b6020808252600d908201526c1a5b9d985b1a59081a5b9c1d5d609a1b604082015260600190565b60208082526022908201527f446563696d616c45524332303a2062616c616e636520696e636f6e73697374656040820152611b9d60f21b606082015260800190565b6020808252602f908201527f5065727046694f776e61626c65557067726164653a2063616e6469646174652060408201526e6973207a65726f206164647265737360881b606082015260800190565b6020808252602d908201527f5065727046694f776e61626c65557067726164653a2063616c6c65722069732060408201526c3737ba103a34329037bbb732b960991b606082015260800190565b60208082526026908201527f5065727046694f776e61626c65557067726164653a2073616d65206173206f726040820152651a59da5b985b60d21b606082015260800190565b9051815260200190565b90815260200190565b60005b83811015611c15578181015183820152602001611bfd565b838111156107885750506000910152565b6001600160a01b038116811461097b57600080fdfea2646970667358221220f08e537fa57b356d52b747d568e61f48a814fc07fbc7c1e1bd60f1067255e00264736f6c63430006090033\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Signer, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { InflationMonitorFake } from \"../InflationMonitorFake\";\n\nexport class InflationMonitorFake__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<InflationMonitorFake> {\n    return super.deploy(overrides || {}) as Promise<InflationMonitorFake>;\n  }\n  getDeployTransaction(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  attach(address: string): InflationMonitorFake {\n    return super.attach(address) as InflationMonitorFake;\n  }\n  connect(signer: Signer): InflationMonitorFake__factory {\n    return super.connect(signer) as InflationMonitorFake__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): InflationMonitorFake {\n    return new Contract(\n      address,\n      _abi,\n      signerOrProvider\n    ) as InflationMonitorFake;\n  }\n}\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"MINT_THRESHOLD_PERIOD\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_amount\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"appendMintedTokenHistory\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"candidate\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IMinter\",\n        name: \"_minter\",\n        type: \"address\",\n      },\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"isOverMintThreshold\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"mintedAmountDuringMintThresholdPeriod\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"mock_getCurrentTimestamp\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_number\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"mock_setBlockNumber\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_timestamp\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"mock_setBlockTimestamp\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"setOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_shutdownThreshold\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"setShutdownThreshold\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"shutdownThreshold\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"d\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"updateOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x6080604052635611c230610133556127116101345534801561002057600080fd5b50611434806100306000396000f3fe608060405234801561001057600080fd5b50600436106100f45760003560e01c8063715018a611610097578063bc5920ba11610066578063bc5920ba146101c7578063c4d66de8146101cf578063c77f7c61146101e2578063cb821fbd146101ea576100f4565b8063715018a6146101915780638da5cb5b146101995780639432665a146101a1578063af5ff5ba146101b4576100f4565b80632f4d6fa6116100d35780632f4d6fa6146101345780633fe204d91461015257806356eb0393146101675780636c8381f81461017c576100f4565b8062c141b6146100f957806313af40351461010e578063213c4c7b14610121575b600080fd5b61010c61010736600461102e565b6101f2565b005b61010c61011c366004610fa2565b6101f8565b61010c61012f366004610fda565b6102da565b61013c6103d7565b60405161014991906113b0565b60405180910390f35b61015a6103dd565b604051610149919061108e565b61016f6104e6565b60405161014991906113a6565b610184610672565b604051610149919061107a565b61010c610681565b610184610700565b61010c6101af36600461102e565b61070f565b61010c6101c2366004610ff1565b610715565b61010c610750565b61010c6101dd366004610fa2565b610813565b61013c6108d8565b61013c6108e7565b61013455565b6102006108ee565b6065546001600160a01b039081169116146102365760405162461bcd60e51b815260040161022d90611313565b60405180910390fd5b6001600160a01b03811661025c5760405162461bcd60e51b815260040161022d90611234565b6065546001600160a01b038281169116141561028a5760405162461bcd60e51b815260040161022d90611360565b6066546001600160a01b03828116911614156102b85760405162461bcd60e51b815260040161022d90611124565b606680546001600160a01b0319166001600160a01b0392909216919091179055565b610100546001600160a01b03166102ef6108ee565b6001600160a01b0316146103155760405162461bcd60e51b815260040161022d906110cc565b61031d610f8f565b60fe548061033b5761033436849003840184610ff1565b915061038c565b61038961034d36859003850185610ff1565b60fe600184038154811061035d57fe5b60009182526020918290206040805193840190526001600290920201015481529063ffffffff6108f216565b91505b60fe60405180604001604052806103a1610920565b81526020908101949094528154600181810184556000938452928590208251600290920201908155930151519201919091555050565b60ff5481565b604080516020810190915260ff5481526000906103f990610927565b610405575060006104e3565b61040d610f8f565b610100546040805163eb7c8c2560e01b81529051610491926001600160a01b03169163eb7c8c25916004808301926020929190829003018186803b15801561045457600080fd5b505afa158015610468573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048c9190610fbe565b61092b565b905061049b610f8f565b6104a36104e6565b604080516020810190915260ff5481529091506000906104d9906104cd848663ffffffff6109ad16565b9063ffffffff6109d016565b60000b1215925050505b90565b6104ee610f8f565b60fe5480610506576104fe610a01565b9150506104e3565b600061054160fe600184038154811061051b57fe5b906000526020600020906002020160000154610535610920565b9063ffffffff610a1c16565b905062093a8081111561055f57610556610a01565b925050506104e3565b610567610f8f565b60001983015b801561066a5761057b610f8f565b6105e860fe600184038154811061058e57fe5b600091825260209182902060408051938401905260016002909202010154815260fe8054859081106105bc57fe5b60009182526020918290206040805193840190526001600290920201015481529063ffffffff610a6516565b90506105fa838263ffffffff6108f216565b925061064b60fe600184038154811061060f57fe5b90600052602060002090600202016000015460fe848154811061062e57fe5b60009182526020909120600290910201549063ffffffff610a1c16565b8401935062093a80841115610660575061066a565b506000190161056d565b509250505090565b6066546001600160a01b031690565b6106896108ee565b6065546001600160a01b039081169116146106b65760405162461bcd60e51b815260040161022d90611313565b6065546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3606580546001600160a01b0319169055565b6065546001600160a01b031690565b61013355565b61071d6108ee565b6065546001600160a01b0390811691161461074a5760405162461bcd60e51b815260040161022d90611313565b5160ff55565b6066546001600160a01b03166107785760405162461bcd60e51b815260040161022d906112c4565b6107806108ee565b6066546001600160a01b039081169116146107ad5760405162461bcd60e51b815260040161022d9061116b565b6066546065546040516001600160a01b0392831692909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360668054606580546001600160a01b03199081166001600160a01b03841617909155169055565b600054610100900460ff168061082c575061082c610a88565b8061083a575060005460ff16155b6108565760405162461bcd60e51b815260040161022d90611276565b600054610100900460ff16158015610881576000805460ff1961ff0019909116610100171660011790555b610889610a8e565b61010080546001600160a01b0319166001600160a01b0384161790556108be600a6108b2610b21565b9063ffffffff610b4516565b5160ff5580156108d4576000805461ff00191690555b5050565b60006108e2610920565b905090565b62093a8081565b3390565b6108fa610f8f565b610902610f8f565b825184516109159163ffffffff610b6716565b815290505b92915050565b6101335490565b5190565b610933610f8f565b61091a82836001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561097057600080fd5b505afa158015610984573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a89190611046565b610b8c565b6109b5610f8f565b6109bd610f8f565b825184516109159163ffffffff610c1e16565b8051825160009110156109e55750600161091a565b8151835110156109f8575060001961091a565b50600092915050565b610a09610f8f565b5060408051602081019091526000815290565b6000610a5e83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610c2c565b9392505050565b610a6d610f8f565b610a75610f8f565b825184516109159163ffffffff610a1c16565b303b1590565b600054610100900460ff1680610aa75750610aa7610a88565b80610ab5575060005460ff16155b610ad15760405162461bcd60e51b815260040161022d90611276565b600054610100900460ff16158015610afc576000805460ff1961ff0019909116610100171660011790555b610b04610c58565b610b0c610cd9565b8015610b1e576000805461ff00191690555b50565b610b29610f8f565b6040518060200160405280610b3e6012610db3565b9052905090565b610b4d610f8f565b610b55610f8f565b8351610915908463ffffffff610dbc16565b600082820183811015610a5e5760405162461bcd60e51b815260040161022d906110ed565b610b94610f8f565b6000610b9f84610dfe565b905060128110610be457604080516020810190915280610bd9610bc984601263ffffffff610a1c16565b8690600a0a63ffffffff610dbc16565b81525091505061091a565b604080516020810190915280610c14610c0460128563ffffffff610a1c16565b8690600a0a63ffffffff610eeb16565b9052949350505050565b6000610a5e83836012610f25565b60008184841115610c505760405162461bcd60e51b815260040161022d9190611099565b505050900390565b600054610100900460ff1680610c715750610c71610a88565b80610c7f575060005460ff16155b610c9b5760405162461bcd60e51b815260040161022d90611276565b600054610100900460ff16158015610b0c576000805460ff1961ff0019909116610100171660011790558015610b1e576000805461ff001916905550565b600054610100900460ff1680610cf25750610cf2610a88565b80610d00575060005460ff16155b610d1c5760405162461bcd60e51b815260040161022d90611276565b600054610100900460ff16158015610d47576000805460ff1961ff0019909116610100171660011790555b6000610d516108ee565b606580546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015610b1e576000805461ff001916905550565b60ff16600a0a90565b6000610a5e83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250610f58565b6001600160a01b038116600090815260cb60205260408120548061091a5760408051600481526024810182526020810180516001600160e01b031663313ce56760e01b17905290516000916060916001600160a01b03871691610e609161105e565b600060405180830381855afa9150503d8060008114610e9b576040519150601f19603f3d011682016040523d82523d6000602084013e610ea0565b606091505b5091509150818015610eb25750805115155b610ece5760405162461bcd60e51b815260040161022d906111b2565b80806020019051810190610ee29190611046565b95945050505050565b600082610efa5750600061091a565b82820282848281610f0757fe5b0414610a5e5760405162461bcd60e51b815260040161022d906111f3565b6000610f5083610f44610f3785610db3565b879063ffffffff610eeb16565b9063ffffffff610dbc16565b949350505050565b60008183610f795760405162461bcd60e51b815260040161022d9190611099565b506000838581610f8557fe5b0495945050505050565b6040518060200160405280600081525090565b600060208284031215610fb3578081fd5b8135610a5e816113e9565b600060208284031215610fcf578081fd5b8151610a5e816113e9565b600060208284031215610feb578081fd5b50919050565b600060208284031215611002578081fd5b6040516020810181811067ffffffffffffffff82111715611021578283fd5b6040529135825250919050565b60006020828403121561103f578081fd5b5035919050565b600060208284031215611057578081fd5b5051919050565b600082516110708184602087016113b9565b9190910192915050565b6001600160a01b0391909116815260200190565b901515815260200190565b60006020825282518060208401526110b88160408501602087016113b9565b601f01601f19169190910160400192915050565b60208082526007908201526610b6b4b73a32b960c91b604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526027908201527f5065727046694f776e61626c65557067726164653a2073616d652061732063616040820152666e64696461746560c81b606082015260800190565b60208082526027908201527f5065727046694f776e61626c65557067726164653a206e6f7420746865206e656040820152663b9037bbb732b960c91b606082015260800190565b60208082526021908201527f446563696d616c45524332303a2067657420646563696d616c73206661696c656040820152601960fa1b606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b60208082526022908201527f5065727046694f776e61626c65557067726164653a207a65726f206164647265604082015261737360f01b606082015260800190565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201526d195b881a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602f908201527f5065727046694f776e61626c65557067726164653a2063616e6469646174652060408201526e6973207a65726f206164647265737360881b606082015260800190565b6020808252602d908201527f5065727046694f776e61626c65557067726164653a2063616c6c65722069732060408201526c3737ba103a34329037bbb732b960991b606082015260800190565b60208082526026908201527f5065727046694f776e61626c65557067726164653a2073616d65206173206f726040820152651a59da5b985b60d21b606082015260800190565b9051815260200190565b90815260200190565b60005b838110156113d45781810151838201526020016113bc565b838111156113e3576000848401525b50505050565b6001600160a01b0381168114610b1e57600080fdfea2646970667358221220a10216eb5ee2d207673fde60464d4b29a53ffd5c31ce3183484131180f68c58864736f6c63430006090033\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Signer, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { InsuranceFundFake } from \"../InsuranceFundFake\";\n\nexport class InsuranceFundFake__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<InsuranceFundFake> {\n    return super.deploy(overrides || {}) as Promise<InsuranceFundFake>;\n  }\n  getDeployTransaction(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  attach(address: string): InsuranceFundFake {\n    return super.attach(address) as InsuranceFundFake;\n  }\n  connect(signer: Signer): InsuranceFundFake__factory {\n    return super.connect(signer) as InsuranceFundFake__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): InsuranceFundFake {\n    return new Contract(address, _abi, signerOrProvider) as InsuranceFundFake;\n  }\n}\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"blockNumber\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"ShutdownAllAmms\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"tokenAddress\",\n        type: \"address\",\n      },\n    ],\n    name: \"TokenAdded\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"tokenAddress\",\n        type: \"address\",\n      },\n    ],\n    name: \"TokenRemoved\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"withdrawer\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Withdrawn\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IAmm\",\n        name: \"_amm\",\n        type: \"address\",\n      },\n    ],\n    name: \"addAmm\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"candidate\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"exchange\",\n    outputs: [\n      {\n        internalType: \"contract IExchangeWrapper\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getAllAmms\",\n    outputs: [\n      {\n        internalType: \"contract IAmm[]\",\n        name: \"\",\n        type: \"address[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getQuoteTokenLength\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"inflationMonitor\",\n    outputs: [\n      {\n        internalType: \"contract IInflationMonitor\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IAmm\",\n        name: \"_amm\",\n        type: \"address\",\n      },\n    ],\n    name: \"isExistedAmm\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"minter\",\n    outputs: [\n      {\n        internalType: \"contract IMinter\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"mock_getCurrentTimestamp\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_number\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"mock_setBlockNumber\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_timestamp\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"mock_setBlockTimestamp\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"perpToken\",\n    outputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"quoteTokens\",\n    outputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IAmm\",\n        name: \"_amm\",\n        type: \"address\",\n      },\n    ],\n    name: \"removeAmm\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"_token\",\n        type: \"address\",\n      },\n    ],\n    name: \"removeToken\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_beneficiary\",\n        type: \"address\",\n      },\n    ],\n    name: \"setBeneficiary\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IExchangeWrapper\",\n        name: \"_exchange\",\n        type: \"address\",\n      },\n    ],\n    name: \"setExchange\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IInflationMonitor\",\n        name: \"_inflationMonitor\",\n        type: \"address\",\n      },\n    ],\n    name: \"setInflationMonitor\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IMinter\",\n        name: \"_minter\",\n        type: \"address\",\n      },\n    ],\n    name: \"setMinter\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"setOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"shutdownAllAmm\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"_exceptionQuoteToken\",\n        type: \"address\",\n      },\n    ],\n    name: \"testGetOrderedQuoteTokens\",\n    outputs: [\n      {\n        internalType: \"contract IERC20[]\",\n        name: \"orderedTokens\",\n        type: \"address[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"updateOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"_quoteToken\",\n        type: \"address\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_amount\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"withdraw\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x6080604052635611c23061016b5561271161016c5534801561002057600080fd5b50612c51806100306000396000f3fe608060405234801561001057600080fd5b50600436106101a85760003560e01c80639432665a116100f9578063c68ade3711610097578063cf23097911610071578063cf2309791461031d578063d2f7265a14610330578063d926de1c14610338578063fca3b5aa1461034b576101a8565b8063c68ade37146102fa578063c77f7c611461030d578063ca58b19814610315576101a8565b8063b7538c62116100d3578063b7538c62146102b5578063b7d25e22146102ca578063bc5920ba146102dd578063beb0597a146102e5576101a8565b80639432665a146102925780639cadb3a0146102a55780639dd96eb2146102ad576101a8565b80632c9115c7116101665780636c8381f8116101405780636c8381f814610272578063715018a61461027a5780638129fc1c146102825780638da5cb5b1461028a576101a8565b80632c9115c7146102395780635fa7b5841461024c57806367b1f5df1461025f576101a8565b8062c141b6146101ad57806307546172146101c25780630774a784146101e057806313af4035146102005780631c31f71014610213578063252978b814610226575b600080fd5b6101c06101bb3660046125a4565b61035e565b005b6101ca610364565b6040516101d791906125f0565b60405180910390f35b6101f36101ee3660046124c3565b610374565b6040516101d7919061266a565b6101c061020e3660046124c3565b610393565b6101c06102213660046124c3565b610475565b6101c061023436600461251b565b6104cd565b6101ca6102473660046125a4565b610650565b6101c061025a3660046124c3565b610678565b6101c061026d3660046124c3565b61087f565b6101ca6108d7565b6101c06108e7565b6101c0610966565b6101ca6109f9565b6101c06102a03660046125a4565b610a08565b6101ca610a0e565b6101c0610a1e565b6102bd610ba6565b6040516101d7919061261d565b6102bd6102d83660046124c3565b610c09565b6101c0610c1a565b6102ed610cdd565b6040516101d79190612baa565b6101c06103083660046124c3565b610ce4565b6102ed610d3c565b6101ca610d4b565b6101c061032b3660046124c3565b610d5b565b6101ca610ebd565b6101c06103463660046124c3565b610ecd565b6101c06103593660046124c3565b6110a5565b61016c55565b610136546001600160a01b031681565b6001600160a01b03166000908152610130602052604090205460ff1690565b61039b611193565b6065546001600160a01b039081169116146103d15760405162461bcd60e51b81526004016103c890612b0d565b60405180910390fd5b6001600160a01b0381166103f75760405162461bcd60e51b81526004016103c890612961565b6065546001600160a01b03828116911614156104255760405162461bcd60e51b81526004016103c890612b5a565b6066546001600160a01b03828116911614156104535760405162461bcd60e51b81526004016103c8906127cb565b606680546001600160a01b0319166001600160a01b0392909216919091179055565b61047d611193565b6065546001600160a01b039081169116146104aa5760405162461bcd60e51b81526004016103c890612b0d565b61013880546001600160a01b0319166001600160a01b0392909216919091179055565b6104d5611193565b610138546001600160a01b039081169116146105035760405162461bcd60e51b81526004016103c89061275d565b61050c82611197565b6105285760405162461bcd60e51b81526004016103c8906128f0565b6105306124b0565b610539836111b6565b9050610544816111c8565b61055b6105563685900385018561255a565b6111c8565b11156105a1576105696124b0565b6105888261057c3686900386018661255a565b9063ffffffff6111cc16565b905061059484826111f8565b61059d846111b6565b9150505b6105b36105563684900384018461255a565b6105bc826111c8565b10156105da5760405162461bcd60e51b81526004016103c890612ae4565b6105fa836105e6611193565b6105f53686900386018661255a565b611488565b7f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5610623611193565b6106356105563686900386018661255a565b604051610643929190612604565b60405180910390a1505050565b610133818154811061065e57fe5b6000918252602090912001546001600160a01b0316905081565b610680611193565b6065546001600160a01b039081169116146106ad5760405162461bcd60e51b81526004016103c890612b0d565b6106b681611197565b6106d25760405162461bcd60e51b81526004016103c8906126fb565b6001600160a01b038116600090815261013160205260408120805460ff191690556106fb610cdd565b905060005b818110156107e857826001600160a01b0316610133828154811061072057fe5b6000918252602090912001546001600160a01b031614156107e057600182038110156107ad57610133600183038154811061075757fe5b60009182526020909120015461013380546001600160a01b03909216918390811061077e57fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b6101338054806107b957fe5b600082815260209020810160001990810180546001600160a01b03191690550190556107e8565b600101610700565b5060006107f7610556846111b6565b11156108445760006108076115b7565b90506001600160a01b0381166108265750610135546001600160a01b03165b6108418382610834866111b6565b61083c61173c565b611757565b50505b7f4c910b69fe65a61f7531b9c5042b2329ca7179c77290aa7e2eb3afa3c8511fd38260405161087391906125f0565b60405180910390a15050565b610887611193565b6065546001600160a01b039081169116146108b45760405162461bcd60e51b81526004016103c890612b0d565b61013480546001600160a01b0319166001600160a01b0392909216919091179055565b6066546001600160a01b03165b90565b6108ef611193565b6065546001600160a01b0390811691161461091c5760405162461bcd60e51b81526004016103c890612b0d565b6065546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3606580546001600160a01b0319169055565b600054610100900460ff168061097f575061097f611856565b8061098d575060005460ff16155b6109a95760405162461bcd60e51b81526004016103c8906129a3565b600054610100900460ff161580156109d4576000805460ff1961ff0019909116610100171660011790555b6109dc61185c565b6109e46118da565b80156109f6576000805461ff00191690555b50565b6065546001600160a01b031690565b61016b55565b610135546001600160a01b031681565b610a26611193565b6065546001600160a01b03908116911614610a535760405162461bcd60e51b81526004016103c890612b0d565b61013760009054906101000a90046001600160a01b03166001600160a01b0316633fe204d96040518163ffffffff1660e01b815260040160206040518083038186803b158015610aa257600080fd5b505afa158015610ab6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ada91906124df565b610ae357610ba4565b60005b61013254811015610b6b576101328181548110610aff57fe5b60009182526020822001546040805163fc0e74d160e01b815290516001600160a01b039092169263fc0e74d19260048084019382900301818387803b158015610b4757600080fd5b505af1158015610b5b573d6000803e3d6000fd5b505060019092019150610ae69050565b507ffc9f9c6cbb93f675af09b9bb43859333114dfa5e4c5abd35297e153f2434810143604051610b9b9190612baa565b60405180910390a15b565b6060610132805480602002602001604051908101604052809291908181526020018280548015610bff57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610be1575b5050505050905090565b6060610c1482611950565b92915050565b6066546001600160a01b0316610c425760405162461bcd60e51b81526004016103c890612a95565b610c4a611193565b6066546001600160a01b03908116911614610c775760405162461bcd60e51b81526004016103c890612812565b6066546065546040516001600160a01b0392831692909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360668054606580546001600160a01b03199081166001600160a01b03841617909155169055565b6101335490565b610cec611193565b6065546001600160a01b03908116911614610d195760405162461bcd60e51b81526004016103c890612b0d565b61013780546001600160a01b0319166001600160a01b0392909216919091179055565b6000610d46611cdb565b905090565b610137546001600160a01b031681565b610d63611193565b6065546001600160a01b03908116911614610d905760405162461bcd60e51b81526004016103c890612b0d565b610d9981610374565b610db55760405162461bcd60e51b81526004016103c89061289a565b6001600160a01b038116600090815261013060205260408120805460ff1916905561013254905b81811015610eb857826001600160a01b03166101328281548110610dfc57fe5b6000918252602090912001546001600160a01b03161415610eb0576101326001830381548110610e2857fe5b60009182526020909120015461013280546001600160a01b039092169183908110610e4f57fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550610132805480610e8957fe5b600082815260209020810160001990810180546001600160a01b0319169055019055610eb8565b600101610ddc565b505050565b610134546001600160a01b031681565b610ed5611193565b6065546001600160a01b03908116911614610f025760405162461bcd60e51b81526004016103c890612b0d565b610f0b81610374565b15610f285760405162461bcd60e51b81526004016103c8906129f1565b6001600160a01b038116600081815261013060209081526040808320805460ff191660019081179091556101328054918201815584527fc53bdfd4aa1ab65dfdaf681ca6bda958ae4a123d4ed68c4277796592280e78350180546001600160a01b03191685179055805163fdf262b760e01b8152905192939263fdf262b792600480840193919291829003018186803b158015610fc457600080fd5b505afa158015610fd8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ffc91906124ff565b905061100781611197565b6110a157610133805460018082019092557f92e985329fb94cc1b424ebb0f7f2929b6d27383ca94c0ec71c44fb48bdf96d2c0180546001600160a01b0319166001600160a01b0384169081179091556000908152610131602052604090819020805460ff1916909217909155517f784c8f4dbf0ffedd6e72c76501c545a70f8b203b30a26ce542bf92ba87c248a4906108739083906125f0565b5050565b6110ad611193565b6065546001600160a01b039081169116146110da5760405162461bcd60e51b81526004016103c890612b0d565b61013680546001600160a01b0319166001600160a01b0383811691909117918290556040805163eb7c8c2560e01b81529051929091169163eb7c8c2591600480820192602092909190829003018186803b15801561113757600080fd5b505afa15801561114b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116f91906124ff565b61013580546001600160a01b0319166001600160a01b039290921691909117905550565b3390565b6001600160a01b03166000908152610131602052604090205460ff1690565b6111be6124b0565b610c148230611ce2565b5190565b6111d46124b0565b6111dc6124b0565b825184516111ef9163ffffffff611d7616565b81529392505050565b606061120383611950565b905060005b815181101561135d576112196124b0565b6112216124b0565b6101345484516001600160a01b039091169063c643ea639086908690811061124557fe5b602002602001015188886040518463ffffffff1660e01b815260040161126d93929190612675565b60206040518083038186803b15801561128557600080fd5b505afa158015611299573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112bd919061257f565b90506112de6105568585815181106112d157fe5b60200260200101516111b6565b6112e7826111c8565b116113185761130d8484815181106112fb57fe5b6020026020010151878361083c61173c565b9150505050506110a1565b61133f84848151811061132757fe5b6020026020010151876108348787815181106112d157fe5b9150611351858363ffffffff6111cc16565b94505050600101611208565b506000611369836111c8565b1115610eb8576113776124b0565b610134546101355460405163c643ea6360e01b81526001600160a01b039283169263c643ea63926113b19291169088908890600401612675565b60206040518083038186803b1580156113c957600080fd5b505afa1580156113dd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611401919061257f565b6101365460405163b90ffc4160e01b81529192506001600160a01b03169063b90ffc4190611433908490600401612ba0565b600060405180830381600087803b15801561144d57600080fd5b505af1158015611461573d6000803e3d6000fd5b50506101355461148192506001600160a01b03169050858361083c61173c565b5050505050565b61149183611db8565b6114996124b0565b6114a38484611ce2565b905060006114b18584611e02565b905060006060866001600160a01b031663a9059cbb60e01b87856040516024016114dc929190612604565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161151a91906125d4565b6000604051808303816000865af19150503d8060008114611557576040519150601f19603f3d011682016040523d82523d6000602084013e61155c565b606091505b509150915081801561158657508051158061158657508080602001905181019061158691906124df565b6115a25760405162461bcd60e51b81526004016103c890612726565b6115ae87878587611e78565b50505050505050565b61013354600090806115cd5760009150506108e4565b8060011415611603576101336000815481106115e557fe5b6000918252602090912001546001600160a01b031691506108e49050565b600061013360008154811061161457fe5b6000918252602090912001546001600160a01b03169050806116346124b0565b61163d836111b6565b905060015b84811015611732576000610133828154811061165a57fe5b6000918252602090912001546001600160a01b031690506116796124b0565b610134546001600160a01b031663c1094e5b8388611696826111b6565b6040518463ffffffff1660e01b81526004016116b493929190612675565b60206040518083038186803b1580156116cc57600080fd5b505afa1580156116e0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611704919061257f565b90506000611718828663ffffffff611ed116565b60000b1315611728578194508093505b5050600101611642565b5090935050505090565b6117446124b0565b5060408051602081019091526000815290565b61175f6124b0565b611768836111c8565b61177b5761177461173c565b905061184e565b610134546117949086906001600160a01b031685611f02565b610134546001600160a01b031663e5e75d1e868686866117b261173c565b6040518663ffffffff1660e01b81526004016117d2959493929190612698565b602060405180830381600087803b1580156117ec57600080fd5b505af1158015611800573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611824919061257f565b90506000611831826111c8565b1161184e5760405162461bcd60e51b81526004016103c8906128c3565b949350505050565b303b1590565b600054610100900460ff16806118755750611875611856565b80611883575060005460ff16155b61189f5760405162461bcd60e51b81526004016103c8906129a3565b600054610100900460ff161580156118ca576000805460ff1961ff0019909116610100171660011790555b6118d2611f28565b6109e4611fa9565b600054610100900460ff16806118f357506118f3611856565b80611901575060005460ff16155b61191d5760405162461bcd60e51b81526004016103c8906129a3565b600054610100900460ff16158015611948576000805460ff1961ff0019909116610100171660011790555b6109e4612083565b6060806101338054806020026020016040519081016040528092919081815260200182805480156119aa57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161198c575b50939450600093505050505b6119be610cdd565b811015611c0457600061013382815481106119d557fe5b6000918252602090912001546001600160a01b031690506119f46124b0565b61013454610135546001600160a01b039182169163c1094e5b91859116611a1a826111b6565b6040518463ffffffff1660e01b8152600401611a3893929190612675565b60206040518083038186803b158015611a5057600080fd5b505afa158015611a64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a88919061257f565b9050825b8015611bf957611a9a6124b0565b6101345486516001600160a01b039091169063c1094e5b9088906000198601908110611ac257fe5b602002602001015161013560009054906101000a90046001600160a01b0316611af38a60018803815181106112d157fe5b6040518463ffffffff1660e01b8152600401611b1193929190612675565b60206040518083038186803b158015611b2957600080fd5b505afa158015611b3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b61919061257f565b9050611b6c816111c8565b611b75846111c8565b1115611bef57856001830381518110611b8a57fe5b6020026020010151868381518110611b9e57fe5b60200260200101906001600160a01b031690816001600160a01b03168152505083866001840381518110611bce57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b5060001901611a8c565b5050506001016119b6565b50600181510367ffffffffffffffff81118015611c2057600080fd5b50604051908082528060200260200182016040528015611c4a578160200160208202803683370190505b5091506000805b8251811015611cd357846001600160a01b0316838281518110611c7057fe5b60200260200101516001600160a01b03161415611c8c57611ccb565b828181518110611c9857fe5b6020026020010151848381518110611cac57fe5b6001600160a01b03909216602092830291909101909101526001909101905b600101611c51565b505050919050565b61016b5490565b611cea6124b0565b611d6f83846001600160a01b03166370a08231856040518263ffffffff1660e01b8152600401611d1a91906125f0565b60206040518083038186803b158015611d3257600080fd5b505afa158015611d46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d6a91906125bc565b612112565b9392505050565b6000611d6f83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506121a4565b6000611dc3826121d0565b6001600160a01b038316600090815260fd602052604090205490915081146110a1576001600160a01b0391909116600090815260fd6020526040902055565b600080611e0e846121d0565b905060128110611e4c57611e44611e2c82601263ffffffff611d7616565b600a0a611e38856111c8565b9063ffffffff6122bd16565b915050610c14565b61184e611e6060128363ffffffff611d7616565b600a0a611e6c856111c8565b9063ffffffff6122f716565b611eab611e95611e888685612112565b839063ffffffff61233916565b611e9f8686611ce2565b9063ffffffff611ed116565b60000b15611ecb5760405162461bcd60e51b81526004016103c890612a53565b50505050565b805182516000911015611ee657506001610c14565b815183511015611ef95750600019610c14565b50600092915050565b611f0b83611db8565b611f1d8383611f1861173c565b61235c565b610eb883838361235c565b600054610100900460ff1680611f415750611f41611856565b80611f4f575060005460ff16155b611f6b5760405162461bcd60e51b81526004016103c8906129a3565b600054610100900460ff161580156109e4576000805460ff1961ff00199091166101001716600117905580156109f6576000805461ff001916905550565b600054610100900460ff1680611fc25750611fc2611856565b80611fd0575060005460ff16155b611fec5760405162461bcd60e51b81526004016103c8906129a3565b600054610100900460ff16158015612017576000805460ff1961ff0019909116610100171660011790555b6000612021611193565b606580546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35080156109f6576000805461ff001916905550565b600054610100900460ff168061209c575061209c611856565b806120aa575060005460ff16155b6120c65760405162461bcd60e51b81526004016103c8906129a3565b600054610100900460ff161580156120f1576000805460ff1961ff0019909116610100171660011790555b60cb805460ff1916600117905580156109f6576000805461ff001916905550565b61211a6124b0565b6000612125846121d0565b90506012811061216a5760408051602081019091528061215f61214f84601263ffffffff611d7616565b8690600a0a63ffffffff6122f716565b815250915050610c14565b60408051602081019091528061219a61218a60128563ffffffff611d7616565b8690600a0a63ffffffff6122bd16565b9052949350505050565b600081848411156121c85760405162461bcd60e51b81526004016103c891906126c8565b505050900390565b6001600160a01b038116600090815260fd602052604081205480610c145760408051600481526024810182526020810180516001600160e01b031663313ce56760e01b17905290516000916060916001600160a01b03871691612232916125d4565b600060405180830381855afa9150503d806000811461226d576040519150601f19603f3d011682016040523d82523d6000602084013e612272565b606091505b50915091508180156122845750805115155b6122a05760405162461bcd60e51b81526004016103c890612859565b808060200190518101906122b491906125bc565b95945050505050565b6000826122cc57506000610c14565b828202828482816122d957fe5b0414611d6f5760405162461bcd60e51b81526004016103c890612920565b6000611d6f83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612454565b6123416124b0565b6123496124b0565b825184516111ef9163ffffffff61248b16565b600060606001600160a01b03851663095ea7b360e01b8561237d8887611e02565b60405160240161238e929190612604565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516123cc91906125d4565b6000604051808303816000865af19150503d8060008114612409576040519150601f19603f3d011682016040523d82523d6000602084013e61240e565b606091505b509150915081801561243857508051158061243857508080602001905181019061243891906124df565b6114815760405162461bcd60e51b81526004016103c890612a1c565b600081836124755760405162461bcd60e51b81526004016103c891906126c8565b50600083858161248157fe5b0495945050505050565b600082820183811015611d6f5760405162461bcd60e51b81526004016103c890612794565b6040518060200160405280600081525090565b6000602082840312156124d4578081fd5b8135611d6f81612c06565b6000602082840312156124f0578081fd5b81518015158114611d6f578182fd5b600060208284031215612510578081fd5b8151611d6f81612c06565b600080828403604081121561252e578182fd5b833561253981612c06565b92506020601f198201121561254c578182fd5b506020830190509250929050565b60006020828403121561256b578081fd5b6125756020612bb3565b9135825250919050565b600060208284031215612590578081fd5b61259a6020612bb3565b9151825250919050565b6000602082840312156125b5578081fd5b5035919050565b6000602082840312156125cd578081fd5b5051919050565b600082516125e6818460208701612bda565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b8181101561265e5783516001600160a01b031683529284019291840191600101612639565b50909695505050505050565b901515815260200190565b6001600160a01b0393841681529190921660208201529051604082015260600190565b6001600160a01b039586168152939094166020840152905160408301525160608201529051608082015260a00190565b60006020825282518060208401526126e7816040850160208701612bda565b601f01601f19169190910160400192915050565b6020808252601190820152701d1bdad95b881b9bdd08195e1a5cdd1959607a1b604082015260600190565b6020808252601d908201527f446563696d616c45524332303a207472616e73666572206661696c6564000000604082015260600190565b60208082526019908201527f63616c6c6572206973206e6f742062656e656669636961727900000000000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526027908201527f5065727046694f776e61626c65557067726164653a2073616d652061732063616040820152666e64696461746560c81b606082015260800190565b60208082526027908201527f5065727046694f776e61626c65557067726164653a206e6f7420746865206e656040820152663b9037bbb732b960c91b606082015260800190565b60208082526021908201527f446563696d616c45524332303a2067657420646563696d616c73206661696c656040820152601960fa1b606082015260800190565b6020808252600f908201526e185b5b481b9bdd08195e1a5cdd1959608a1b604082015260600190565b60208082526013908201527222bc31b430b733b29039bbb0b81032b93937b960691b604082015260600190565b602080825260169082015275105cdcd95d081a5cc81b9bdd081cdd5c1c1bdc9d195960521b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b60208082526022908201527f5065727046694f776e61626c65557067726164653a207a65726f206164647265604082015261737360f01b606082015260800190565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201526d195b881a5b9a5d1a585b1a5e995960921b606082015260800190565b602080825260119082015270185b5b48185b1c9958591e481859191959607a1b604082015260600190565b6020808252601c908201527f446563696d616c45524332303a20617070726f7665206661696c656400000000604082015260600190565b60208082526022908201527f446563696d616c45524332303a2062616c616e636520696e636f6e73697374656040820152611b9d60f21b606082015260800190565b6020808252602f908201527f5065727046694f776e61626c65557067726164653a2063616e6469646174652060408201526e6973207a65726f206164647265737360881b606082015260800190565b6020808252600f908201526e08ceadcc840dcdee840cadcdeeaced608b1b604082015260600190565b6020808252602d908201527f5065727046694f776e61626c65557067726164653a2063616c6c65722069732060408201526c3737ba103a34329037bbb732b960991b606082015260800190565b60208082526026908201527f5065727046694f776e61626c65557067726164653a2073616d65206173206f726040820152651a59da5b985b60d21b606082015260800190565b9051815260200190565b90815260200190565b60405181810167ffffffffffffffff81118282101715612bd257600080fd5b604052919050565b60005b83811015612bf5578181015183820152602001612bdd565b83811115611ecb5750506000910152565b6001600160a01b03811681146109f657600080fdfea2646970667358221220a996cf1eb02d607424c3dd1ccb8ecedb62dfeb8ad26a4d9060b2aeacb7f550dc64736f6c63430006090033\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Signer, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { L2PriceFeedFake } from \"../L2PriceFeedFake\";\n\nexport class L2PriceFeedFake__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<L2PriceFeedFake> {\n    return super.deploy(overrides || {}) as Promise<L2PriceFeedFake>;\n  }\n  getDeployTransaction(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  attach(address: string): L2PriceFeedFake {\n    return super.attach(address) as L2PriceFeedFake;\n  }\n  connect(signer: Signer): L2PriceFeedFake__factory {\n    return super.connect(signer) as L2PriceFeedFake__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): L2PriceFeedFake {\n    return new Contract(address, _abi, signerOrProvider) as L2PriceFeedFake;\n  }\n}\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"bytes32\",\n        name: \"key\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"price\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"timestamp\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"roundId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"PriceFeedDataSet\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_priceFeedKey\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"addAggregator\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"ambBridge\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"candidate\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_priceFeedKey\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"getLatestTimestamp\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_priceFeedKey\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_numOfRoundBack\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getPreviousPrice\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_priceFeedKey\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_numOfRoundBack\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getPreviousTimestamp\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_priceFeedKey\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"getPrice\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_priceFeedKey\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"getPriceFeedLength\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"length\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_priceFeedKey\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_interval\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getTwapPrice\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_ambBridge\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_rootBridge\",\n        type: \"address\",\n      },\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address payable\",\n        name: \"_addr\",\n        type: \"address\",\n      },\n    ],\n    name: \"mockSetMsgSender\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"mock_getCurrentTimestamp\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_number\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"mock_setBlockNumber\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_timestamp\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"mock_setBlockTimestamp\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"msgSender\",\n    outputs: [\n      {\n        internalType: \"address payable\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"priceFeedKeys\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"priceFeedMap\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"registered\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_priceFeedKey\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"removeAggregator\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"rootBridge\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_priceFeedKey\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_price\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_timestamp\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_roundId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"setLatestData\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"setOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_rootBridge\",\n        type: \"address\",\n      },\n    ],\n    name: \"setRootBridge\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"updateOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x6080604052635611c230610101556127116101025534801561002057600080fd5b50611b4a806100306000396000f3fe608060405234801561001057600080fd5b50600436106101725760003560e01c8063715018a6116100de5780639432665a11610097578063bc5920ba11610071578063bc5920ba14610418578063c77f7c6114610420578063cdea7c7014610428578063d737d0c71461043057610172565b80639432665a146103b2578063a2173df4146103cf578063a7596ff8146103f257610172565b8063715018a61461031f578063744aca14146103275780637ad2263214610344578063899d6e07146103615780638da5cb5b14610387578063914b14c51461038f57610172565b80632bed9e0c116101305780632bed9e0c1461026f57806331d98b3f1461028c578063485cc955146102a957806359bb180e146102d757806359d684cf146102fa5780636c8381f81461031757610172565b8062c141b614610177578063031d64bd146101965780630ba54df6146101c557806313af4035146101e9578063250742cc1461020f5780632a0ab1dd14610240575b600080fd5b6101946004803603602081101561018d57600080fd5b5035610438565b005b610194600480360360808110156101ac57600080fd5b508035906020810135906040810135906060013561043e565b6101cd61066e565b604080516001600160a01b039092168252519081900360200190f35b610194600480360360208110156101ff57600080fd5b50356001600160a01b031661067d565b61022c6004803603602081101561022557600080fd5b50356107d2565b604080519115158252519081900360200190f35b61025d6004803603602081101561025657600080fd5b50356107e7565b60408051918252519081900360200190f35b6101946004803603602081101561028557600080fd5b5035610805565b61025d600480360360208110156102a257600080fd5b503561091e565b610194600480360360408110156102bf57600080fd5b506001600160a01b03813581169160200135166109fa565b61025d600480360360408110156102ed57600080fd5b5080359060200135610ad5565b6101946004803603602081101561031057600080fd5b5035610bc4565b6101cd610c70565b610194610c80565b61025d6004803603602081101561033d57600080fd5b5035610d1e565b61025d6004803603602081101561035a57600080fd5b5035610d33565b6101946004803603602081101561037757600080fd5b50356001600160a01b0316610dd8565b6101cd610dfb565b61025d600480360360408110156103a557600080fd5b5080359060200135610e0a565b610194600480360360208110156103c857600080fd5b5035610ef8565b61025d600480360360408110156103e557600080fd5b5080359060200135610efe565b6101946004803603602081101561040857600080fd5b50356001600160a01b0316611204565b6101946112c5565b61025d6113c6565b6101cd6113d5565b6101cd6113e4565b61010255565b60cb546001600160a01b03166104526113f4565b6001600160a01b03161461049a576040805162461bcd60e51b815260206004820152600a60248201526921616d6242726964676560b01b604482015290519081900360640190fd5b60cc5460cb546040805163d67bdd2560e01b815290516001600160a01b03938416939092169163d67bdd2591600480820192602092909190829003018186803b1580156104e657600080fd5b505afa1580156104fa573d6000803e3d6000fd5b505050506040513d602081101561051057600080fd5b50516001600160a01b031614610565576040805162461bcd60e51b815260206004820152601560248201527473656e646572206e6f7420526f6f7442726964676560581b604482015290519081900360640190fd5b610570846001611420565b61057984610d33565b82116105c2576040805162461bcd60e51b81526020600482015260136024820152720696e636f72726563742074696d657374616d7606c1b604482015290519081900360640190fd5b6105ca61196b565b506040805160608082018352838252602080830187815283850187815260008a815260cd8452868120600190810180548083018255908352918590208751600390930201918255925192810192909255516002909101558351888152908101879052808401869052908101849052915190917fb3b3d4e42c62d694318e0149f90ed0f2e7be9757332da15fd55ae5a01d41722c919081900360800190a15050505050565b60cb546001600160a01b031681565b6106856113f4565b6065546001600160a01b039081169116146106d15760405162461bcd60e51b815260040180806020018281038252602d815260200180611ac2602d913960400191505060405180910390fd5b6001600160a01b0381166107165760405162461bcd60e51b8152600401808060200182810382526022815260200180611a436022913960400191505060405180910390fd5b6065546001600160a01b03828116911614156107635760405162461bcd60e51b8152600401808060200182810382526026815260200180611aef6026913960400191505060405180910390fd5b6066546001600160a01b03828116911614156107b05760405162461bcd60e51b81526004018080602001828103825260278152602001806119d46027913960400191505060405180910390fd5b606680546001600160a01b0319166001600160a01b0392909216919091179055565b60cd6020526000908152604090205460ff1681565b60ce81815481106107f457fe5b600091825260209091200154905081565b61080d6113f4565b6065546001600160a01b039081169116146108595760405162461bcd60e51b815260040180806020018281038252602d815260200180611ac2602d913960400191505060405180910390fd5b610864816001611420565b600081815260cd60205260408120805460ff1916815590610888600183018261198c565b505060ce5460005b81811015610919578260ce82815481106108a657fe5b906000526020600020015414156109115760ce60018303815481106108c757fe5b906000526020600020015460ce82815481106108df57fe5b60009182526020909120015560ce8054806108f657fe5b60019003818190600052602060002001600090559055610919565b600101610890565b505050565b6000610929826114c4565b61096c576040805162461bcd60e51b815260206004820152600f60248201526e1ad95e481b9bdd08195e1a5cdd1959608a1b604482015290519081900360640190fd5b600061097783610d1e565b9050600081116109be576040805162461bcd60e51b815260206004820152600d60248201526c6e6f207072696365206461746160981b604482015290519081900360640190fd5b600083815260cd60205260409020600101805460001983019081106109df57fe5b9060005260206000209060030201600101549150505b919050565b600054610100900460ff1680610a135750610a136114d9565b80610a21575060005460ff16155b610a5c5760405162461bcd60e51b815260040180806020018281038252602e815260200180611a65602e913960400191505060405180910390fd5b600054610100900460ff16158015610a87576000805460ff1961ff0019909116610100171660011790555b610a8f6114df565b60cb80546001600160a01b038086166001600160a01b03199283161790925560cc8054928516929091169190911790558015610919576000805461ff0019169055505050565b6000610ae0836114c4565b610b23576040805162461bcd60e51b815260206004820152600f60248201526e1ad95e481b9bdd08195e1a5cdd1959608a1b604482015290519081900360640190fd5b6000610b2e84610d1e565b9050600081118015610b3f57508083105b610b85576040805162461bcd60e51b81526020600482015260126024820152714e6f7420656e6f75676820686973746f727960701b604482015290519081900360640190fd5b600084815260cd60205260409020600101805460001985840301908110610ba857fe5b9060005260206000209060030201600201549150505b92915050565b610bcc6113f4565b6065546001600160a01b03908116911614610c185760405162461bcd60e51b815260040180806020018281038252602d815260200180611ac2602d913960400191505060405180910390fd5b610c23816000611420565b600081815260cd60205260408120805460ff1916600190811790915560ce805491820181559091527fd36cd1c74ef8d7326d8021b776c18fb5a5724b7f7bc93c2f42e43e10ef27d12a0155565b6066546001600160a01b03165b90565b610c886113f4565b6065546001600160a01b03908116911614610cd45760405162461bcd60e51b815260040180806020018281038252602d815260200180611ac2602d913960400191505060405180910390fd5b6065546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3606580546001600160a01b0319169055565b600090815260cd602052604090206001015490565b6000610d3e826114c4565b610d81576040805162461bcd60e51b815260206004820152600f60248201526e1ad95e481b9bdd08195e1a5cdd1959608a1b604482015290519081900360640190fd5b6000610d8c83610d1e565b905080610d9d5760009150506109f5565b600083815260cd6020526040902060010180546000198301908110610dbe57fe5b906000526020600020906003020160020154915050919050565b61010380546001600160a01b0319166001600160a01b0392909216919091179055565b6065546001600160a01b031690565b6000610e15836114c4565b610e58576040805162461bcd60e51b815260206004820152600f60248201526e1ad95e481b9bdd08195e1a5cdd1959608a1b604482015290519081900360640190fd5b6000610e6384610d1e565b9050600081118015610e7457508083105b610eba576040805162461bcd60e51b81526020600482015260126024820152714e6f7420656e6f75676820686973746f727960701b604482015290519081900360640190fd5b600084815260cd60205260409020600101805460001985840301908110610edd57fe5b90600052602060002090600302016001015491505092915050565b61010155565b6000610f09836114c4565b610f4c576040805162461bcd60e51b815260206004820152600f60248201526e1ad95e481b9bdd08195e1a5cdd1959608a1b604482015290519081900360640190fd5b81610f94576040805162461bcd60e51b81526020600482015260136024820152720696e74657276616c2063616e2774206265203606c1b604482015290519081900360640190fd5b6000610f9f84610d1e565b905060008111610feb576040805162461bcd60e51b81526020600482015260126024820152714e6f7420656e6f75676820686973746f727960701b604482015290519081900360640190fd5b6000198101610ff861196b565b600086815260cd6020526040902060010180548390811061101557fe5b906000526020600020906003020160405180606001604052908160008201548152602001600182015481526020016002820154815250509050600081604001519050600061107187611065611591565b9063ffffffff61159816565b90508082108061107f575083155b15611094575050602001519250610bbe915050565b60006110a283611065611591565b602085015190915083906000906110bf908463ffffffff6115e116565b90505b866110e6576110d7818463ffffffff61163a16565b98505050505050505050610bbe565b6110f787600163ffffffff61159816565b60008c815260cd602052604090206001018054919850908890811061111857fe5b600091825260209182902060408051606081018252600390930290910180548352600181015493830184905260020154908201819052909750908582116111925761118961117c61116f868963ffffffff61159816565b839063ffffffff6115e116565b849063ffffffff61167c16565b925050506111e5565b60006111a4858463ffffffff61159816565b90506111c66111b9838363ffffffff6115e116565b859063ffffffff61167c16565b93506111d8868263ffffffff61167c16565b95508294505050506110c2565b6111f5818b63ffffffff61163a16565b9b9a5050505050505050505050565b61120c6113f4565b6065546001600160a01b039081169116146112585760405162461bcd60e51b815260040180806020018281038252602d815260200180611ac2602d913960400191505060405180910390fd5b6001600160a01b0381166112a3576040805162461bcd60e51b815260206004820152600d60248201526c6164647220697320656d70747960981b604482015290519081900360640190fd5b60cc80546001600160a01b0319166001600160a01b0392909216919091179055565b6066546001600160a01b031661130c5760405162461bcd60e51b815260040180806020018281038252602f815260200180611a93602f913960400191505060405180910390fd5b6113146113f4565b6066546001600160a01b039081169116146113605760405162461bcd60e51b81526004018080602001828103825260278152602001806119fb6027913960400191505060405180910390fd5b6066546065546040516001600160a01b0392831692909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360668054606580546001600160a01b03199081166001600160a01b03841617909155169055565b60006113d0611591565b905090565b60cc546001600160a01b031681565b610103546001600160a01b031681565b610103546000906001600160a01b031661140f575033610c7d565b50610103546001600160a01b031690565b80156114775761142f826114c4565b611472576040805162461bcd60e51b815260206004820152600f60248201526e1ad95e481b9bdd08195e1a5cdd1959608a1b604482015290519081900360640190fd5b6114c0565b611480826114c4565b156114c0576040805162461bcd60e51b815260206004820152600b60248201526a1ad95e48195e1a5cdd195960aa1b604482015290519081900360640190fd5b5050565b600090815260cd602052604090205460ff1690565b303b1590565b600054610100900460ff16806114f857506114f86114d9565b80611506575060005460ff16155b6115415760405162461bcd60e51b815260040180806020018281038252602e815260200180611a65602e913960400191505060405180910390fd5b600054610100900460ff1615801561156c576000805460ff1961ff0019909116610100171660011790555b6115746116d6565b61157c611776565b801561158e576000805461ff00191690555b50565b6101015490565b60006115da83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061186f565b9392505050565b6000826115f057506000610bbe565b828202828482816115fd57fe5b04146115da5760405162461bcd60e51b8152600401808060200182810382526021815260200180611a226021913960400191505060405180910390fd5b60006115da83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611906565b6000828201838110156115da576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600054610100900460ff16806116ef57506116ef6114d9565b806116fd575060005460ff16155b6117385760405162461bcd60e51b815260040180806020018281038252602e815260200180611a65602e913960400191505060405180910390fd5b600054610100900460ff1615801561157c576000805460ff1961ff001990911661010017166001179055801561158e576000805461ff001916905550565b600054610100900460ff168061178f575061178f6114d9565b8061179d575060005460ff16155b6117d85760405162461bcd60e51b815260040180806020018281038252602e815260200180611a65602e913960400191505060405180910390fd5b600054610100900460ff16158015611803576000805460ff1961ff0019909116610100171660011790555b600061180d6113f4565b606580546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350801561158e576000805461ff001916905550565b600081848411156118fe5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156118c35781810151838201526020016118ab565b50505050905090810190601f1680156118f05780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600081836119555760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156118c35781810151838201526020016118ab565b50600083858161196157fe5b0495945050505050565b60405180606001604052806000815260200160008152602001600081525090565b508054600082556003029060005260206000209081019061158e9190610c7d91905b808211156119cf5760008082556001820181905560028201556003016119ae565b509056fe5065727046694f776e61626c65557067726164653a2073616d652061732063616e6469646174655065727046694f776e61626c65557067726164653a206e6f7420746865206e6577206f776e6572536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775065727046694f776e61626c65557067726164653a207a65726f2061646472657373436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a65645065727046694f776e61626c65557067726164653a2063616e646964617465206973207a65726f20616464726573735065727046694f776e61626c65557067726164653a2063616c6c6572206973206e6f7420746865206f776e65725065727046694f776e61626c65557067726164653a2073616d65206173206f726967696e616ca264697066735822122040ea1999487a26cce2fc169ffee7bf5fc0f5fcacddac19bb466e583d8086637464736f6c63430006090033\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Signer, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { MixedDecimalFake } from \"../MixedDecimalFake\";\n\nexport class MixedDecimalFake__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<MixedDecimalFake> {\n    return super.deploy(overrides || {}) as Promise<MixedDecimalFake>;\n  }\n  getDeployTransaction(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  attach(address: string): MixedDecimalFake {\n    return super.attach(address) as MixedDecimalFake;\n  }\n  connect(signer: Signer): MixedDecimalFake__factory {\n    return super.connect(signer) as MixedDecimalFake__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): MixedDecimalFake {\n    return new Contract(address, _abi, signerOrProvider) as MixedDecimalFake;\n  }\n}\n\nconst _abi = [\n  {\n    inputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"int256\",\n            name: \"d\",\n            type: \"int256\",\n          },\n        ],\n        internalType: \"struct SignedDecimal.signedDecimal\",\n        name: \"x\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"y\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"div\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"int256\",\n            name: \"d\",\n            type: \"int256\",\n          },\n        ],\n        internalType: \"struct SignedDecimal.signedDecimal\",\n        name: \"z\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"pure\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"int256\",\n            name: \"d\",\n            type: \"int256\",\n          },\n        ],\n        internalType: \"struct SignedDecimal.signedDecimal\",\n        name: \"x\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"y\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"divScalar\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"int256\",\n            name: \"d\",\n            type: \"int256\",\n          },\n        ],\n        internalType: \"struct SignedDecimal.signedDecimal\",\n        name: \"z\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"pure\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"x\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"fromDecimal\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"int256\",\n            name: \"d\",\n            type: \"int256\",\n          },\n        ],\n        internalType: \"struct SignedDecimal.signedDecimal\",\n        name: \"z\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"pure\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"int256\",\n            name: \"d\",\n            type: \"int256\",\n          },\n        ],\n        internalType: \"struct SignedDecimal.signedDecimal\",\n        name: \"x\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"y\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"mul\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"int256\",\n            name: \"d\",\n            type: \"int256\",\n          },\n        ],\n        internalType: \"struct SignedDecimal.signedDecimal\",\n        name: \"z\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"pure\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"int256\",\n            name: \"d\",\n            type: \"int256\",\n          },\n        ],\n        internalType: \"struct SignedDecimal.signedDecimal\",\n        name: \"x\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"y\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"mulScalar\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"int256\",\n            name: \"d\",\n            type: \"int256\",\n          },\n        ],\n        internalType: \"struct SignedDecimal.signedDecimal\",\n        name: \"z\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"pure\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"int256\",\n            name: \"d\",\n            type: \"int256\",\n          },\n        ],\n        internalType: \"struct SignedDecimal.signedDecimal\",\n        name: \"x\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"toUint\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"pure\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x608060405234801561001057600080fd5b50610810806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806322b3e2911461006757806352d1fa9414610090578063776fedb7146100a35780638e95eec0146100b6578063c3914cac146100c9578063fe6ec19a146100dc575b600080fd5b61007a610075366004610626565b6100fc565b6040516100879190610794565b60405180910390f35b61007a61009e366004610626565b61011b565b61007a6100b136600461060b565b610133565b61007a6100c436600461065a565b61014a565b61007a6100d736600461065a565b610162565b6100ef6100ea36600461060b565b61017a565b604051610087919061079e565b6101046105bb565b610114838363ffffffff61018516565b9392505050565b6101236105bb565b610114838363ffffffff61020816565b61013b6105bb565b61014482610279565b92915050565b6101526105bb565b610114838363ffffffff6102dd16565b61016a6105bb565b610114838363ffffffff61034816565b6000610144826103ab565b61018d6105bb565b8180600001516001600160ff1b0310156040518060600160405280603381526020016107a860339139906101dd5760405162461bcd60e51b81526004016101d49190610684565b60405180910390fd5b506101e66105bb565b6101ff6101f285610279565b869063ffffffff6103bd16565b95945050505050565b6102106105bb565b8180600001516001600160ff1b0310156040518060600160405280603381526020016107a860339139906102575760405162461bcd60e51b81526004016101d49190610684565b506102606105bb565b6101ff61026c85610279565b869063ffffffff6103e916565b6102816105bb565b8180600001516001600160ff1b0310156040518060600160405280603381526020016107a860339139906102c85760405162461bcd60e51b81526004016101d49190610684565b50506040805160208101909152915182525090565b6102e56105bb565b816001600160ff1b0310156040518060600160405280603381526020016107a860339139906103275760405162461bcd60e51b81526004016101d49190610684565b506103306105bb565b610340848463ffffffff61040c16565b949350505050565b6103506105bb565b816001600160ff1b0310156040518060600160405280603381526020016107a860339139906103925760405162461bcd60e51b81526004016101d49190610684565b5061039b6105bb565b610340848463ffffffff61042e16565b60006103b682610450565b5192915050565b6103c56105bb565b6103cd6105bb565b825184516103e09163ffffffff61047e16565b81529392505050565b6103f16105bb565b6103f96105bb565b825184516103e09163ffffffff61048c16565b6104146105bb565b61041c6105bb565b83516103e0908463ffffffff61049a16565b6104366105bb565b61043e6105bb565b83516103e0908463ffffffff61050516565b6104586105bb565b6104606105bb565b8251600013156104765782516000038152610144565b915182525090565b600061011483836012610569565b600061011483836012610593565b6000826104a957506000610144565b826000191480156104bd5750600160ff1b82145b156104da5760405162461bcd60e51b81526004016101d490610718565b828202828482816104e757fe5b05146101145760405162461bcd60e51b81526004016101d490610718565b6000816105245760405162461bcd60e51b81526004016101d49061075f565b816000191480156105385750600160ff1b83145b156105555760405162461bcd60e51b81526004016101d4906106d7565b600082848161056057fe5b05949350505050565b6000610340610577836105b2565b610587868663ffffffff61049a16565b9063ffffffff61050516565b6000610340836105876105a5856105b2565b879063ffffffff61049a16565b60ff16600a0a90565b6040518060200160405280600081525090565b6000602082840312156105df578081fd5b6040516020810181811067ffffffffffffffff821117156105fe578283fd5b6040529135825250919050565b60006020828403121561061c578081fd5b61011483836105ce565b60008060408385031215610638578081fd5b61064284846105ce565b915061065184602085016105ce565b90509250929050565b6000806040838503121561066c578182fd5b61067684846105ce565b946020939093013593505050565b6000602080835283518082850152825b818110156106b057858101830151858201604001528201610694565b818111156106c15783604083870101525b50601f01601f1916929092016040019392505050565b60208082526021908201527f5369676e6564536166654d6174683a206469766973696f6e206f766572666c6f6040820152607760f81b606082015260800190565b60208082526027908201527f5369676e6564536166654d6174683a206d756c7469706c69636174696f6e206f604082015266766572666c6f7760c81b606082015260800190565b6020808252818101527f5369676e6564536166654d6174683a206469766973696f6e206279207a65726f604082015260600190565b9051815260200190565b9081526020019056fe4d69786564446563696d616c3a2075696e742076616c756520697320626967676572207468616e205f494e543235365f4d4158a2646970667358221220b4239345cd0ff8b749eb6e907e0acd26ef8a9c51fae7a645a5bc79da2b3361cc64736f6c63430006090033\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Signer, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { AMBBridgeMock } from \"../AMBBridgeMock\";\n\nexport class AMBBridgeMock__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<AMBBridgeMock> {\n    return super.deploy(overrides || {}) as Promise<AMBBridgeMock>;\n  }\n  getDeployTransaction(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  attach(address: string): AMBBridgeMock {\n    return super.attach(address) as AMBBridgeMock;\n  }\n  connect(signer: Signer): AMBBridgeMock__factory {\n    return super.connect(signer) as AMBBridgeMock__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): AMBBridgeMock {\n    return new Contract(address, _abi, signerOrProvider) as AMBBridgeMock;\n  }\n}\n\nconst _abi = [\n  {\n    inputs: [],\n    name: \"messageId\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"messageSender\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_msgId\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"mockSetMessageId\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_addr\",\n        type: \"address\",\n      },\n    ],\n    name: \"mockSetMessageSender\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_contract\",\n        type: \"address\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"_data\",\n        type: \"bytes\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_gas\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"requireToPassMessage\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x608060405234801561001057600080fd5b5061028c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063240b63311461005c5780632afb2dab1461007b578063669f618b146100a1578063d67bdd25146100bb578063dc8601b3146100df575b600080fd5b6100796004803603602081101561007257600080fd5b503561015f565b005b6100796004803603602081101561009157600080fd5b50356001600160a01b0316610164565b6100a9610186565b60408051918252519081900360200190f35b6100c361018c565b604080516001600160a01b039092168252519081900360200190f35b6100a9600480360360608110156100f557600080fd5b6001600160a01b03823516919081019060408101602082013564010000000081111561012057600080fd5b82018360208201111561013257600080fd5b8035906020019184600183028401116401000000008311171561015457600080fd5b91935091503561019b565b600155565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b60015490565b6000546001600160a01b031690565b6000806060866001600160a01b03168686604051808383808284376040519201945060009350909150508083038183865af19150503d80600081146101fc576040519150601f19603f3d011682016040523d82523d6000602084013e610201565b606091505b509150915081610248576040805162461bcd60e51b815260206004820152600d60248201526c32bc32b1baba329032b93937b960991b604482015290519081900360640190fd5b50506001549594505050505056fea2646970667358221220c17b4530dd62af4ccab855c8dd698d0aacef1a6190efbe68974485ed7ad5dde764736f6c63430006090033\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Signer, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { AmmMock } from \"../AmmMock\";\n\nexport class AmmMock__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<AmmMock> {\n    return super.deploy(overrides || {}) as Promise<AmmMock>;\n  }\n  getDeployTransaction(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  attach(address: string): AmmMock {\n    return super.attach(address) as AmmMock;\n  }\n  connect(signer: Signer): AmmMock__factory {\n    return super.connect(signer) as AmmMock__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): AmmMock {\n    return new Contract(address, _abi, signerOrProvider) as AmmMock;\n  }\n}\n\nconst _abi = [\n  {\n    inputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"enum IAmm.Dir\",\n        name: \"dir\",\n        type: \"uint8\",\n      },\n    ],\n    name: \"Dir\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"baseAssetReserve\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"d\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"fundingRate\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"int256\",\n            name: \"d\",\n            type: \"int256\",\n          },\n        ],\n        internalType: \"struct SignedDecimal.signedDecimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"enum IAmm.Dir\",\n        name: \"\",\n        type: \"uint8\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"getInputPrice\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"enum IAmm.Dir\",\n        name: \"\",\n        type: \"uint8\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"getOutputPrice\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"enum IAmm.Dir\",\n        name: \"\",\n        type: \"uint8\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"getOutputTwap\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getReserve\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_baseAssetReserve\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"mockSetBaseAssetReserve\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"int256\",\n            name: \"d\",\n            type: \"int256\",\n          },\n        ],\n        internalType: \"struct SignedDecimal.signedDecimal\",\n        name: \"_fr\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"mockSetFundingRate\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_inputPrice\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"mockSetInputPrice\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_outputPrice\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"mockSetOutputPrice\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_outputTwap\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"mockSetOutputTwap\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"_quoteAsset\",\n        type: \"address\",\n      },\n    ],\n    name: \"mockSetQuoteAsset\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_quoteAssetReserve\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"mockSetQuoteAssetReserve\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"quoteAsset\",\n    outputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"quoteAssetReserve\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"d\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"settleFunding\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"enum IAmm.Dir\",\n        name: \"\",\n        type: \"uint8\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"swapInput\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"enum IAmm.Dir\",\n        name: \"\",\n        type: \"uint8\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"swapOutput\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x608060405234801561001057600080fd5b50610526806100206000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c80639ffca62f116100a2578063e1f1027f11610071578063e1f1027f14610211578063e4bc2eb914610224578063ed83d79c1461022c578063fa9d127714610234578063fdf262b71461024757610116565b80639ffca62f146101d6578063c9566fcc146101e9578063d5c6cf16146101fe578063da0c5927146101fe57610116565b8063662d588b116100e9578063662d588b146101775780636fa42ede1461018a578063803da60d1461019d57806391fb46fe146101b05780639b133e8a146101c357610116565b806330007f411461011b57806341d3c84c1461013057806343743e071461014e57806359bf5d3914610161575b600080fd5b61012e61012936600461045d565b61025c565b005b610138610262565b6040516101459190610496565b60405180910390f35b61012e61015c3660046103b4565b61027e565b6101696102a0565b6040516101459291906104a0565b61012e61018536600461045d565b6102d2565b6101386101983660046103e2565b6102d8565b61012e6101ab36600461045d565b6102f7565b61012e6101be36600461045d565b6102fd565b61012e6101d136600461045d565b610303565b6101386101e4366004610417565b610309565b6101f1610329565b60405161014591906104b0565b61013861020c3660046103e2565b61032f565b61013861021f3660046103e2565b61034e565b6101f161036d565b61012e610373565b61012e61024236600461045d565b610375565b61024f61037b565b6040516101459190610482565b51600355565b61026a61038a565b506040805160208101909152600654815290565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6102a861038a565b6102b061038a565b5050604080516020808201835260015482528251908101909252600254825291565b51600155565b6102e061038a565b506040805160208101909152600354815292915050565b51600455565b51600255565b51600655565b61031161038a565b50604080516020810190915260055481529392505050565b60025481565b61033761038a565b506040805160208101909152600454815292915050565b61035661038a565b506040805160208101909152600554815292915050565b60015481565b565b51600555565b6000546001600160a01b031681565b6040518060200160405280600081525090565b6000602082840312156103ae578081fd5b50919050565b6000602082840312156103c5578081fd5b81356001600160a01b03811681146103db578182fd5b9392505050565b600080604083850312156103f4578081fd5b82356103ff816104e0565b915061040e846020850161039d565b90509250929050565b60008060006060848603121561042b578081fd5b8335610436816104e0565b9250610445856020860161039d565b9150610454856040860161039d565b90509250925092565b60006020828403121561046e578081fd5b61047860206104b9565b9135825250919050565b6001600160a01b0391909116815260200190565b9051815260200190565b9151825251602082015260400190565b90815260200190565b60405181810167ffffffffffffffff811182821017156104d857600080fd5b604052919050565b600281106104ed57600080fd5b5056fea264697066735822122084a27e6d711ec06dd714edf8bcec7c843b41f6211082d981502f9fbed8f2251f64736f6c63430006090033\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Signer, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { BalancerMock } from \"../BalancerMock\";\n\nexport class BalancerMock__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<BalancerMock> {\n    return super.deploy(overrides || {}) as Promise<BalancerMock>;\n  }\n  getDeployTransaction(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  attach(address: string): BalancerMock {\n    return super.attach(address) as BalancerMock;\n  }\n  connect(signer: Signer): BalancerMock__factory {\n    return super.connect(signer) as BalancerMock__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): BalancerMock {\n    return new Contract(address, _abi, signerOrProvider) as BalancerMock;\n  }\n}\n\nconst _abi = [\n  {\n    inputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    inputs: [],\n    name: \"getCurrentTokens\",\n    outputs: [\n      {\n        internalType: \"address[]\",\n        name: \"\",\n        type: \"address[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"tokenIn\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"tokenOut\",\n        type: \"address\",\n      },\n    ],\n    name: \"getSpotPrice\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"perpToken\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"cUSDT\",\n        type: \"address\",\n      },\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address[]\",\n        name: \"tokens\",\n        type: \"address[]\",\n      },\n    ],\n    name: \"mockSetCurrentTokens\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"price\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"mockSetSpotPrice\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x6080604052600160005534801561001557600080fd5b506103a0806100256000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806315e84af91461005c578063485cc955146100855780637d4f87501461009a578063cc77828d146100ad578063ec2fbf9d146100c2575b600080fd5b61006f61006a36600461025c565b6100d5565b60405161007c9190610361565b60405180910390f35b61009861009336600461025c565b6100df565b005b6100986100a83660046102fc565b610145565b6100b561014a565b60405161007c9190610314565b6100986100d0366004610290565b6101ad565b6000545b92915050565b60018054808201825560008290527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf690810180546001600160a01b039586166001600160a01b031991821617909155825480840190935591018054929093169116179055565b600055565b606060018054806020026020016040519081016040528092919081815260200182805480156101a257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610184575b505050505090505b90565b6101b9600183836101be565b505050565b828054828255906000526020600020908101928215610211579160200282015b828111156102115781546001600160a01b0319166001600160a01b038435161782556020909201916001909101906101de565b5061021d929150610221565b5090565b6101aa91905b8082111561021d5780546001600160a01b0319168155600101610227565b80356001600160a01b03811681146100d957600080fd5b6000806040838503121561026e578182fd5b6102788484610245565b91506102878460208501610245565b90509250929050565b600080602083850312156102a2578182fd5b823567ffffffffffffffff808211156102b9578384fd5b81850186601f8201126102ca578485fd5b80359250818311156102da578485fd5b86602080850283010111156102ed578485fd5b60200196919550909350505050565b60006020828403121561030d578081fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b818110156103555783516001600160a01b031683529284019291840191600101610330565b50909695505050505050565b9081526020019056fea2646970667358221220457d5c77332394088e6ab962241918a81250d9089c485cc1bcfdbf9ce5d85d4464736f6c63430006090033\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Signer, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { ChainlinkAggregatorMock } from \"../ChainlinkAggregatorMock\";\n\nexport class ChainlinkAggregatorMock__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<ChainlinkAggregatorMock> {\n    return super.deploy(overrides || {}) as Promise<ChainlinkAggregatorMock>;\n  }\n  getDeployTransaction(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  attach(address: string): ChainlinkAggregatorMock {\n    return super.attach(address) as ChainlinkAggregatorMock;\n  }\n  connect(signer: Signer): ChainlinkAggregatorMock__factory {\n    return super.connect(signer) as ChainlinkAggregatorMock__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): ChainlinkAggregatorMock {\n    return new Contract(\n      address,\n      _abi,\n      signerOrProvider\n    ) as ChainlinkAggregatorMock;\n  }\n}\n\nconst _abi = [\n  {\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        internalType: \"uint8\",\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"description\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint80\",\n        name: \"_roundId\",\n        type: \"uint80\",\n      },\n    ],\n    name: \"getRoundData\",\n    outputs: [\n      {\n        internalType: \"uint80\",\n        name: \"roundId\",\n        type: \"uint80\",\n      },\n      {\n        internalType: \"int256\",\n        name: \"answer\",\n        type: \"int256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"startedAt\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"updatedAt\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint80\",\n        name: \"answeredInRound\",\n        type: \"uint80\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"latestRoundData\",\n    outputs: [\n      {\n        internalType: \"uint80\",\n        name: \"roundId\",\n        type: \"uint80\",\n      },\n      {\n        internalType: \"int256\",\n        name: \"answer\",\n        type: \"int256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"startedAt\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"updatedAt\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint80\",\n        name: \"answeredInRound\",\n        type: \"uint80\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint80\",\n        name: \"_roundId\",\n        type: \"uint80\",\n      },\n      {\n        internalType: \"int256\",\n        name: \"_answer\",\n        type: \"int256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_startedAt\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_updatedAt\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint80\",\n        name: \"_answeredInRound\",\n        type: \"uint80\",\n      },\n    ],\n    name: \"mockAddAnswer\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"version\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x608060405234801561001057600080fd5b50610437806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80630cc6be4e14610067578063313ce567146100ab57806354fd4d50146100c95780637284e416146100e35780639a6fc8f514610160578063feaf968c146101c2575b600080fd5b6100a9600480360360a081101561007d57600080fd5b506001600160501b038135811691602081013591604082013591606081013591608090910135166101ca565b005b6100b36102fd565b6040805160ff9092168252519081900360200190f35b6100d1610302565b60408051918252519081900360200190f35b6100eb610307565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561012557818101518382015260200161010d565b50505050905090810190601f1680156101525780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101866004803603602081101561017657600080fd5b50356001600160501b0316610319565b604080516001600160501b0396871681526020810195909552848101939093526060840191909152909216608082015290519081900360a00190f35b610186610327565b600080546001818101835560038083047f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630180546001600160501b039a8b16600a95849006860261010090810a918202918d021990921617909155825480840184557fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60198909855600280548084019091557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0196909655855480820187557fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b01949094556004805494850181559091528383047f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b018054928716949093060290930a9182029190930219909116179055565b600890565b600090565b60408051602081019091526000815290565b506000908190819081908190565b60008060008060008060016000805490500390506000818154811061034857fe5b9060005260206000209060039182820401919006600a029054906101000a90046001600160501b03166001828154811061037e57fe5b90600052602060002001546002838154811061039657fe5b9060005260206000200154600384815481106103ae57fe5b9060005260206000200154600485815481106103c657fe5b9060005260206000209060039182820401919006600a029054906101000a90046001600160501b03169550955095509550955050909192939456fea264697066735822122053579b21cf6ce5f85022a745a82e6dfac8719a5cf7c31c03b85a5d01bacb554564736f6c63430006090033\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Signer, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { ChainlinkL1Mock } from \"../ChainlinkL1Mock\";\n\nexport class ChainlinkL1Mock__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<ChainlinkL1Mock> {\n    return super.deploy(overrides || {}) as Promise<ChainlinkL1Mock>;\n  }\n  getDeployTransaction(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  attach(address: string): ChainlinkL1Mock {\n    return super.attach(address) as ChainlinkL1Mock;\n  }\n  connect(signer: Signer): ChainlinkL1Mock__factory {\n    return super.connect(signer) as ChainlinkL1Mock__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): ChainlinkL1Mock {\n    return new Contract(address, _abi, signerOrProvider) as ChainlinkL1Mock;\n  }\n}\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"roundId\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"price\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"timestamp\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"PriceUpdated\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        internalType: \"uint8\",\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"description\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint80\",\n        name: \"_roundId\",\n        type: \"uint80\",\n      },\n    ],\n    name: \"getRoundData\",\n    outputs: [\n      {\n        internalType: \"uint80\",\n        name: \"roundId\",\n        type: \"uint80\",\n      },\n      {\n        internalType: \"int256\",\n        name: \"answer\",\n        type: \"int256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"startedAt\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"updatedAt\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint80\",\n        name: \"answeredInRound\",\n        type: \"uint80\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"latestRoundData\",\n    outputs: [\n      {\n        internalType: \"uint80\",\n        name: \"roundId\",\n        type: \"uint80\",\n      },\n      {\n        internalType: \"int256\",\n        name: \"answer\",\n        type: \"int256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"startedAt\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"updatedAt\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint80\",\n        name: \"answeredInRound\",\n        type: \"uint80\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint80\",\n        name: \"_roundId\",\n        type: \"uint80\",\n      },\n      {\n        internalType: \"int256\",\n        name: \"_answer\",\n        type: \"int256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_startedAt\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_updatedAt\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint80\",\n        name: \"_answeredInRound\",\n        type: \"uint80\",\n      },\n    ],\n    name: \"mockAddAnswer\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"updateLatestRoundData\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"version\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x608060405234801561001057600080fd5b506105a4806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80637284e4161161005b5780637284e416146100fe5780639a6fc8f51461017b578063f463e18e146101dd578063feaf968c146101fa5761007d565b80630cc6be4e14610082578063313ce567146100c657806354fd4d50146100e4575b600080fd5b6100c4600480360360a081101561009857600080fd5b506001600160501b03813581169160208101359160408201359160608101359160809091013516610202565b005b6100ce610335565b6040805160ff9092168252519081900360200190f35b6100ec61033a565b60408051918252519081900360200190f35b61010661033f565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610140578181015183820152602001610128565b50505050905090810190601f16801561016d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101a16004803603602081101561019157600080fd5b50356001600160501b0316610351565b604080516001600160501b0396871681526020810195909552848101939093526060840191909152909216608082015290519081900360a00190f35b6100c4600480360360208110156101f357600080fd5b503561044c565b6101a1610494565b600080546001818101835560038083047f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630180546001600160501b039a8b16600a95849006860261010090810a918202918d021990921617909155825480840184557fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60198909855600280548084019091557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0196909655855480820187557fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b01949094556004805494850181559091528383047f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b018054928716949093060290930a9182029190930219909116179055565b600890565b600090565b60408051602081019091526000815290565b600080600080600080866001600160501b03168154811061036e57fe5b9060005260206000209060039182820401919006600a029054906101000a90046001600160501b03166001876001600160501b0316815481106103ad57fe5b90600052602060002001546002886001600160501b0316815481106103ce57fe5b90600052602060002001546003896001600160501b0316815481106103ef57fe5b906000526020600020015460048a6001600160501b03168154811061041057fe5b9060005260206000209060039182820401919006600a029054906101000a90046001600160501b03169450945094509450945091939590929450565b60408051606481526101f46020820152635611c2308183015290517f15819dd2fd9f6418b142e798d08a18d0bf06ea368f4480b7b0d3f75bd966bc489181900360600190a150565b6000806000806000806001600080549050039050600081815481106104b557fe5b9060005260206000209060039182820401919006600a029054906101000a90046001600160501b0316600182815481106104eb57fe5b90600052602060002001546002838154811061050357fe5b90600052602060002001546003848154811061051b57fe5b90600052602060002001546004858154811061053357fe5b9060005260206000209060039182820401919006600a029054906101000a90046001600160501b03169550955095509550955050909192939456fea26469706673582212209efcaadd22108f1630a12d51d3453fc09f61c84a94f06e015e99c1b04dda7ba964736f6c63430006090033\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Signer, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { ClearingHouseMock } from \"../ClearingHouseMock\";\n\nexport class ClearingHouseMock__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<ClearingHouseMock> {\n    return super.deploy(overrides || {}) as Promise<ClearingHouseMock>;\n  }\n  getDeployTransaction(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  attach(address: string): ClearingHouseMock {\n    return super.attach(address) as ClearingHouseMock;\n  }\n  connect(signer: Signer): ClearingHouseMock__factory {\n    return super.connect(signer) as ClearingHouseMock__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): ClearingHouseMock {\n    return new Contract(address, _abi, signerOrProvider) as ClearingHouseMock;\n  }\n}\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"TestEventForPayFunding\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IAmm\",\n        name: \"_amm\",\n        type: \"address\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_addedMargin\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"addMargin\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IAmm\",\n        name: \"_amm\",\n        type: \"address\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_quoteAssetAmountLimit\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"closePosition\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IAmm\",\n        name: \"_amm\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_trader\",\n        type: \"address\",\n      },\n    ],\n    name: \"getMarginRatio\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"int256\",\n            name: \"d\",\n            type: \"int256\",\n          },\n        ],\n        internalType: \"struct SignedDecimal.signedDecimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IAmm\",\n        name: \"_amm\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_trader\",\n        type: \"address\",\n      },\n    ],\n    name: \"getPosition\",\n    outputs: [\n      {\n        components: [\n          {\n            components: [\n              {\n                internalType: \"int256\",\n                name: \"d\",\n                type: \"int256\",\n              },\n            ],\n            internalType: \"struct SignedDecimal.signedDecimal\",\n            name: \"size\",\n            type: \"tuple\",\n          },\n          {\n            components: [\n              {\n                internalType: \"uint256\",\n                name: \"d\",\n                type: \"uint256\",\n              },\n            ],\n            internalType: \"struct Decimal.decimal\",\n            name: \"margin\",\n            type: \"tuple\",\n          },\n          {\n            components: [\n              {\n                internalType: \"uint256\",\n                name: \"d\",\n                type: \"uint256\",\n              },\n            ],\n            internalType: \"struct Decimal.decimal\",\n            name: \"openNotional\",\n            type: \"tuple\",\n          },\n          {\n            components: [\n              {\n                internalType: \"int256\",\n                name: \"d\",\n                type: \"int256\",\n              },\n            ],\n            internalType: \"struct SignedDecimal.signedDecimal\",\n            name: \"lastUpdatedCumulativePremiumFraction\",\n            type: \"tuple\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"liquidityHistoryIndex\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"blockNumber\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct IClearingHouse.Position\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IAmm\",\n        name: \"_amm\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_trader\",\n        type: \"address\",\n      },\n    ],\n    name: \"liquidate\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IAmm\",\n        name: \"_amm\",\n        type: \"address\",\n      },\n      {\n        internalType: \"enum IClearingHouse.Side\",\n        name: \"_side\",\n        type: \"uint8\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_quoteAssetAmount\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_leverage\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_baseAssetAmountLimit\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"openPosition\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IAmm\",\n        name: \"_amm\",\n        type: \"address\",\n      },\n    ],\n    name: \"payFunding\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IAmm\",\n        name: \"_amm\",\n        type: \"address\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_removedMargin\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"removeMargin\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IAmm\",\n        name: \"_amm\",\n        type: \"address\",\n      },\n    ],\n    name: \"settlePosition\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x608060405234801561001057600080fd5b506103c2806100206000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063893d242d11610066578063893d242d146100e1578063a8c1b0bc14610098578063ac06a96e14610098578063b33dc190146100f4578063ea0a45f91461011d57610093565b806330e2ae651461009857806336405257146100ad5780633e09fa10146100c057806386b9d81f146100d3575b600080fd5b6100ab6100a63660046102dc565b61013d565b005b6100ab6100bb366004610213565b610141565b6100ab6100ce366004610213565b610144565b6100ab6100a6366004610236565b6100ab6100ef36600461026e565b61017e565b610107610102366004610236565b610185565b6040516101149190610325565b60405180910390f35b61013061012b366004610236565b610193565b604051610114919061036d565b5050565b50565b7f53006004e00998befb5352e66e31136b83d1e31da1f86e9decd060e510791021816040516101739190610311565b60405180910390a150565b5050505050565b61018d61019b565b92915050565b61018d6101e9565b6040518060c001604052806101ae6101e9565b81526020016101bb6101e9565b81526020016101c86101e9565b81526020016101d56101e9565b815260200160008152602001600081525090565b6040518060200160405280600081525090565b60006020828403121561020d578081fd5b50919050565b600060208284031215610224578081fd5b813561022f81610377565b9392505050565b60008060408385031215610248578081fd5b823561025381610377565b9150602083013561026381610377565b809150509250929050565b600080600080600060a08688031215610285578081fd5b853561029081610377565b94506020860135600281106102a3578182fd5b93506102b287604088016101fc565b92506102c187606088016101fc565b91506102d087608088016101fc565b90509295509295909350565b600080604083850312156102ee578182fd5b82356102f981610377565b915061030884602085016101fc565b90509250929050565b6001600160a01b0391909116815260200190565b600060c08201905082515182526020830151516020830152604083015151604083015260608301515160608301526080830151608083015260a083015160a083015292915050565b9051815260200190565b6001600160a01b038116811461014157600080fdfea2646970667358221220de97a2208f4a61f0b37188ae6f0a3d306b4df2db59394cd0ec66a7532163f26764736f6c63430006090033\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Signer, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { CUsdtMock } from \"../CUsdtMock\";\n\nexport class CUsdtMock__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<CUsdtMock> {\n    return super.deploy(overrides || {}) as Promise<CUsdtMock>;\n  }\n  getDeployTransaction(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  attach(address: string): CUsdtMock {\n    return super.attach(address) as CUsdtMock;\n  }\n  connect(signer: Signer): CUsdtMock__factory {\n    return super.connect(signer) as CUsdtMock__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): CUsdtMock {\n    return new Contract(address, _abi, signerOrProvider) as CUsdtMock;\n  }\n}\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"Paused\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n    ],\n    name: \"RoleGranted\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n    ],\n    name: \"RoleRevoked\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"Unpaused\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"DEFAULT_ADMIN_ROLE\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"MINTER_ROLE\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"PAUSER_ROLE\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"burn\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"burnFrom\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        internalType: \"uint8\",\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"subtractedValue\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"decreaseAllowance\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"exchangeRateStored\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"getRoleAdmin\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"index\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getRoleMember\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"getRoleMemberCount\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"grantRole\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"hasRole\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"addedValue\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"increaseAllowance\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"string\",\n        name: \"name\",\n        type: \"string\",\n      },\n      {\n        internalType: \"string\",\n        name: \"symbol\",\n        type: \"string\",\n      },\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"initialSupply\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"string\",\n        name: \"name\",\n        type: \"string\",\n      },\n      {\n        internalType: \"string\",\n        name: \"symbol\",\n        type: \"string\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"decimal\",\n        type: \"uint8\",\n      },\n    ],\n    name: \"initializeERC20Fake\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"mint\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_exchangeRate\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"mockSetExchangeRateStored\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_underlying\",\n        type: \"address\",\n      },\n    ],\n    name: \"mockSetUnderlying\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"pause\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"paused\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"renounceRole\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"revokeRole\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"underlying\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"unpause\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x6080604052662386f26fc100006101925534801561001c57600080fd5b50611f708061002c6000396000f3fe608060405234801561001057600080fd5b50600436106101fb5760003560e01c80636f307dc31161011a57806395d89b41116100ad578063ca15c8731161007c578063ca15c873146103f2578063d539139314610405578063d547741f1461040d578063dd62ed3e14610420578063e63ab1e914610433576101fb565b806395d89b41146103bc578063a217fddf146103c4578063a457c2d7146103cc578063a9059cbb146103df576101fb565b80638456cb59116100e95780638456cb591461037b57806388161591146103835780639010d07c1461039657806391d14854146103a9576101fb565b80636f307dc31461032d57806370a08231146103425780637993641d1461035557806379cc679014610368576101fb565b806336568abe1161019257806342966c681161016157806342966c68146102ec5780634cd88b76146102ff5780635c975abb146103125780636cb9fd541461031a576101fb565b806336568abe146102ab57806339509351146102be5780633f4ba83a146102d157806340c10f19146102d9576101fb565b806323b872dd116101ce57806323b872dd1461025b578063248a9ca31461026e5780632f2ff15d14610281578063313ce56714610296576101fb565b806306fdde0314610200578063095ea7b31461021e57806318160ddd1461023e578063182df0f514610253575b600080fd5b61020861043b565b604051610215919061191e565b60405180910390f35b61023161022c366004611753565b6104d2565b604051610215919061190a565b6102466104f0565b6040516102159190611915565b6102466104f6565b610231610269366004611713565b6104fd565b61024661027c36600461177d565b61058a565b61029461028f366004611795565b61059f565b005b61029e6105f0565b6040516102159190611e5e565b6102946102b9366004611795565b6105f9565b6102316102cc366004611753565b61063b565b61029461068f565b6102946102e7366004611753565b6106d4565b6102946102fa36600461177d565b610709565b61029461030d3660046117e5565b61071d565b610231610727565b610294610328366004611846565b610730565b6103356107db565b60405161021591906118f6565b6102466103503660046116c4565b6107eb565b61029461036336600461177d565b610806565b610294610376366004611753565b61080c565b610294610867565b6102946103913660046116c4565b61089a565b6103356103a43660046117c4565b6108bd565b6102316103b7366004611795565b6108e2565b610208610900565b610246610961565b6102316103da366004611753565b610966565b6102316103ed366004611753565b6109d4565b61024661040036600461177d565b6109e8565b6102466109ff565b61029461041b366004611795565b610a16565b61024661042e3660046116df565b610a50565b610246610a7b565b609a8054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104c75780601f1061049c576101008083540402835291602001916104c7565b820191906000526020600020905b8154815290600101906020018083116104aa57829003601f168201915b505050505090505b90565b60006104e66104df610a87565b8484610a8b565b5060015b92915050565b60995490565b6101925490565b600061050a848484610b3f565b61058084610516610a87565b61057b85604051806060016040528060288152602001611eca602891396001600160a01b038a16600090815260986020526040812090610554610a87565b6001600160a01b03168152602081019190915260400160002054919063ffffffff610c6016565b610a8b565b5060019392505050565b60009081526065602052604090206002015490565b6000828152606560205260409020600201546105bd906103b7610a87565b6105e25760405162461bcd60e51b81526004016105d9906119f6565b60405180910390fd5b6105ec8282610c8c565b5050565b609c5460ff1690565b610601610a87565b6001600160a01b0316816001600160a01b0316146106315760405162461bcd60e51b81526004016105d990611d8e565b6105ec8282610cfb565b60006104e6610648610a87565b8461057b8560986000610659610a87565b6001600160a01b03908116825260208083019390935260409182016000908120918c16815292529020549063ffffffff610d6a16565b6106ae60405161069e906118c8565b60405180910390206103b7610a87565b6106ca5760405162461bcd60e51b81526004016105d990611a73565b6106d2610d8f565b565b6106e360405161069e906118df565b6106ff5760405162461bcd60e51b81526004016105d990611bc3565b6105ec8282610dfb565b61071a610714610a87565b82610ec7565b50565b6105ec8282610fa9565b60fb5460ff1690565b600054610100900460ff16806107495750610749611069565b80610757575060005460ff16155b6107735760405162461bcd60e51b81526004016105d990611c19565b600054610100900460ff1615801561079e576000805460ff1961ff0019909116610100171660011790555b6107a8848461071d565b6107b18261106f565b6107c26107bc610a87565b86610dfb565b80156107d4576000805461ff00191690555b5050505050565b610191546001600160a01b031690565b6001600160a01b031660009081526097602052604090205490565b61019255565b600061084482604051806060016040528060248152602001611ef2602491396108378661042e610a87565b919063ffffffff610c6016565b905061085883610852610a87565b83610a8b565b6108628383610ec7565b505050565b61087660405161069e906118c8565b6108925760405162461bcd60e51b81526004016105d990611d31565b6106d2611085565b61019180546001600160a01b0319166001600160a01b0392909216919091179055565b60008281526065602052604081206108db908363ffffffff6110de16565b9392505050565b60008281526065602052604081206108db908363ffffffff6110ea16565b609b8054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104c75780601f1061049c576101008083540402835291602001916104c7565b600081565b60006104e6610973610a87565b8461057b85604051806060016040528060258152602001611f16602591396098600061099d610a87565b6001600160a01b03908116825260208083019390935260409182016000908120918d1681529252902054919063ffffffff610c6016565b60006104e66109e1610a87565b8484610b3f565b60008181526065602052604081206104ea906110ff565b604051610a0b906118df565b604051809103902081565b600082815260656020526040902060020154610a34906103b7610a87565b6106315760405162461bcd60e51b81526004016105d990611b49565b6001600160a01b03918216600090815260986020908152604080832093909416825291909152205490565b604051610a0b906118c8565b3390565b6001600160a01b038316610ab15760405162461bcd60e51b81526004016105d990611ced565b6001600160a01b038216610ad75760405162461bcd60e51b81526004016105d990611ad0565b6001600160a01b0380841660008181526098602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610b32908590611915565b60405180910390a3505050565b6001600160a01b038316610b655760405162461bcd60e51b81526004016105d990611ca8565b6001600160a01b038216610b8b5760405162461bcd60e51b81526004016105d9906119b3565b610b9683838361110a565b610bd981604051806060016040528060268152602001611ea4602691396001600160a01b038616600090815260976020526040902054919063ffffffff610c6016565b6001600160a01b038085166000908152609760205260408082209390935590841681522054610c0e908263ffffffff610d6a16565b6001600160a01b0380841660008181526097602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610b32908590611915565b60008184841115610c845760405162461bcd60e51b81526004016105d9919061191e565b505050900390565b6000828152606560205260409020610caa908263ffffffff61111516565b156105ec57610cb7610a87565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152606560205260409020610d19908263ffffffff61112a16565b156105ec57610d26610a87565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b6000828201838110156108db5760405162461bcd60e51b81526004016105d990611b12565b60fb5460ff16610db15760405162461bcd60e51b81526004016105d990611a45565b60fb805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa610de4610a87565b604051610df191906118f6565b60405180910390a1565b6001600160a01b038216610e215760405162461bcd60e51b81526004016105d990611ddd565b610e2d6000838361110a565b609954610e40908263ffffffff610d6a16565b6099556001600160a01b038216600090815260976020526040902054610e6c908263ffffffff610d6a16565b6001600160a01b0383166000818152609760205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610ebb908590611915565b60405180910390a35050565b6001600160a01b038216610eed5760405162461bcd60e51b81526004016105d990611c67565b610ef98260008361110a565b610f3c81604051806060016040528060228152602001611e82602291396001600160a01b038516600090815260976020526040902054919063ffffffff610c6016565b6001600160a01b038316600090815260976020526040902055609954610f68908263ffffffff61113f16565b6099556040516000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610ebb908590611915565b600054610100900460ff1680610fc25750610fc2611069565b80610fd0575060005460ff16155b610fec5760405162461bcd60e51b81526004016105d990611c19565b600054610100900460ff16158015611017576000805460ff1961ff0019909116610100171660011790555b61101f611181565b611027611181565b6110318383611203565b611039611181565b6110416112bc565b611049611181565b6110538383611348565b8015610862576000805461ff0019169055505050565b303b1590565b609c805460ff191660ff92909216919091179055565b60fb5460ff16156110a85760405162461bcd60e51b81526004016105d990611b99565b60fb805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610de4610a87565b60006108db83836113f6565b60006108db836001600160a01b03841661143b565b60006104ea82611453565b610862838383611457565b60006108db836001600160a01b038416611487565b60006108db836001600160a01b0384166114d1565b60006108db83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610c60565b600054610100900460ff168061119a575061119a611069565b806111a8575060005460ff16155b6111c45760405162461bcd60e51b81526004016105d990611c19565b600054610100900460ff161580156111ef576000805460ff1961ff0019909116610100171660011790555b801561071a576000805461ff001916905550565b600054610100900460ff168061121c575061121c611069565b8061122a575060005460ff16155b6112465760405162461bcd60e51b81526004016105d990611c19565b600054610100900460ff16158015611271576000805460ff1961ff0019909116610100171660011790555b825161128490609a906020860190611597565b50815161129890609b906020850190611597565b50609c805460ff191660121790558015610862576000805461ff0019169055505050565b600054610100900460ff16806112d557506112d5611069565b806112e3575060005460ff16155b6112ff5760405162461bcd60e51b81526004016105d990611c19565b600054610100900460ff1615801561132a576000805460ff1961ff0019909116610100171660011790555b60fb805460ff19169055801561071a576000805461ff001916905550565b600054610100900460ff16806113615750611361611069565b8061136f575060005460ff16155b61138b5760405162461bcd60e51b81526004016105d990611c19565b600054610100900460ff161580156113b6576000805460ff1961ff0019909116610100171660011790555b6113c860006113c3610a87565b6105e2565b6113e76040516113d7906118df565b60405180910390206113c3610a87565b6110536040516113d7906118c8565b815460009082106114195760405162461bcd60e51b81526004016105d990611971565b82600001828154811061142857fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b5490565b611462838383610862565b61146a610727565b156108625760405162461bcd60e51b81526004016105d990611e14565b6000611493838361143b565b6114c9575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556104ea565b5060006104ea565b6000818152600183016020526040812054801561158d578354600019808301919081019060009087908390811061150457fe5b906000526020600020015490508087600001848154811061152157fe5b60009182526020808320909101929092558281526001898101909252604090209084019055865487908061155157fe5b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506104ea565b60009150506104ea565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106115d857805160ff1916838001178555611605565b82800160010185558215611605579182015b828111156116055782518255916020019190600101906115ea565b50611611929150611615565b5090565b6104cf91905b80821115611611576000815560010161161b565b80356001600160a01b03811681146104ea57600080fd5b600082601f830112611656578081fd5b813567ffffffffffffffff8082111561166d578283fd5b604051601f8301601f19168101602001828111828210171561168d578485fd5b6040528281529250828483016020018610156116a857600080fd5b8260208601602083013760006020848301015250505092915050565b6000602082840312156116d5578081fd5b6108db838361162f565b600080604083850312156116f1578081fd5b6116fb848461162f565b915061170a846020850161162f565b90509250929050565b600080600060608486031215611727578081fd5b833561173281611e6c565b9250602084013561174281611e6c565b929592945050506040919091013590565b60008060408385031215611765578182fd5b61176f848461162f565b946020939093013593505050565b60006020828403121561178e578081fd5b5035919050565b600080604083850312156117a7578182fd5b8235915060208301356117b981611e6c565b809150509250929050565b600080604083850312156117d6578182fd5b50508035926020909101359150565b600080604083850312156117f7578182fd5b823567ffffffffffffffff8082111561180e578384fd5b61181a86838701611646565b9350602085013591508082111561182f578283fd5b5061183c85828601611646565b9150509250929050565b6000806000806080858703121561185b578081fd5b84359350602085013567ffffffffffffffff80821115611879578283fd5b61188588838901611646565b9450604087013591508082111561189a578283fd5b506118a787828801611646565b925050606085013560ff811681146118bd578182fd5b939692955090935050565b6a5041555345525f524f4c4560a81b8152600b0190565b6a4d494e5445525f524f4c4560a81b8152600b0190565b6001600160a01b0391909116815260200190565b901515815260200190565b90815260200190565b6000602080835283518082850152825b8181101561194a5785810183015185820160400152820161192e565b8181111561195b5783604083870101525b50601f01601f1916929092016040019392505050565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201526e0818591b5a5b881d1bc819dc985b9d608a1b606082015260800190565b60208082526014908201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604082015260600190565b60208082526039908201527f45524332305072657365744d696e7465725061757365723a206d75737420686160408201527f76652070617573657220726f6c6520746f20756e706175736500000000000000606082015260800190565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604082015261737360f01b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526030908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201526f2061646d696e20746f207265766f6b6560801b606082015260800190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60208082526036908201527f45524332305072657365744d696e7465725061757365723a206d7573742068616040820152751d99481b5a5b9d195c881c9bdb19481d1bc81b5a5b9d60521b606082015260800190565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201526d195b881a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526021908201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736040820152607360f81b606082015260800190565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526037908201527f45524332305072657365744d696e7465725061757365723a206d75737420686160408201527f76652070617573657220726f6c6520746f207061757365000000000000000000606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201526e103937b632b9903337b91039b2b63360891b606082015260800190565b6020808252601f908201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604082015260600190565b6020808252602a908201527f45524332305061757361626c653a20746f6b656e207472616e736665722077686040820152691a5b19481c185d5cd95960b21b606082015260800190565b60ff91909116815260200190565b6001600160a01b038116811461071a57600080fdfe45524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e20616d6f756e74206578636565647320616c6c6f77616e636545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220f9ff4df93b47c6e7a57489149901a3e89668937d44fadd37d4adb2f2a8157b8964736f6c63430006090033\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Signer, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { ExchangeWrapperMock } from \"../ExchangeWrapperMock\";\n\nexport class ExchangeWrapperMock__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<ExchangeWrapperMock> {\n    return super.deploy(overrides || {}) as Promise<ExchangeWrapperMock>;\n  }\n  getDeployTransaction(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  attach(address: string): ExchangeWrapperMock {\n    return super.attach(address) as ExchangeWrapperMock;\n  }\n  connect(signer: Signer): ExchangeWrapperMock__factory {\n    return super.connect(signer) as ExchangeWrapperMock__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): ExchangeWrapperMock {\n    return new Contract(address, _abi, signerOrProvider) as ExchangeWrapperMock;\n  }\n}\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract IERC20\",\n        name: \"\",\n        type: \"address\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"inputTokenSold\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"getInputPrice\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract IERC20\",\n        name: \"\",\n        type: \"address\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"outputTokenBought\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"getOutputPrice\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract IERC20\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"getSpotPrice\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"mockSetException\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_ratio\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"mockSetSwapRatio\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_price\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"mockSpotPrice\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"inputToken\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract IERC20\",\n        name: \"outputToken\",\n        type: \"address\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"inputTokenSold\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"swapInput\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"inputToken\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract IERC20\",\n        name: \"outputToken\",\n        type: \"address\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"outputTokenBought\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"swapOutput\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x608060405261001661004d60201b6102ee1760201c565b5160335561002d61004d602090811b6102ee17901c565b516034556035805460ff1916905534801561004757600080fd5b5061007b565b610055610068565b5060408051602081019091526000815290565b6040518060200160405280600081525090565b610f118061008a6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063c643ea631161005b578063c643ea63146100e6578063c73971f9146100f9578063e5e75d1e1461010c578063ebbdfcfb1461011f57610088565b806314cd6e191461008d57806315e84af91461009757806333967151146100c0578063c1094e5b146100d3575b600080fd5b610095610132565b005b6100aa6100a5366004610b3b565b610141565b6040516100b79190610e8d565b60405180910390f35b6100aa6100ce366004610bba565b610161565b6100aa6100e1366004610b73565b6101fd565b6100aa6100f4366004610b73565b61023c565b610095610107366004610c25565b610267565b6100aa61011a366004610bba565b61026d565b61009561012d366004610c25565b6102e8565b6035805460ff19166001179055565b610149610af1565b50604080516020810190915260345481525b92915050565b610169610af1565b60355460ff161561017957600080fd5b604080516020810190915260335481526101b7908790339030906101b2906101a6368b90038b018b610c25565b9063ffffffff61030916565b610335565b6101d085336101cb36889003880188610c25565b610470565b604080516020810190915260335481526101f3906101a636879003870187610c25565b9695505050505050565b610205610af1565b604080516020810190915260335481526102349061022836859003850185610c25565b9063ffffffff61059f16565b949350505050565b610244610af1565b60408051602081019091526033548152610234906101a636859003850185610c25565b51603455565b610275610af1565b60355460ff161561028557600080fd5b61029a8633306101b236899003890189610c25565b604080516020810190915260335481526102c590869033906101cb90610228368a90038a018a610c25565b604080516020810190915260335481526101f39061022836879003870187610c25565b51603355565b6102f6610af1565b5060408051602081019091526000815290565b610311610af1565b610319610af1565b8251845161032c9163ffffffff6105c216565b81529392505050565b61033e846105d7565b610346610af1565b6103508584610624565b9050600061035e86846106b1565b905060006060876001600160a01b03166323b872dd60e01b88888660405160240161038b93929190610caa565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516103c99190610c7a565b6000604051808303816000865af19150503d8060008114610406576040519150601f19603f3d011682016040523d82523d6000602084013e61040b565b606091505b50915091508180156104355750805115806104355750808060200190518101906104359190610b1b565b61045a5760405162461bcd60e51b815260040161045190610dc9565b60405180910390fd5b61046688878587610727565b5050505050505050565b610479836105d7565b610481610af1565b61048b8484610624565b9050600061049985846106b1565b905060006060866001600160a01b031663a9059cbb60e01b87856040516024016104c4929190610cce565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516105029190610c7a565b6000604051808303816000865af19150503d806000811461053f576040519150601f19603f3d011682016040523d82523d6000602084013e610544565b606091505b509150915081801561056e57508051158061056e57508080602001905181019061056e9190610b1b565b61058a5760405162461bcd60e51b815260040161045190610d1a565b61059687878587610727565b50505050505050565b6105a7610af1565b6105af610af1565b8251845161032c9163ffffffff61078016565b60006105d08383601261078e565b9392505050565b60006105e2826107ac565b6001600160a01b0383166000908152602081905260409020549091508114610620576001600160a01b03821660009081526020819052604090208190555b5050565b61062c610af1565b6105d083846001600160a01b03166370a08231856040518263ffffffff1660e01b815260040161065c9190610c96565b60206040518083038186803b15801561067457600080fd5b505afa158015610688573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ac9190610c62565b610899565b6000806106bd846107ac565b9050601281106106fb576106f36106db82601263ffffffff61092b16565b600a0a6106e78561096d565b9063ffffffff61097116565b91505061015b565b61023461070f60128363ffffffff61092b16565b600a0a61071b8561096d565b9063ffffffff6109ab16565b61075a6107446107378685610899565b839063ffffffff6109ed16565b61074e8686610624565b9063ffffffff610a1016565b60000b1561077a5760405162461bcd60e51b815260040161045190610e4b565b50505050565b60006105d083836012610a41565b600061023461079c83610a60565b61071b868663ffffffff61097116565b6001600160a01b0381166000908152602081905260408120548061015b5760408051600481526024810182526020810180516001600160e01b031663313ce56760e01b17905290516000916060916001600160a01b0387169161080e91610c7a565b600060405180830381855afa9150503d8060008114610849576040519150601f19603f3d011682016040523d82523d6000602084013e61084e565b606091505b50915091508180156108605750805115155b61087c5760405162461bcd60e51b815260040161045190610d88565b808060200190518101906108909190610c62565b95945050505050565b6108a1610af1565b60006108ac846107ac565b9050601281106108f1576040805160208101909152806108e66108d684601263ffffffff61092b16565b8690600a0a63ffffffff6109ab16565b81525091505061015b565b60408051602081019091528061092161091160128563ffffffff61092b16565b8690600a0a63ffffffff61097116565b9052949350505050565b60006105d083836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610a69565b5190565b6000826109805750600061015b565b8282028284828161098d57fe5b04146105d05760405162461bcd60e51b815260040161045190610e0a565b60006105d083836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250610a95565b6109f5610af1565b6109fd610af1565b8251845161032c9163ffffffff610acc16565b805182516000911015610a255750600161015b565b815183511015610a38575060001961015b565b50600092915050565b60006102348361071b610a5385610a60565b879063ffffffff61097116565b60ff16600a0a90565b60008184841115610a8d5760405162461bcd60e51b81526004016104519190610ce7565b505050900390565b60008183610ab65760405162461bcd60e51b81526004016104519190610ce7565b506000838581610ac257fe5b0495945050505050565b6000828201838110156105d05760405162461bcd60e51b815260040161045190610d51565b6040518060200160405280600081525090565b600060208284031215610b15578081fd5b50919050565b600060208284031215610b2c578081fd5b815180151581146105d0578182fd5b60008060408385031215610b4d578081fd5b8235610b5881610ec3565b91506020830135610b6881610ec3565b809150509250929050565b600080600060608486031215610b87578081fd5b8335610b9281610ec3565b92506020840135610ba281610ec3565b9150610bb18560408601610b04565b90509250925092565b600080600080600060a08688031215610bd1578081fd5b8535610bdc81610ec3565b94506020860135610bec81610ec3565b9350610bfb8760408801610b04565b9250610c0a8760608801610b04565b9150610c198760808801610b04565b90509295509295909350565b600060208284031215610c36578081fd5b6040516020810181811067ffffffffffffffff82111715610c55578283fd5b6040529135825250919050565b600060208284031215610c73578081fd5b5051919050565b60008251610c8c818460208701610e97565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6000602082528251806020840152610d06816040850160208701610e97565b601f01601f19169190910160400192915050565b6020808252601d908201527f446563696d616c45524332303a207472616e73666572206661696c6564000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526021908201527f446563696d616c45524332303a2067657420646563696d616c73206661696c656040820152601960fa1b606082015260800190565b60208082526021908201527f446563696d616c45524332303a207472616e7366657246726f6d206661696c656040820152601960fa1b606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b60208082526022908201527f446563696d616c45524332303a2062616c616e636520696e636f6e73697374656040820152611b9d60f21b606082015260800190565b9051815260200190565b60005b83811015610eb2578181015183820152602001610e9a565b8381111561077a5750506000910152565b6001600160a01b0381168114610ed857600080fd5b5056fea2646970667358221220a564924a9b1b516112d80f6e10e060537d9fdf3c335e28aed5f8736a05128b4964736f6c63430006090033\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Signer, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { FeeRewardPoolMock } from \"../FeeRewardPoolMock\";\n\nexport class FeeRewardPoolMock__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<FeeRewardPoolMock> {\n    return super.deploy(overrides || {}) as Promise<FeeRewardPoolMock>;\n  }\n  getDeployTransaction(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  attach(address: string): FeeRewardPoolMock {\n    return super.attach(address) as FeeRewardPoolMock;\n  }\n  connect(signer: Signer): FeeRewardPoolMock__factory {\n    return super.connect(signer) as FeeRewardPoolMock__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): FeeRewardPoolMock {\n    return new Contract(address, _abi, signerOrProvider) as FeeRewardPoolMock;\n  }\n}\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"FeeNotificationReceived\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"staker\",\n        type: \"address\",\n      },\n    ],\n    name: \"NotificationReceived\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_amount\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"notifyRewardAmount\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"staker\",\n        type: \"address\",\n      },\n    ],\n    name: \"notifyStakeChanged\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_token\",\n        type: \"address\",\n      },\n    ],\n    name: \"setToken\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"token\",\n    outputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x608060405234801561001057600080fd5b50610233806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063144fa6d714610051578063cd8ae3dd14610066578063fc0c546a14610079578063ff59f86d14610097575b600080fd5b61006461005f36600461015e565b6100aa565b005b61006461007436600461015e565b6100cc565b610081610106565b60405161008e91906101e0565b60405180910390f35b6100646100a536600461018c565b610115565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b7fde6106b4ff1eef31d8c6169abb52c38ca8f0a358bc60f3ce80721b127a7d88a0816040516100fb91906101e0565b60405180910390a150565b6000546001600160a01b031681565b7fbeb91d99bb37ccd6331a4211bfc09668620132857d6c33d7805fdf99cd6dd18561014d610148368490038401846101a3565b61015a565b6040516100fb91906101f4565b5190565b60006020828403121561016f578081fd5b81356001600160a01b0381168114610185578182fd5b9392505050565b60006020828403121561019d578081fd5b50919050565b6000602082840312156101b4578081fd5b6040516020810181811067ffffffffffffffff821117156101d3578283fd5b6040529135825250919050565b6001600160a01b0391909116815260200190565b9081526020019056fea264697066735822122093d04440363da71a704adb41d67cfac02ef85945a530e55e81b2c5491fbe54b764736f6c63430006090033\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport {\n  Signer,\n  BigNumberish,\n  Contract,\n  ContractFactory,\n  Overrides,\n} from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { L2PriceFeedMock } from \"../L2PriceFeedMock\";\n\nexport class L2PriceFeedMock__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    _price: BigNumberish,\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<L2PriceFeedMock> {\n    return super.deploy(_price, overrides || {}) as Promise<L2PriceFeedMock>;\n  }\n  getDeployTransaction(\n    _price: BigNumberish,\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(_price, overrides || {});\n  }\n  attach(address: string): L2PriceFeedMock {\n    return super.attach(address) as L2PriceFeedMock;\n  }\n  connect(signer: Signer): L2PriceFeedMock__factory {\n    return super.connect(signer) as L2PriceFeedMock__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): L2PriceFeedMock {\n    return new Contract(address, _abi, signerOrProvider) as L2PriceFeedMock;\n  }\n}\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_price\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"bytes32\",\n        name: \"key\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"price\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"timestamp\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"roundId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"PriceFeedDataSet\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"getPrice\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getTwapPrice\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_priceFeedKey\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_price\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_timestamp\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_roundId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"setLatestData\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_price\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"setPrice\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_price\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"setTwapPrice\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x608060405234801561001057600080fd5b506040516102013803806102018339818101604052602081101561003357600080fd5b505160008190556001556101b58061004c6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063031d64bd1461005c57806331d98b3f1461008d57806335acc2c4146100bc57806391b7f5ed146100d9578063a2173df4146100f6575b600080fd5b61008b6004803603608081101561007257600080fd5b5080359060208101359060408101359060600135610119565b005b6100aa600480360360208110156100a357600080fd5b5035610166565b60408051918252519081900360200190f35b61008b600480360360208110156100d257600080fd5b503561016d565b61008b600480360360208110156100ef57600080fd5b5035610172565b6100aa6004803603604081101561010c57600080fd5b5080359060200135610177565b60408051858152602081018590528082018490526060810183905290517fb3b3d4e42c62d694318e0149f90ed0f2e7be9757332da15fd55ae5a01d41722c9181900360800190a150505050565b5060005490565b600155565b600055565b50506001549056fea264697066735822122060b007b917db82cece6067b5979d7840adfccdf47af9ac0205da978a2b42bca064736f6c63430006090033\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Signer, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { MetaTxRecipientMock } from \"../MetaTxRecipientMock\";\n\nexport class MetaTxRecipientMock__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    _trustedForwarder: string,\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<MetaTxRecipientMock> {\n    return super.deploy(\n      _trustedForwarder,\n      overrides || {}\n    ) as Promise<MetaTxRecipientMock>;\n  }\n  getDeployTransaction(\n    _trustedForwarder: string,\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(_trustedForwarder, overrides || {});\n  }\n  attach(address: string): MetaTxRecipientMock {\n    return super.attach(address) as MetaTxRecipientMock;\n  }\n  connect(signer: Signer): MetaTxRecipientMock__factory {\n    return super.connect(signer) as MetaTxRecipientMock__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): MetaTxRecipientMock {\n    return new Contract(address, _abi, signerOrProvider) as MetaTxRecipientMock;\n  }\n}\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_trustedForwarder\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    inputs: [],\n    name: \"error\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"forwarder\",\n        type: \"address\",\n      },\n    ],\n    name: \"isTrustedForwarder\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"poke\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"pokedBy\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"trustedForwarder\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"versionRecipient\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x60c060405260056080819052640312e302e360dc1b60a0908152610026916001919061007c565b5034801561003357600080fd5b5060405161041f38038061041f8339818101604052602081101561005657600080fd5b5051600080546001600160a01b0319166001600160a01b03909216919091179055610117565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100bd57805160ff19168380011785556100ea565b828001600101855582156100ea579182015b828111156100ea5782518255916020019190600101906100cf565b506100f69291506100fa565b5090565b61011491905b808211156100f65760008155600101610100565b90565b6102f9806101266000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80631817835814610067578063486ff0cd14610071578063572b6c05146100ee5780637da0a87714610128578063c79f8b621461014c578063dfc32df614610154575b600080fd5b61006f61015c565b005b610079610186565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100b357818101518382015260200161009b565b50505050905090810190601f1680156100e05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101146004803603602081101561010457600080fd5b50356001600160a01b0316610213565b604080519115158252519081900360200190f35b610130610227565b604080516001600160a01b039092168252519081900360200190f35b61006f610236565b610130610283565b610164610292565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b60018054604080516020600284861615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561020b5780601f106101e05761010080835404028352916020019161020b565b820191906000526020600020905b8154815290600101906020018083116101ee57829003601f168201915b505050505081565b6000546001600160a01b0390811691161490565b6000546001600160a01b031681565b6040805162461bcd60e51b815260206004820152601a60248201527f4d6574615478526563697069656e744d6f636b3a204572726f72000000000000604482015290519081900360640190fd5b6002546001600160a01b031681565b6000601836108015906102a957506102a933610213565b156102bd575060131936013560601c6102c0565b50335b9056fea2646970667358221220510dfd7a624bd4519616ea3305c8774d255f934697d513f68cb2b4717346dfb064736f6c63430006090033\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Signer, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { MultiTokenMediatorMock } from \"../MultiTokenMediatorMock\";\n\nexport class MultiTokenMediatorMock__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<MultiTokenMediatorMock> {\n    return super.deploy(overrides || {}) as Promise<MultiTokenMediatorMock>;\n  }\n  getDeployTransaction(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  attach(address: string): MultiTokenMediatorMock {\n    return super.attach(address) as MultiTokenMediatorMock;\n  }\n  connect(signer: Signer): MultiTokenMediatorMock__factory {\n    return super.connect(signer) as MultiTokenMediatorMock__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): MultiTokenMediatorMock {\n    return new Contract(\n      address,\n      _abi,\n      signerOrProvider\n    ) as MultiTokenMediatorMock;\n  }\n}\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"receiver\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"relayTokens\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x608060405234801561001057600080fd5b506101a6806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063ad58bdd114610030575b600080fd5b61004361003e3660046100cd565b610045565b005b6040516323b872dd60e01b81526001600160a01b038416906323b872dd9061007590339030908690600401610134565b602060405180830381600087803b15801561008f57600080fd5b505af11580156100a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100c7919061010d565b50505050565b6000806000606084860312156100e1578283fd5b83356100ec81610158565b925060208401356100fc81610158565b929592945050506040919091013590565b60006020828403121561011e578081fd5b8151801515811461012d578182fd5b9392505050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b038116811461016d57600080fd5b5056fea26469706673582212204ce685878a2d60778242e9dd800f027e64791dfd66d77b4081999e5220667fa864736f6c63430006090033\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Signer, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { PerpTokenMock } from \"../PerpTokenMock\";\n\nexport class PerpTokenMock__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<PerpTokenMock> {\n    return super.deploy(overrides || {}) as Promise<PerpTokenMock>;\n  }\n  getDeployTransaction(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  attach(address: string): PerpTokenMock {\n    return super.attach(address) as PerpTokenMock;\n  }\n  connect(signer: Signer): PerpTokenMock__factory {\n    return super.connect(signer) as PerpTokenMock__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): PerpTokenMock {\n    return new Contract(address, _abi, signerOrProvider) as PerpTokenMock;\n  }\n}\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_totalSupply\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"setTotalSupply\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x608060405234801561001057600080fd5b5060c38061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c806318160ddd146037578063f7ea7a3d146051575b600080fd5b603d6062565b604051604891906084565b60405180910390f35b6060605c366004606d565b6068565b005b60005481565b600055565b600060208284031215607d578081fd5b5035919050565b9081526020019056fea2646970667358221220f0bf73f4823b7d4240a18d1e8f826c9f325802b22a49552d4d3915f32f24a2b464736f6c63430006090033\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport {\n  Signer,\n  BigNumberish,\n  Contract,\n  ContractFactory,\n  Overrides,\n} from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { PriceFeedMock } from \"../PriceFeedMock\";\n\nexport class PriceFeedMock__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    _price: BigNumberish,\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<PriceFeedMock> {\n    return super.deploy(_price, overrides || {}) as Promise<PriceFeedMock>;\n  }\n  getDeployTransaction(\n    _price: BigNumberish,\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(_price, overrides || {});\n  }\n  attach(address: string): PriceFeedMock {\n    return super.attach(address) as PriceFeedMock;\n  }\n  connect(signer: Signer): PriceFeedMock__factory {\n    return super.connect(signer) as PriceFeedMock__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): PriceFeedMock {\n    return new Contract(address, _abi, signerOrProvider) as PriceFeedMock;\n  }\n}\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_price\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"getPrice\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_price\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"setPrice\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x608060405234801561001057600080fd5b506040516101073803806101078339818101604052602081101561003357600080fd5b505160005560c1806100466000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c806331d98b3f14603757806391b7f5ed146063575b600080fd5b605160048036036020811015604b57600080fd5b5035607f565b60408051918252519081900360200190f35b607d60048036036020811015607757600080fd5b50356086565b005b5060005490565b60005556fea264697066735822122026c43abe6e9adc3bf29b730c389e9c0103ce3b661e1916f16b0717c5e8f6227f64736f6c63430006090033\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Signer, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { RootBridgeMock } from \"../RootBridgeMock\";\n\nexport class RootBridgeMock__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<RootBridgeMock> {\n    return super.deploy(overrides || {}) as Promise<RootBridgeMock>;\n  }\n  getDeployTransaction(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  attach(address: string): RootBridgeMock {\n    return super.attach(address) as RootBridgeMock;\n  }\n  connect(signer: Signer): RootBridgeMock__factory {\n    return super.connect(signer) as RootBridgeMock__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): RootBridgeMock {\n    return new Contract(address, _abi, signerOrProvider) as RootBridgeMock;\n  }\n}\n\nconst _abi = [\n  {\n    inputs: [],\n    name: \"messageId\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_num\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"mockSetMessageId\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"price\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_priceFeedAddrOnL2\",\n        type: \"address\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"_priceFeedKey\",\n        type: \"bytes32\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_price\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_timestamp\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_roundId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"updatePriceFeed\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x608060405234801561001057600080fd5b50610177806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80635f4607f414610051578063669f618b1461007a57806398ddfc4014610082578063a035b1fe14610097575b600080fd5b61006461005f3660046100be565b61009f565b6040516100719190610138565b60405180910390f35b6100646100ad565b610095610090366004610120565b6100b3565b005b6100646100b8565b505035603455505060335490565b60335481565b603355565b60345481565b600080600080600085870360a08112156100d6578182fd5b86356001600160a01b03811681146100ec578283fd5b95506020878101359550603f1982011215610105578182fd5b50939692955050506040830192606081013592506080013590565b600060208284031215610131578081fd5b5035919050565b9081526020019056fea2646970667358221220b085edffde5ad83fd1e153dc9158bd4928377bc34468fb520d71ee115035334564736f6c63430006090033\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Signer, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { StakedPerpTokenMock } from \"../StakedPerpTokenMock\";\n\nexport class StakedPerpTokenMock__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<StakedPerpTokenMock> {\n    return super.deploy(overrides || {}) as Promise<StakedPerpTokenMock>;\n  }\n  getDeployTransaction(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  attach(address: string): StakedPerpTokenMock {\n    return super.attach(address) as StakedPerpTokenMock;\n  }\n  connect(signer: Signer): StakedPerpTokenMock__factory {\n    return super.connect(signer) as StakedPerpTokenMock__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): StakedPerpTokenMock {\n    return new Contract(address, _abi, signerOrProvider) as StakedPerpTokenMock;\n  }\n}\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"balance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_staker\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_staker\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_balance\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"mock_setBalance\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_totalSupply\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"mock_setTotalSupply\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x608060405234801561001057600080fd5b506101dc806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806318160ddd1461005c578063450ceca71461007a57806370a082311461008f578063b42e3161146100a2578063e3d670d7146100b5575b600080fd5b6100646100c8565b604051610071919061019d565b60405180910390f35b61008d61008836600461015b565b6100ce565b005b61006461009d366004610139565b6100ea565b61008d6100b0366004610185565b610105565b6100646100c3366004610139565b61010a565b60005481565b6001600160a01b03909116600090815260016020526040902055565b6001600160a01b031660009081526001602052604090205490565b600055565b60016020526000908152604090205481565b80356001600160a01b038116811461013357600080fd5b92915050565b60006020828403121561014a578081fd5b610154838361011c565b9392505050565b6000806040838503121561016d578081fd5b610177848461011c565b946020939093013593505050565b600060208284031215610196578081fd5b5035919050565b9081526020019056fea26469706673582212206020cecfa3d4f5ef1d56079f387498bcaf82679a39db026d944beca8d83398fc64736f6c63430006090033\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Signer, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { PerpFiOwnableUpgradeFake } from \"../PerpFiOwnableUpgradeFake\";\n\nexport class PerpFiOwnableUpgradeFake__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<PerpFiOwnableUpgradeFake> {\n    return super.deploy(overrides || {}) as Promise<PerpFiOwnableUpgradeFake>;\n  }\n  getDeployTransaction(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  attach(address: string): PerpFiOwnableUpgradeFake {\n    return super.attach(address) as PerpFiOwnableUpgradeFake;\n  }\n  connect(signer: Signer): PerpFiOwnableUpgradeFake__factory {\n    return super.connect(signer) as PerpFiOwnableUpgradeFake__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): PerpFiOwnableUpgradeFake {\n    return new Contract(\n      address,\n      _abi,\n      signerOrProvider\n    ) as PerpFiOwnableUpgradeFake;\n  }\n}\n\nconst _abi = [\n  {\n    inputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"candidate\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"setOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"updateOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x608060405234801561001057600080fd5b50610776806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806313af4035146100675780636c8381f81461007c578063715018a61461009a5780638129fc1c146100a25780638da5cb5b146100aa578063bc5920ba146100b2575b600080fd5b61007a6100753660046104fe565b6100ba565b005b61008461019c565b604051610091919061052c565b60405180910390f35b61007a6101ab565b61007a61022a565b610084610234565b61007a610243565b6100c2610306565b6065546001600160a01b039081169116146100f85760405162461bcd60e51b81526004016100ef906106ad565b60405180910390fd5b6001600160a01b03811661011e5760405162461bcd60e51b81526004016100ef906105ce565b6065546001600160a01b038281169116141561014c5760405162461bcd60e51b81526004016100ef906106fa565b6066546001600160a01b038281169116141561017a5760405162461bcd60e51b81526004016100ef90610540565b606680546001600160a01b0319166001600160a01b0392909216919091179055565b6066546001600160a01b031690565b6101b3610306565b6065546001600160a01b039081169116146101e05760405162461bcd60e51b81526004016100ef906106ad565b6065546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3606580546001600160a01b0319169055565b61023261030a565b565b6065546001600160a01b031690565b6066546001600160a01b031661026b5760405162461bcd60e51b81526004016100ef9061065e565b610273610306565b6066546001600160a01b039081169116146102a05760405162461bcd60e51b81526004016100ef90610587565b6066546065546040516001600160a01b0392831692909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360668054606580546001600160a01b03199081166001600160a01b03841617909155169055565b3390565b600054610100900460ff1680610323575061032361039d565b80610331575060005460ff16155b61034d5760405162461bcd60e51b81526004016100ef90610610565b600054610100900460ff16158015610378576000805460ff1961ff0019909116610100171660011790555b6103806103a3565b610388610424565b801561039a576000805461ff00191690555b50565b303b1590565b600054610100900460ff16806103bc57506103bc61039d565b806103ca575060005460ff16155b6103e65760405162461bcd60e51b81526004016100ef90610610565b600054610100900460ff16158015610388576000805460ff1961ff001990911661010017166001179055801561039a576000805461ff001916905550565b600054610100900460ff168061043d575061043d61039d565b8061044b575060005460ff16155b6104675760405162461bcd60e51b81526004016100ef90610610565b600054610100900460ff16158015610492576000805460ff1961ff0019909116610100171660011790555b600061049c610306565b606580546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350801561039a576000805461ff001916905550565b60006020828403121561050f578081fd5b81356001600160a01b0381168114610525578182fd5b9392505050565b6001600160a01b0391909116815260200190565b60208082526027908201527f5065727046694f776e61626c65557067726164653a2073616d652061732063616040820152666e64696461746560c81b606082015260800190565b60208082526027908201527f5065727046694f776e61626c65557067726164653a206e6f7420746865206e656040820152663b9037bbb732b960c91b606082015260800190565b60208082526022908201527f5065727046694f776e61626c65557067726164653a207a65726f206164647265604082015261737360f01b606082015260800190565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201526d195b881a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602f908201527f5065727046694f776e61626c65557067726164653a2063616e6469646174652060408201526e6973207a65726f206164647265737360881b606082015260800190565b6020808252602d908201527f5065727046694f776e61626c65557067726164653a2063616c6c65722069732060408201526c3737ba103a34329037bbb732b960991b606082015260800190565b60208082526026908201527f5065727046694f776e61626c65557067726164653a2073616d65206173206f726040820152651a59da5b985b60d21b60608201526080019056fea264697066735822122050999cca73b5d7e84f99894dd01ff9a601adb7ede455fc97055d57fb145c40ad64736f6c63430006090033\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Signer, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { PerpRewardVestingFake } from \"../PerpRewardVestingFake\";\n\nexport class PerpRewardVestingFake__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<PerpRewardVestingFake> {\n    return super.deploy(overrides || {}) as Promise<PerpRewardVestingFake>;\n  }\n  getDeployTransaction(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  attach(address: string): PerpRewardVestingFake {\n    return super.attach(address) as PerpRewardVestingFake;\n  }\n  connect(signer: Signer): PerpRewardVestingFake__factory {\n    return super.connect(signer) as PerpRewardVestingFake__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): PerpRewardVestingFake {\n    return new Contract(\n      address,\n      _abi,\n      signerOrProvider\n    ) as PerpRewardVestingFake;\n  }\n}\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"_claimant\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"_balance\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Claimed\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"candidate\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_liquidityProvider\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_begin\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_end\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"claimStatus\",\n    outputs: [\n      {\n        internalType: \"bool[]\",\n        name: \"\",\n        type: \"bool[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_account\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_week\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_claimedBalance\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes32[]\",\n        name: \"_merkleProof\",\n        type: \"bytes32[]\",\n      },\n    ],\n    name: \"claimWeek\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_account\",\n        type: \"address\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"week\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"balance\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"bytes32[]\",\n            name: \"merkleProof\",\n            type: \"bytes32[]\",\n          },\n        ],\n        internalType: \"struct MerkleRedeemUpgradeSafe.Claim[]\",\n        name: \"_claims\",\n        type: \"tuple[]\",\n      },\n    ],\n    name: \"claimWeeks\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"claimed\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getLengthOfMerkleRoots\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"_token\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_vestingPeriod\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"merkleRootIndexes\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"merkleRootTimestampMap\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_begin\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_end\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"merkleRoots\",\n    outputs: [\n      {\n        internalType: \"bytes32[]\",\n        name: \"\",\n        type: \"bytes32[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"mock_getCurrentBlockNumber\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"mock_getCurrentTimestamp\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_number\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"mock_setBlockNumber\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_timestamp\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"mock_setBlockTimestamp\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_week\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"_merkleRoot\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_totalAllocation\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"seedAllocations\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"setOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"token\",\n    outputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"updateOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_liquidityProvider\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_week\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_claimedBalance\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes32[]\",\n        name: \"_merkleProof\",\n        type: \"bytes32[]\",\n      },\n    ],\n    name: \"verifyClaim\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"valid\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"vestingPeriod\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"weekMerkleRoots\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x6080604052635611c230610135556127116101365534801561002057600080fd5b506116b5806100306000396000f3fe608060405234801561001057600080fd5b506004361061014c5760003560e01c80637313ee5a116100c3578063cd6dc6871161007c578063cd6dc68714610288578063dd8c9c9d1461029b578063e2bd3e35146102ae578063eb0d07f5146102c1578063f373579f146102d4578063fc0c546a146102e75761014c565b80637313ee5a146102425780638da5cb5b1461024a5780639432665a14610252578063bc5920ba14610265578063c77f7c611461026d578063c804c39a146102755761014c565b806339436b001161011557806339436b00146101bf57806347fb23c1146101df5780634cd488ab146101ff57806358b4e4b4146102125780636c8381f814610225578063715018a61461023a5761014c565b8062c141b6146101515780630933838314610166578063120aa8771461018457806313af4035146101a457806339144f50146101b7575b600080fd5b61016461015f36600461116b565b6102ef565b005b61016e6102f5565b60405161017b91906112d8565b60405180910390f35b610197610192366004611183565b610304565b60405161017b91906112cd565b6101646101b2366004610f87565b610324565b61016e610406565b6101d26101cd3660046111dd565b61040d565b60405161017b9190611295565b6101f26101ed36600461108b565b6104a1565b60405161017b919061124f565b61016461020d3660046111b2565b610555565b6101646102203660046110bf565b6105fa565b61022d61065c565b60405161017b91906111fe565b61016461066b565b61016e6106ea565b61022d6106f1565b61016461026036600461116b565b610700565b610164610706565b61016e6107c9565b610164610283366004610fa3565b6107d3565b610164610296366004611140565b61083d565b61016e6102a936600461116b565b6108f6565b61016e6102bc36600461116b565b610908565b6101976102cf3660046110bf565b61091b565b61016e6102e236600461116b565b610925565b61022d610944565b61013655565b60006102ff610953565b905090565b609a60209081526000928352604080842090915290825290205460ff1681565b61032c61095a565b6065546001600160a01b039081169116146103625760405162461bcd60e51b815260040161035990611590565b60405180910390fd5b6001600160a01b0381166103885760405162461bcd60e51b815260040161035990611426565b6065546001600160a01b03828116911614156103b65760405162461bcd60e51b8152600401610359906115dd565b6066546001600160a01b03828116911614156103e45760405162461bcd60e51b815260040161035990611348565b606680546001600160a01b0319166001600160a01b0392909216919091179055565b6101015490565b6060828203600101818167ffffffffffffffff8111801561042d57600080fd5b50604051908082528060200260200182016040528015610457578160200160208202803683370190505b50905060005b8281101561049857858101600090815260996020526040902054825183908390811061048557fe5b602090810291909101015260010161045d565b50949350505050565b6060828203600101818167ffffffffffffffff811180156104c157600080fd5b506040519080825280602002602001820160405280156104eb578160200160208202803683370190505b50905060005b8281101561054b578581016000908152609a602090815260408083206001600160a01b038b168452909152902054825160ff9091169083908390811061053357fe5b911515602092830291909101909101526001016104f1565b5095945050505050565b61055d61095a565b6065546001600160a01b0390811691161461058a5760405162461bcd60e51b815260040161035990611590565b61059583838361095e565b6105b0610102546105a4610a3e565b9063ffffffff610a4516565b60008481526101006020526040812091909155610101805460018101825591527f109ea3cebb188b9c1b9fc5bb3920be60dfdc8699098dff92f3d80daaca74768901929092555050565b60008381526101006020526040902054610612610a3e565b1015801561062e57506000838152610100602052604090205415155b61064a5760405162461bcd60e51b8152600401610359906113d6565b61065684848484610a71565b50505050565b6066546001600160a01b031690565b61067361095a565b6065546001600160a01b039081169116146106a05760405162461bcd60e51b815260040161035990611590565b6065546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3606580546001600160a01b0319169055565b6101025481565b6065546001600160a01b031690565b61013555565b6066546001600160a01b031661072e5760405162461bcd60e51b815260040161035990611541565b61073661095a565b6066546001600160a01b039081169116146107635760405162461bcd60e51b81526004016103599061138f565b6066546065546040516001600160a01b0392831692909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360668054606580546001600160a01b03199081166001600160a01b03841617909155169055565b60006102ff610a3e565b60005b815181101561083857610830838383815181106107ef57fe5b60200260200101516000015184848151811061080757fe5b60200260200101516020015185858151811061081f57fe5b6020026020010151604001516105fa565b6001016107d6565b505050565b600054610100900460ff16806108565750610856610b13565b80610864575060005460ff16155b6108805760405162461bcd60e51b815260040161035990611468565b600054610100900460ff161580156108ab576000805460ff1961ff0019909116610100171660011790555b6001600160a01b0383166108d15760405162461bcd60e51b8152600401610359906114b6565b6108da83610b19565b6101028290558015610838576000805461ff0019169055505050565b60996020526000908152604090205481565b6101006020526000908152604090205481565b6001949350505050565b610101818154811061093357fe5b600091825260209091200154905081565b609b546001600160a01b031681565b6101365490565b3390565b6000838152609960205260409020541561098a5760405162461bcd60e51b81526004016103599061150a565b60008381526099602052604090819020839055609b5490516323b872dd60e01b81526001600160a01b03909116906323b872dd906109d090339030908690600401611212565b602060405180830381600087803b1580156109ea57600080fd5b505af11580156109fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a229190611120565b6108385760405162461bcd60e51b8152600401610359906114dd565b6101355490565b600082820183811015610a6a5760405162461bcd60e51b815260040161035990611311565b9392505050565b6000838152609a602090815260408083206001600160a01b038816845290915290205460ff1615610ab45760405162461bcd60e51b8152600401610359906113fd565b610ac08484848461091b565b610adc5760405162461bcd60e51b8152600401610359906112e1565b6000838152609a602090815260408083206001600160a01b03881684529091529020805460ff191660011790556106568483610bae565b303b1590565b600054610100900460ff1680610b325750610b32610b13565b80610b40575060005460ff16155b610b5c5760405162461bcd60e51b815260040161035990611468565b600054610100900460ff16158015610b87576000805460ff1961ff0019909116610100171660011790555b610b8f610c8d565b610b9882610d20565b8015610baa576000805461ff00191690555b5050565b8015610baa577fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a8282604051610be5929190611236565b60405180910390a1609b5460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90610c1f9085908590600401611236565b602060405180830381600087803b158015610c3957600080fd5b505af1158015610c4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c719190611120565b610baa5760405162461bcd60e51b8152600401610359906114dd565b600054610100900460ff1680610ca65750610ca6610b13565b80610cb4575060005460ff16155b610cd05760405162461bcd60e51b815260040161035990611468565b600054610100900460ff16158015610cfb576000805460ff1961ff0019909116610100171660011790555b610d03610dbe565b610d0b610e3f565b8015610d1d576000805461ff00191690555b50565b600054610100900460ff1680610d395750610d39610b13565b80610d47575060005460ff16155b610d635760405162461bcd60e51b815260040161035990611468565b600054610100900460ff16158015610d8e576000805460ff1961ff0019909116610100171660011790555b609b80546001600160a01b0319166001600160a01b0384161790558015610baa576000805461ff00191690555050565b600054610100900460ff1680610dd75750610dd7610b13565b80610de5575060005460ff16155b610e015760405162461bcd60e51b815260040161035990611468565b600054610100900460ff16158015610d0b576000805460ff1961ff0019909116610100171660011790558015610d1d576000805461ff001916905550565b600054610100900460ff1680610e585750610e58610b13565b80610e66575060005460ff16155b610e825760405162461bcd60e51b815260040161035990611468565b600054610100900460ff16158015610ead576000805460ff1961ff0019909116610100171660011790555b6000610eb761095a565b606580546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015610d1d576000805461ff001916905550565b600082601f830112610f29578081fd5b8135610f3c610f378261164a565b611623565b818152915060208083019084810181840286018201871015610f5d57600080fd5b60005b84811015610f7c57813584529282019290820190600101610f60565b505050505092915050565b600060208284031215610f98578081fd5b8135610a6a8161166a565b60008060408385031215610fb5578081fd5b8235610fc08161166a565b915060208381013567ffffffffffffffff80821115610fdd578384fd5b81860187601f820112610fee578485fd5b80359250610ffe610f378461164a565b83815284810190828601875b8681101561107a57813585016060818e03601f1901121561102957898afd5b6110336060611623565b89820135815260408201358a820152606082013588811115611053578b8cfd5b6110618f8c83860101610f19565b604083015250855250928701929087019060010161100a565b50979a909950975050505050505050565b60008060006060848603121561109f578081fd5b83356110aa8161166a565b95602085013595506040909401359392505050565b600080600080608085870312156110d4578081fd5b84356110df8161166a565b93506020850135925060408501359150606085013567ffffffffffffffff811115611108578182fd5b61111487828801610f19565b91505092959194509250565b600060208284031215611131578081fd5b81518015158114610a6a578182fd5b60008060408385031215611152578182fd5b823561115d8161166a565b946020939093013593505050565b60006020828403121561117c578081fd5b5035919050565b60008060408385031215611195578182fd5b8235915060208301356111a78161166a565b809150509250929050565b6000806000606084860312156111c6578283fd5b505081359360208301359350604090920135919050565b600080604083850312156111ef578182fd5b50508035926020909101359150565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b8181101561128957835115158352928401929184019160010161126b565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b81811015611289578351835292840192918401916001016112b1565b901515815260200190565b90815260200190565b60208082526016908201527524b731b7b93932b1ba1036b2b935b63290383937b7b360511b604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526027908201527f5065727046694f776e61626c65557067726164653a2073616d652061732063616040820152666e64696461746560c81b606082015260800190565b60208082526027908201527f5065727046694f776e61626c65557067726164653a206e6f7420746865206e656040820152663b9037bbb732b960c91b606082015260800190565b6020808252600d908201526c496e76616c696420636c61696d60981b604082015260600190565b6020808252600f908201526e436c61696d656420616c726561647960881b604082015260600190565b60208082526022908201527f5065727046694f776e61626c65557067726164653a207a65726f206164647265604082015261737360f01b606082015260800190565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201526d195b881a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252600d908201526c125b9d985b1a59081a5b9c1d5d609a1b604082015260600190565b60208082526013908201527211549497d514905394d1915497d19052531151606a1b604082015260600190565b6020808252601a908201527f63616e6e6f742072657772697465206d65726b6c6520726f6f74000000000000604082015260600190565b6020808252602f908201527f5065727046694f776e61626c65557067726164653a2063616e6469646174652060408201526e6973207a65726f206164647265737360881b606082015260800190565b6020808252602d908201527f5065727046694f776e61626c65557067726164653a2063616c6c65722069732060408201526c3737ba103a34329037bbb732b960991b606082015260800190565b60208082526026908201527f5065727046694f776e61626c65557067726164653a2073616d65206173206f726040820152651a59da5b985b60d21b606082015260800190565b60405181810167ffffffffffffffff8111828210171561164257600080fd5b604052919050565b600067ffffffffffffffff821115611660578081fd5b5060209081020190565b6001600160a01b0381168114610d1d57600080fdfea2646970667358221220a894a65821654b7877bc4d16ccaad26bb57327357389f42a2ba10d6e49e10c4864736f6c63430006090033\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer } from \"ethers\";\nimport { Provider } from \"@ethersproject/providers\";\n\nimport type { ERC20 } from \"../ERC20\";\n\nexport class ERC20__factory {\n  static connect(address: string, signerOrProvider: Signer | Provider): ERC20 {\n    return new Contract(address, _abi, signerOrProvider) as ERC20;\n  }\n}\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"_totalSupply\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"who\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport {\n  Signer,\n  BigNumberish,\n  Contract,\n  ContractFactory,\n  Overrides,\n} from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { PerpToken } from \"../PerpToken\";\n\nexport class PerpToken__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    _initialSupply: BigNumberish,\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<PerpToken> {\n    return super.deploy(_initialSupply, overrides || {}) as Promise<PerpToken>;\n  }\n  getDeployTransaction(\n    _initialSupply: BigNumberish,\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(_initialSupply, overrides || {});\n  }\n  attach(address: string): PerpToken {\n    return super.attach(address) as PerpToken;\n  }\n  connect(signer: Signer): PerpToken__factory {\n    return super.connect(signer) as PerpToken__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): PerpToken {\n    return new Contract(address, _abi, signerOrProvider) as PerpToken;\n  }\n}\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_initialSupply\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_minter\",\n        type: \"address\",\n      },\n    ],\n    name: \"addMinter\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"candidate\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        internalType: \"uint8\",\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"subtractedValue\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"decreaseAllowance\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"addedValue\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"increaseAllowance\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"mint\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"minters\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_minter\",\n        type: \"address\",\n      },\n    ],\n    name: \"removeMinter\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"setOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"updateOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x60806040523480156200001157600080fd5b506040516200154538038062001545833981810160405260208110156200003757600080fd5b5051604080518082018252600981526814195c9c195d1d585b60ba1b6020828101918252835180850190945260048452630504552560e41b9084015281519192916200008691600391620002b7565b5080516200009c906004906020840190620002b7565b50506005805460ff19166012179055506000620000c16001600160e01b036200013316565b60058054610100600160a81b0319166101006001600160a01b03841690810291909117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506200012c33826001600160e01b036200013816565b5062000359565b335b90565b6001600160a01b03821662000194576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b620001ab600083836001600160e01b036200025016565b620001c7816002546200025560201b62000c071790919060201c565b6002556001600160a01b03821660009081526020818152604090912054620001fa91839062000c0762000255821b17901c565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b505050565b600082820183811015620002b0576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002fa57805160ff19168380011785556200032a565b828001600101855582156200032a579182015b828111156200032a5782518255916020019190600101906200030d565b50620003389291506200033c565b5090565b6200013591905b8082111562000338576000815560010162000343565b6111dc80620003696000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c806370a08231116100ad578063a457c2d711610071578063a457c2d71461038a578063a9059cbb146103b6578063bc5920ba146103e2578063dd62ed3e146103ea578063f46eccc4146104185761012c565b806370a0823114610326578063715018a61461034c5780638da5cb5b1461035457806395d89b411461035c578063983b2d56146103645761012c565b80633092afd5116100f45780633092afd514610266578063313ce5671461028c57806339509351146102aa57806340c10f19146102d65780636c8381f8146103025761012c565b806306fdde0314610131578063095ea7b3146101ae57806313af4035146101ee57806318160ddd1461021657806323b872dd14610230575b600080fd5b61013961043e565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561017357818101518382015260200161015b565b50505050905090810190601f1680156101a05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101da600480360360408110156101c457600080fd5b506001600160a01b0381351690602001356104d4565b604080519115158252519081900360200190f35b6102146004803603602081101561020457600080fd5b50356001600160a01b03166104f1565b005b61021e610692565b60408051918252519081900360200190f35b6101da6004803603606081101561024657600080fd5b506001600160a01b03813581169160208101359091169060400135610698565b6102146004803603602081101561027c57600080fd5b50356001600160a01b0316610725565b61029461079f565b6040805160ff9092168252519081900360200190f35b6101da600480360360408110156102c057600080fd5b506001600160a01b0381351690602001356107a8565b610214600480360360408110156102ec57600080fd5b506001600160a01b0381351690602001356107fc565b61030a610858565b604080516001600160a01b039092168252519081900360200190f35b61021e6004803603602081101561033c57600080fd5b50356001600160a01b0316610867565b610214610882565b61030a61092b565b61013961093f565b6102146004803603602081101561037a57600080fd5b50356001600160a01b03166109a0565b6101da600480360360408110156103a057600080fd5b506001600160a01b038135169060200135610a1d565b6101da600480360360408110156103cc57600080fd5b506001600160a01b038135169060200135610a8b565b610214610a9f565b61021e6004803603604081101561040057600080fd5b506001600160a01b0381358116916020013516610bc7565b6101da6004803603602081101561042e57600080fd5b50356001600160a01b0316610bf2565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104ca5780601f1061049f576101008083540402835291602001916104ca565b820191906000526020600020905b8154815290600101906020018083116104ad57829003601f168201915b5050505050905090565b60006104e86104e1610c68565b8484610c6c565b50600192915050565b6104f9610c68565b60055461010090046001600160a01b0390811691161461054a5760405162461bcd60e51b81526004018080602001828103825260268152602001806110c36026913960400191505060405180910390fd5b6001600160a01b0381166105a5576040805162461bcd60e51b815260206004820152601b60248201527f5065727046694f776e61626c653a207a65726f20616464726573730000000000604482015290519081900360640190fd5b6005546001600160a01b0382811661010090920416141561060d576040805162461bcd60e51b815260206004820152601f60248201527f5065727046694f776e61626c653a2073616d65206173206f726967696e616c00604482015290519081900360640190fd5b6006546001600160a01b0382811691161415610670576040805162461bcd60e51b815260206004820181905260248201527f5065727046694f776e61626c653a2073616d652061732063616e646964617465604482015290519081900360640190fd5b600680546001600160a01b0319166001600160a01b0392909216919091179055565b60025490565b60006106a5848484610d58565b61071b846106b1610c68565b610716856040518060600160405280602881526020016110e9602891396001600160a01b038a166000908152600160205260408120906106ef610c68565b6001600160a01b03168152602081019190915260400160002054919063ffffffff610ebf16565b610c6c565b5060019392505050565b61072d610c68565b60055461010090046001600160a01b0390811691161461077e5760405162461bcd60e51b81526004018080602001828103825260268152602001806110c36026913960400191505060405180910390fd5b6001600160a01b03166000908152600760205260409020805460ff19169055565b60055460ff1690565b60006104e86107b5610c68565b8461071685600160006107c6610c68565b6001600160a01b03908116825260208083019390935260409182016000908120918c16815292529020549063ffffffff610c0716565b3360009081526007602052604090205460ff1661084a576040805162461bcd60e51b815260206004820152600760248201526610b6b4b73a32b960c91b604482015290519081900360640190fd5b6108548282610f56565b5050565b6006546001600160a01b031690565b6001600160a01b031660009081526020819052604090205490565b61088a610c68565b60055461010090046001600160a01b039081169116146108db5760405162461bcd60e51b81526004018080602001828103825260268152602001806110c36026913960400191505060405180910390fd5b60055460405160009161010090046001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a360058054610100600160a81b0319169055565b60055461010090046001600160a01b031690565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104ca5780601f1061049f576101008083540402835291602001916104ca565b6109a8610c68565b60055461010090046001600160a01b039081169116146109f95760405162461bcd60e51b81526004018080602001828103825260268152602001806110c36026913960400191505060405180910390fd5b6001600160a01b03166000908152600760205260409020805460ff19166001179055565b60006104e8610a2a610c68565b84610716856040518060600160405280602581526020016111826025913960016000610a54610c68565b6001600160a01b03908116825260208083019390935260409182016000908120918d1681529252902054919063ffffffff610ebf16565b60006104e8610a98610c68565b8484610d58565b6006546001600160a01b0316610ae65760405162461bcd60e51b815260040180806020018281038252602881526020018061115a6028913960400191505060405180910390fd5b610aee610c68565b6006546001600160a01b03908116911614610b50576040805162461bcd60e51b815260206004820181905260248201527f5065727046694f776e61626c653a206e6f7420746865206e6577206f776e6572604482015290519081900360640190fd5b6006546005546040516001600160a01b0392831692610100909204909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36006805460058054610100600160a81b0319166101006001600160a01b038416021790556001600160a01b0319169055565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60076020526000908152604090205460ff1681565b600082820183811015610c61576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b3390565b6001600160a01b038316610cb15760405162461bcd60e51b81526004018080602001828103825260248152602001806111366024913960400191505060405180910390fd5b6001600160a01b038216610cf65760405162461bcd60e51b815260040180806020018281038252602281526020018061107b6022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b038316610d9d5760405162461bcd60e51b81526004018080602001828103825260258152602001806111116025913960400191505060405180910390fd5b6001600160a01b038216610de25760405162461bcd60e51b81526004018080602001828103825260238152602001806110586023913960400191505060405180910390fd5b610ded838383611052565b610e308160405180606001604052806026815260200161109d602691396001600160a01b038616600090815260208190526040902054919063ffffffff610ebf16565b6001600160a01b038085166000908152602081905260408082209390935590841681522054610e65908263ffffffff610c0716565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008184841115610f4e5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610f13578181015183820152602001610efb565b50505050905090810190601f168015610f405780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6001600160a01b038216610fb1576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b610fbd60008383611052565b600254610fd0908263ffffffff610c0716565b6002556001600160a01b038216600090815260208190526040902054610ffc908263ffffffff610c0716565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b50505056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63655065727046694f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657245524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f20616464726573735065727046694f776e61626c653a2063616e646964617465206973207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa26469706673582212202e5440ff707d2fc0424101f14d2a0eb051949624ebe19690c236ee4111782c4b64736f6c63430006090033\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Signer, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { RewardsDistributionFake } from \"../RewardsDistributionFake\";\n\nexport class RewardsDistributionFake__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<RewardsDistributionFake> {\n    return super.deploy(overrides || {}) as Promise<RewardsDistributionFake>;\n  }\n  getDeployTransaction(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  attach(address: string): RewardsDistributionFake {\n    return super.attach(address) as RewardsDistributionFake;\n  }\n  connect(signer: Signer): RewardsDistributionFake__factory {\n    return super.connect(signer) as RewardsDistributionFake__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): RewardsDistributionFake {\n    return new Contract(\n      address,\n      _abi,\n      signerOrProvider\n    ) as RewardsDistributionFake;\n  }\n}\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"reward\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"timestamp\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"RewardDistributed\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_destination\",\n        type: \"address\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_amount\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"addRewardsDistribution\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"candidate\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"_perpToken\",\n        type: \"address\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_amount\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"distributeRewards\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"distributions\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"destination\",\n        type: \"address\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"amount\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_index\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_destination\",\n        type: \"address\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_amount\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"editRewardsDistribution\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_rewardsController\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract IRewardRecipient\",\n        name: \"_defaultRecipient\",\n        type: \"address\",\n      },\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"mock_getCurrentTimestamp\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_number\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"mock_setBlockNumber\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_timestamp\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"mock_setBlockTimestamp\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_index\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"removeRewardsDistribution\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"setOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"updateOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x6080604052635611c230610133556127116101345534801561002057600080fd5b50611ad3806100306000396000f3fe608060405234801561001057600080fd5b50600436106100e95760003560e01c8063715018a61161008c578063bb69b09311610066578063bb69b093146101b1578063bc5920ba146101c4578063c77f7c61146101cc578063d34d4c36146101e1576100e9565b8063715018a61461018e5780638da5cb5b146101965780639432665a1461019e576100e9565b80634487d3df116100c85780634487d3df14610129578063485cc955146101535780634e0888ce146101665780636c8381f814610179576100e9565b8062c141b6146100ee578063047709141461010357806313af403514610116575b600080fd5b6101016100fc366004611511565b6101f4565b005b610101610111366004611541565b6101fa565b610101610124366004611468565b6102dd565b61013c610137366004611511565b6103b6565b60405161014a9291906115af565b60405180910390f35b610101610161366004611484565b6103f6565b6101016101743660046114bc565b6104b3565b6101816105d3565b60405161014a919061159b565b6101016105e2565b610181610661565b6101016101ac366004611511565b610670565b6101016101bf366004611511565b610676565b61010161078f565b6101d4610852565b60405161014a9190611a45565b6101016101ef3660046114bc565b610861565b61013455565b610202610bbf565b6065546001600160a01b039081169116146102385760405162461bcd60e51b815260040161022f90611971565b60405180910390fd5b6101005415801590610251575061010054600019018311155b61026d5760405162461bcd60e51b815260040161022f906119be565b81610100848154811061027c57fe5b906000526020600020906002020160000160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508061010084815481106102c057fe5b600091825260209091209151600160029092029092010155505050565b6102e5610bbf565b6065546001600160a01b039081169116146103125760405162461bcd60e51b815260040161022f90611971565b6001600160a01b0381166103385760405162461bcd60e51b815260040161022f90611820565b6065546001600160a01b03828116911614156103665760405162461bcd60e51b815260040161022f906119eb565b6066546001600160a01b03828116911614156103945760405162461bcd60e51b815260040161022f906116e7565b606680546001600160a01b0319166001600160a01b0392909216919091179055565b61010081815481106103c457fe5b6000918252602091829020600290910201805460408051938401905260019091015482526001600160a01b0316915082565b600054610100900460ff168061040f575061040f610bc3565b8061041d575060005460ff16155b6104395760405162461bcd60e51b815260040161022f90611862565b600054610100900460ff16158015610464576000805460ff1961ff0019909116610100171660011790555b61046c610bc9565b60fe80546001600160a01b038086166001600160a01b03199283161790925560ff80549285169290911691909117905580156104ae576000805461ff00191690555b505050565b6104bb610bbf565b6065546001600160a01b039081169116146104e85760405162461bcd60e51b815260040161022f90611971565b6001600160a01b03821661050e5760405162461bcd60e51b815260040161022f906116b0565b61051781610c5c565b6105335760405162461bcd60e51b815260040161022f906118b0565b61053b6113f0565b50604080518082019091526001600160a01b03928316815260208101918252610100805460018101825560009190915290517f45e010b9ae401e2eb71529478da8bd513a9bdc2d095a111e324f5b95c09ed87b600290920291820180546001600160a01b031916919094161790925551517f45e010b9ae401e2eb71529478da8bd513a9bdc2d095a111e324f5b95c09ed87c90910155565b6066546001600160a01b031690565b6105ea610bbf565b6065546001600160a01b039081169116146106175760405162461bcd60e51b815260040161022f90611971565b6065546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3606580546001600160a01b0319169055565b6065546001600160a01b031690565b61013355565b61067e610bbf565b6065546001600160a01b039081169116146106ab5760405162461bcd60e51b815260040161022f90611971565b61010054158015906106c4575061010054600019018111155b6106e05760405162461bcd60e51b815260040161022f906119be565b6101005460001901811015610757576101008054600019810190811061070257fe5b9060005260206000209060020201610100828154811061071e57fe5b60009182526020909120825460029092020180546001600160a01b0319166001600160a01b039092169190911781556001918201549101555b61010080548061076357fe5b60008281526020812060026000199093019283020180546001600160a01b031916815560010155905550565b6066546001600160a01b03166107b75760405162461bcd60e51b815260040161022f90611922565b6107bf610bbf565b6066546001600160a01b039081169116146107ec5760405162461bcd60e51b815260040161022f9061172e565b6066546065546040516001600160a01b0392831692909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360668054606580546001600160a01b03199081166001600160a01b03841617909155169055565b600061085c610c60565b905090565b60fe546001600160a01b0316610875610bbf565b6001600160a01b03161461089b5760405162461bcd60e51b815260040161022f90611615565b6108a481610c5c565b6108b66108b18430610c67565b610c5c565b10156108d45760405162461bcd60e51b815260040161022f906117b6565b6108dc611418565b508060005b61010054811015610af45760006001600160a01b0316610100828154811061090557fe5b60009182526020909120600290910201546001600160a01b031614801590610961575061095e610100828154811061093957fe5b6000918252602091829020604080519384019052600160029092020101548152610c5c565b15155b15610aec576109a4610100828154811061097757fe5b6000918252602091829020604080519384019052600160029092020101548152839063ffffffff610cfd16565b9150610a098461010083815481106109b857fe5b600091825260209091206002909102015461010080546001600160a01b0390921691859081106109e457fe5b6000918252602091829020604080519384019052600160029092020101548152610d29565b60606101008281548110610a1957fe5b9060005260206000209060020201600101604051602401610a3a9190611a3b565b60408051601f198184030181529190526020810180516001600160e01b0316633c6b16ab60e01b179052610100805491925060009184908110610a7957fe5b60009182526020909120600290910201546040516001600160a01b0390911690610aa490849061157f565b6000604051808303816000865af19150503d8060008114610ae1576040519150601f19603f3d011682016040523d82523d6000602084013e610ae6565b606091505b50505050505b6001016108e1565b5060ff54610b0d9084906001600160a01b031683610d29565b60ff54604051600162a6079360e01b031981526001600160a01b039091169063ff59f86d90610b40908490600401611a31565b600060405180830381600087803b158015610b5a57600080fd5b505af1158015610b6e573d6000803e3d6000fd5b505050507feaf3d57629d9b1ce95715ccd98d6f5bf48023be1d5a06e09f64ab7f6d8be01d5610b9c83610c5c565b610ba4610c60565b604051610bb2929190611a4e565b60405180910390a1505050565b3390565b303b1590565b600054610100900460ff1680610be25750610be2610bc3565b80610bf0575060005460ff16155b610c0c5760405162461bcd60e51b815260040161022f90611862565b600054610100900460ff16158015610c37576000805460ff1961ff0019909116610100171660011790555b610c3f610e58565b610c47610ed9565b8015610c59576000805461ff00191690555b50565b5190565b6101335490565b610c6f611418565b610cf483846001600160a01b03166370a08231856040518263ffffffff1660e01b8152600401610c9f919061159b565b60206040518083038186803b158015610cb757600080fd5b505afa158015610ccb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cef9190611529565b610fb3565b90505b92915050565b610d05611418565b610d0d611418565b82518451610d209163ffffffff61104516565b81529392505050565b610d3283611087565b610d3a611418565b610d448484610c67565b90506000610d5285846110d4565b905060006060866001600160a01b031663a9059cbb60e01b8785604051602401610d7d9291906115c9565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051610dbb919061157f565b6000604051808303816000865af19150503d8060008114610df8576040519150601f19603f3d011682016040523d82523d6000602084013e610dfd565b606091505b5091509150818015610e27575080511580610e27575080806020019051810190610e2791906114f1565b610e435760405162461bcd60e51b815260040161022f90611642565b610e4f87878587611152565b50505050505050565b600054610100900460ff1680610e715750610e71610bc3565b80610e7f575060005460ff16155b610e9b5760405162461bcd60e51b815260040161022f90611862565b600054610100900460ff16158015610c47576000805460ff1961ff0019909116610100171660011790558015610c59576000805461ff001916905550565b600054610100900460ff1680610ef25750610ef2610bc3565b80610f00575060005460ff16155b610f1c5760405162461bcd60e51b815260040161022f90611862565b600054610100900460ff16158015610f47576000805460ff1961ff0019909116610100171660011790555b6000610f51610bbf565b606580546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015610c59576000805461ff001916905550565b610fbb611418565b6000610fc6846111ab565b90506012811061100b57604080516020810190915280611000610ff084601263ffffffff61104516565b8690600a0a63ffffffff61129816565b815250915050610cf7565b60408051602081019091528061103b61102b60128563ffffffff61104516565b8690600a0a63ffffffff6112da16565b9052949350505050565b6000610cf483836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611314565b6000611092826111ab565b6001600160a01b038316600090815260cb602052604090205490915081146110d0576001600160a01b038216600090815260cb602052604090208190555b5050565b6000806110e0846111ab565b90506012811061111e576111166110fe82601263ffffffff61104516565b600a0a61110a85610c5c565b9063ffffffff6112da16565b915050610cf7565b61114a61113260128363ffffffff61104516565b600a0a61113e85610c5c565b9063ffffffff61129816565b949350505050565b61118561116f6111628685610fb3565b839063ffffffff61134016565b6111798686610c67565b9063ffffffff61136316565b60000b156111a55760405162461bcd60e51b815260040161022f906118e0565b50505050565b6001600160a01b038116600090815260cb602052604081205480610cf75760408051600481526024810182526020810180516001600160e01b031663313ce56760e01b17905290516000916060916001600160a01b0387169161120d9161157f565b600060405180830381855afa9150503d8060008114611248576040519150601f19603f3d011682016040523d82523d6000602084013e61124d565b606091505b509150915081801561125f5750805115155b61127b5760405162461bcd60e51b815260040161022f90611775565b8080602001905181019061128f9190611529565b95945050505050565b6000610cf483836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611394565b6000826112e957506000610cf7565b828202828482816112f657fe5b0414610cf45760405162461bcd60e51b815260040161022f906117df565b600081848411156113385760405162461bcd60e51b815260040161022f91906115e2565b505050900390565b611348611418565b611350611418565b82518451610d209163ffffffff6113cb16565b80518251600091101561137857506001610cf7565b81518351101561138b5750600019610cf7565b50600092915050565b600081836113b55760405162461bcd60e51b815260040161022f91906115e2565b5060008385816113c157fe5b0495945050505050565b600082820183811015610cf45760405162461bcd60e51b815260040161022f90611679565b604051806040016040528060006001600160a01b03168152602001611413611418565b905290565b6040518060200160405280600081525090565b60006020828403121561143c578081fd5b6040516020810181811067ffffffffffffffff8211171561145b578283fd5b6040529135825250919050565b600060208284031215611479578081fd5b8135610cf481611a88565b60008060408385031215611496578081fd5b82356114a181611a88565b915060208301356114b181611a88565b809150509250929050565b600080604083850312156114ce578182fd5b82356114d981611a88565b91506114e8846020850161142b565b90509250929050565b600060208284031215611502578081fd5b81518015158114610cf4578182fd5b600060208284031215611522578081fd5b5035919050565b60006020828403121561153a578081fd5b5051919050565b600080600060608486031215611555578081fd5b83359250602084013561156781611a88565b9150611576856040860161142b565b90509250925092565b60008251611591818460208701611a5c565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392909216825251602082015260400190565b6001600160a01b03929092168252602082015260400190565b6000602082528251806020840152611601816040850160208701611a5c565b601f01601f19169190910160400192915050565b60208082526013908201527210afb932bbb0b93239a1b7b73a3937b63632b960691b604082015260600190565b6020808252601d908201527f446563696d616c45524332303a207472616e73666572206661696c6564000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526017908201527f43616e74206164642061207a65726f2061646472657373000000000000000000604082015260600190565b60208082526027908201527f5065727046694f776e61626c65557067726164653a2073616d652061732063616040820152666e64696461746560c81b606082015260800190565b60208082526027908201527f5065727046694f776e61626c65557067726164653a206e6f7420746865206e656040820152663b9037bbb732b960c91b606082015260800190565b60208082526021908201527f446563696d616c45524332303a2067657420646563696d616c73206661696c656040820152601960fa1b606082015260800190565b6020808252600f908201526e06e6f7420656e6f756768205045525608c1b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b60208082526022908201527f5065727046694f776e61626c65557067726164653a207a65726f206164647265604082015261737360f01b606082015260800190565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201526d195b881a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526016908201527510d85b9d081859190818481e995c9bc8185b5bdd5b9d60521b604082015260600190565b60208082526022908201527f446563696d616c45524332303a2062616c616e636520696e636f6e73697374656040820152611b9d60f21b606082015260800190565b6020808252602f908201527f5065727046694f776e61626c65557067726164653a2063616e6469646174652060408201526e6973207a65726f206164647265737360881b606082015260800190565b6020808252602d908201527f5065727046694f776e61626c65557067726164653a2063616c6c65722069732060408201526c3737ba103a34329037bbb732b960991b606082015260800190565b602080825260139082015272696e646578206f7574206f6620626f756e647360681b604082015260600190565b60208082526026908201527f5065727046694f776e61626c65557067726164653a2073616d65206173206f726040820152651a59da5b985b60d21b606082015260800190565b9051815260200190565b9054815260200190565b90815260200190565b918252602082015260400190565b60005b83811015611a77578181015183820152602001611a5f565b838111156111a55750506000910152565b6001600160a01b0381168114610c5957600080fdfea2646970667358221220deffb4973ea721bdd26539790c69dbb0b7e6d71f0311d4f3ac4ce19290c2b9f264736f6c63430006090033\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Signer, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { SignedDecimalFake } from \"../SignedDecimalFake\";\n\nexport class SignedDecimalFake__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<SignedDecimalFake> {\n    return super.deploy(overrides || {}) as Promise<SignedDecimalFake>;\n  }\n  getDeployTransaction(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  attach(address: string): SignedDecimalFake {\n    return super.attach(address) as SignedDecimalFake;\n  }\n  connect(signer: Signer): SignedDecimalFake__factory {\n    return super.connect(signer) as SignedDecimalFake__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): SignedDecimalFake {\n    return new Contract(address, _abi, signerOrProvider) as SignedDecimalFake;\n  }\n}\n\nconst _abi = [\n  {\n    inputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"int256\",\n            name: \"d\",\n            type: \"int256\",\n          },\n        ],\n        internalType: \"struct SignedDecimal.signedDecimal\",\n        name: \"x\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"int256\",\n            name: \"d\",\n            type: \"int256\",\n          },\n        ],\n        internalType: \"struct SignedDecimal.signedDecimal\",\n        name: \"y\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"div\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"int256\",\n            name: \"d\",\n            type: \"int256\",\n          },\n        ],\n        internalType: \"struct SignedDecimal.signedDecimal\",\n        name: \"z\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"pure\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"int256\",\n            name: \"d\",\n            type: \"int256\",\n          },\n        ],\n        internalType: \"struct SignedDecimal.signedDecimal\",\n        name: \"x\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"int256\",\n        name: \"y\",\n        type: \"int256\",\n      },\n    ],\n    name: \"divScalar\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"int256\",\n            name: \"d\",\n            type: \"int256\",\n          },\n        ],\n        internalType: \"struct SignedDecimal.signedDecimal\",\n        name: \"z\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"pure\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"int256\",\n            name: \"d\",\n            type: \"int256\",\n          },\n        ],\n        internalType: \"struct SignedDecimal.signedDecimal\",\n        name: \"x\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"int256\",\n            name: \"d\",\n            type: \"int256\",\n          },\n        ],\n        internalType: \"struct SignedDecimal.signedDecimal\",\n        name: \"y\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"mul\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"int256\",\n            name: \"d\",\n            type: \"int256\",\n          },\n        ],\n        internalType: \"struct SignedDecimal.signedDecimal\",\n        name: \"z\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"pure\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"int256\",\n            name: \"d\",\n            type: \"int256\",\n          },\n        ],\n        internalType: \"struct SignedDecimal.signedDecimal\",\n        name: \"x\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"int256\",\n        name: \"y\",\n        type: \"int256\",\n      },\n    ],\n    name: \"mulScalar\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"int256\",\n            name: \"d\",\n            type: \"int256\",\n          },\n        ],\n        internalType: \"struct SignedDecimal.signedDecimal\",\n        name: \"z\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"pure\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x608060405234801561001057600080fd5b506104a8806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80630c6f25531461005157806330d0816f1461007a57806333fc7d111461008d578063cc9dbfde146100a0575b600080fd5b61006461005f366004610377565b6100b3565b6040516100719190610468565b60405180910390f35b61006461008836600461034d565b6100d2565b61006461009b36600461034d565b6100ea565b6100646100ae366004610377565b610102565b6100bb6102fd565b6100cb838363ffffffff61011a16565b9392505050565b6100da6102fd565b6100cb838363ffffffff61014816565b6100f26102fd565b6100cb838363ffffffff61016a16565b61010a6102fd565b6100cb838363ffffffff61018c16565b6101226102fd565b61012a6102fd565b8251845161013d9163ffffffff6101af16565b815290505b92915050565b6101506102fd565b6101586102fd565b835161013d908463ffffffff6101bd16565b6101726102fd565b61017a6102fd565b835161013d908463ffffffff61023116565b6101946102fd565b61019c6102fd565b8251845161013d9163ffffffff61029516565b60006100cb838360126102a3565b6000826101cc57506000610142565b826000191480156101e05750600160ff1b82145b156102065760405162461bcd60e51b81526004016101fd906103ec565b60405180910390fd5b8282028284828161021357fe5b05146100cb5760405162461bcd60e51b81526004016101fd906103ec565b6000816102505760405162461bcd60e51b81526004016101fd90610433565b816000191480156102645750600160ff1b83145b156102815760405162461bcd60e51b81526004016101fd906103ab565b600082848161028c57fe5b05949350505050565b60006100cb838360126102d5565b60006102cd6102b1836102f4565b6102c1868663ffffffff6101bd16565b9063ffffffff61023116565b949350505050565b60006102cd836102c16102e7856102f4565b879063ffffffff6101bd16565b60ff16600a0a90565b6040518060200160405280600081525090565b600060208284031215610321578081fd5b6040516020810181811067ffffffffffffffff82111715610340578283fd5b6040529135825250919050565b6000806040838503121561035f578182fd5b6103698484610310565b946020939093013593505050565b60008060408385031215610389578081fd5b6103938484610310565b91506103a28460208501610310565b90509250929050565b60208082526021908201527f5369676e6564536166654d6174683a206469766973696f6e206f766572666c6f6040820152607760f81b606082015260800190565b60208082526027908201527f5369676e6564536166654d6174683a206d756c7469706c69636174696f6e206f604082015266766572666c6f7760c81b606082015260800190565b6020808252818101527f5369676e6564536166654d6174683a206469766973696f6e206279207a65726f604082015260600190565b905181526020019056fea26469706673582212200c0707d566719aca26dd54cd50fa94127b1bf5ea95cb949e63616ec503a65ae264736f6c63430006090033\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Signer, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { StakedPerpTokenFake } from \"../StakedPerpTokenFake\";\n\nexport class StakedPerpTokenFake__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<StakedPerpTokenFake> {\n    return super.deploy(overrides || {}) as Promise<StakedPerpTokenFake>;\n  }\n  getDeployTransaction(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  attach(address: string): StakedPerpTokenFake {\n    return super.attach(address) as StakedPerpTokenFake;\n  }\n  connect(signer: Signer): StakedPerpTokenFake__factory {\n    return super.connect(signer) as StakedPerpTokenFake__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): StakedPerpTokenFake {\n    return new Contract(address, _abi, signerOrProvider) as StakedPerpTokenFake;\n  }\n}\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"stakedModule\",\n        type: \"address\",\n      },\n    ],\n    name: \"StakeModuleAdded\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"stakedModule\",\n        type: \"address\",\n      },\n    ],\n    name: \"StakeModuleRemoved\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"staker\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Staked\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"staker\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Unstaked\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"staker\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Withdrawn\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"TOKEN_AMOUNT_LIMIT\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IStakeModule\",\n        name: \"_stakeModule\",\n        type: \"address\",\n      },\n    ],\n    name: \"addStakeModule\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_owner\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"__blockNumber\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"balanceOfAt\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"candidate\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"cooldownPeriod\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        internalType: \"uint8\",\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getStakeModuleLength\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"_perpToken\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_cooldownPeriod\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IStakeModule\",\n        name: \"_stakeModule\",\n        type: \"address\",\n      },\n    ],\n    name: \"isStakeModuleExisted\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"mock_getCurrentBlockNumber\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"mock_getCurrentTimestamp\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_number\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"mock_setBlockNumber\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_timestamp\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"mock_setBlockTimestamp\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"perpToken\",\n    outputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IStakeModule\",\n        name: \"_stakeModule\",\n        type: \"address\",\n      },\n    ],\n    name: \"removeStakeModule\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"setOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_amount\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"stake\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"stakeModules\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"stakerCooldown\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"stakerWithdrawPendingBalance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"d\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"__blockNumber\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"totalSupplyAt\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"unstake\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"updateOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"withdraw\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x6080604052635611c23061013a556391ac8c3061013b5534801561002257600080fd5b50612d07806100326000396000f3fe608060405234801561001057600080fd5b50600436106102055760003560e01c80638da5cb5b1161011a578063bc5920ba116100ad578063d5f8fcfa1161007c578063d5f8fcfa146103d8578063dd62ed3e146103eb578063de114190146103fe578063f0a10b1a14610406578063fae7d15c1461041957610205565b8063bc5920ba146103a2578063c1bbe0de146103aa578063c77f7c61146103bd578063cd6dc687146103c557610205565b8063981b24d0116100e9578063981b24d0146103615780639cadb3a014610374578063a9059cbb1461037c578063ac04f2431461038f57610205565b80638da5cb5b1461032b57806390c95b7d146103335780639432665a1461034657806395d89b411461035957610205565b806323b872dd1161019d5780633ccfd60b1161016c5780633ccfd60b146102e05780634ee2cd7e146102e85780636c8381f8146102fb57806370a0823114610310578063715018a61461032357610205565b806323b872dd1461029d57806329a2293d146102b05780632def6620146102c3578063313ce567146102cb57610205565b806309338383116101d9578063093383831461025a578063095ea7b31461026257806313af40351461028257806318160ddd1461029557610205565b8062c141b61461020a578063032370dc1461021f57806304646a491461023d57806306fdde0314610245575b600080fd5b61021d610218366004612572565b61042c565b005b610227610432565b6040516102349190612c79565b60405180910390f35b61022761043a565b61024d610441565b604051610234919061261a565b6102276104cf565b6102756102703660046124d3565b6104de565b604051610234919061260f565b61021d61029036600461243f565b610501565b6102276105da565b6102756102ab366004612493565b6105f4565b6102276102be36600461243f565b61060e565b61021d610621565b6102d36107fa565b6040516102349190612c82565b61021d610804565b6102276102f63660046124d3565b6108ef565b610303610907565b60405161023491906125be565b61022761031e36600461243f565b610916565b61021d610934565b6103036109b3565b61022761034136600461243f565b6109c2565b61021d610354366004612572565b6109d5565b61024d6109db565b61022761036f366004612572565b610a36565b610303610a44565b61027561038a3660046124d3565b610a54565b61021d61039d36600461251e565b610a6e565b61021d610c5a565b6103036103b8366004612572565b610d1d565b610227610d45565b61021d6103d33660046124d3565b610d4f565b6102756103e636600461243f565b610e99565b6102276103f936600461245b565b610f09565b610227610f11565b61021d61041436600461243f565b610f16565b61021d61042736600461243f565b610fe7565b61013b55565b610105545b90565b6101075481565b60fe805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104c75780601f1061049c576101008083540402835291602001916104c7565b820191906000526020600020905b8154815290600101906020018083116104aa57829003601f168201915b505050505081565b60006104d96110a7565b905090565b600060405162461bcd60e51b81526004016104f8906129c4565b60405180910390fd5b6105096110ae565b6098546001600160a01b039081169116146105365760405162461bcd60e51b81526004016104f890612b78565b6001600160a01b03811661055c5760405162461bcd60e51b81526004016104f890612934565b6098546001600160a01b038281169116141561058a5760405162461bcd60e51b81526004016104f890612bfc565b6099546001600160a01b03828116911614156105b85760405162461bcd60e51b81526004016104f89061271a565b609980546001600160a01b0319166001600160a01b0392909216919091179055565b60006104d96105ef6105ea6110a7565b6110b2565b6110e8565b600060405162461bcd60e51b81526004016104f8906126bb565b6101036020526000908152604090205481565b600061062b6110ae565b90506106356110ec565b6001600160a01b03811660009081526101046020908152604091829020825191820190925290548152610667906110e8565b156106845760405162461bcd60e51b81526004016104f8906127df565b61068c612394565b60405180602001604052806106c56101026000866001600160a01b03166001600160a01b0316815260200190815260200160002061110e565b905290506106d281611159565b6106dc8282611184565b6106f7610107546106eb611292565b9063ffffffff61129916565b6001600160a01b038316600090815261010360209081526040808320939093556101049052908120825190555b610105548110156107b457610105818154811061073d57fe5b60009182526020909120015460405163cd8ae3dd60e01b81526001600160a01b039091169063cd8ae3dd906107769086906004016125be565b600060405180830381600087803b15801561079057600080fd5b505af11580156107a4573d6000803e3d6000fd5b5050600190920191506107249050565b507f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f75826107e0836110e8565b6040516107ee9291906125f6565b60405180910390a15050565b6101005460ff1681565b600061080e6110ae565b9050610818612394565b506001600160a01b0381166000908152610104602090815260409182902082519182019092529054815261084b81611159565b6001600160a01b0382166000908152610103602052604090205461086d611292565b101561088b5760405162461bcd60e51b81526004016104f890612909565b6001600160a01b03808316600090815261010460209081526040808320839055610103909152812055610106546108c4911683836112be565b7f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5826107e0836110e8565b60006108fe6105ef84846113ed565b90505b92915050565b6099546001600160a01b031690565b600061092c6105ef836109276110a7565b6113ed565b90505b919050565b61093c6110ae565b6098546001600160a01b039081169116146109695760405162461bcd60e51b81526004016104f890612b78565b6098546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3609880546001600160a01b0319169055565b6098546001600160a01b031690565b6101046020526000908152604090205481565b61013a55565b60ff805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104c75780601f1061049c576101008083540402835291602001916104c7565b600061092c6105ef836110b2565b610106546001600160a01b031681565b600060405162461bcd60e51b81526004016104f890612a89565b610a85610a8036839003830183612535565b611159565b610a8d6110ec565b6000610a976110ae565b9050610aa1612394565b610ab036849003840184612535565b6001600160a01b03831660009081526101046020908152604091829020825191820190925290548152909150610ae5906110e8565b15610b4f576001600160a01b03821660009081526101046020908152604091829020825191820190925290548152610b2490829063ffffffff61143a16565b6001600160a01b03831660009081526101046020908152604080832083905561010390915281205590505b61010654610b76906001600160a01b03168330610b7136889003880188612535565b611466565b610b808282611598565b60005b61010554811015610c13576101058181548110610b9c57fe5b60009182526020909120015460405163cd8ae3dd60e01b81526001600160a01b039091169063cd8ae3dd90610bd59086906004016125be565b600060405180830381600087803b158015610bef57600080fd5b505af1158015610c03573d6000803e3d6000fd5b505060019092019150610b839050565b507f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d82610c3f836110e8565b604051610c4d9291906125f6565b60405180910390a1505050565b6099546001600160a01b0316610c825760405162461bcd60e51b81526004016104f890612b29565b610c8a6110ae565b6099546001600160a01b03908116911614610cb75760405162461bcd60e51b81526004016104f890612761565b6099546098546040516001600160a01b0392831692909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360998054609880546001600160a01b03199081166001600160a01b03841617909155169055565b6101058181548110610d2b57fe5b6000918252602090912001546001600160a01b0316905081565b60006104d9611292565b603354610100900460ff1680610d685750610d68611688565b80610d76575060335460ff16155b610d925760405162461bcd60e51b81526004016104f890612976565b603354610100900460ff16158015610dbd576033805460ff1961ff0019909116610100171660011790555b6001600160a01b038316610de35760405162461bcd60e51b81526004016104f8906126f2565b610deb61168e565b6040805180820190915260108082526f14dd185ad9590814195c9c195d1d585b60821b6020909201918252610e229160fe916123a7565b5060408051808201909152600580825264073504552560dc1b6020909201918252610e4f9160ff916123a7565b50610100805460ff1916601217905561010680546001600160a01b0385166001600160a01b03199091161790556101078290558015610e94576033805461ff00191690555b505050565b600061092c82610105805480602002602001604051908101604052809291908181526020018280548015610ef657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610ed8575b505050505061172090919063ffffffff16565b600092915050565b601481565b610f1e6110ae565b6098546001600160a01b03908116911614610f4b5760405162461bcd60e51b81526004016104f890612b78565b6000610f5f6101058363ffffffff61177616565b90506001600160a01b038116610f875760405162461bcd60e51b81526004016104f890612bc5565b816001600160a01b0316816001600160a01b031614610fb85760405162461bcd60e51b81526004016104f890612891565b7f2c54da8cf6b6d65b4bd7e9bf095dd4d133a2ce5731ebb20a4f1bcc3db9029430826040516107ee91906125be565b610fef6110ae565b6098546001600160a01b0390811691161461101c5760405162461bcd60e51b81526004016104f890612b78565b6101055460141161103f5760405162461bcd60e51b81526004016104f8906127a8565b6110516101058263ffffffff61188216565b61106d5760405162461bcd60e51b81526004016104f890612ac0565b7f9400eb2cfb16fdd3f18022e33f5d4b757dea0c4367d95f0495f6af5911e1e9148160405161109c91906125be565b60405180910390a150565b61013b5490565b3390565b6110ba612394565b60405180602001604052806110e06110d18561193b565b6101019063ffffffff61199a16565b905292915050565b5190565b6101055461110c5760405162461bcd60e51b81526004016104f890612a3c565b565b805460009080156111505782600001600182038154811061112b57fe5b600091825260209091200154600160401b90046001600160c01b0316915061092f9050565b50600092915050565b6000611164826110e8565b116111815760405162461bcd60e51b81526004016104f890612a64565b50565b6001600160a01b0382166111aa5760405162461bcd60e51b81526004016104f8906129fb565b6111b2612394565b60405180602001604052806111c685610916565b905290506111d2612394565b6111e2828463ffffffff6119a616565b90506111ec612394565b60405180602001604052806111ff6105da565b9052905061120b612394565b61121b828663ffffffff6119a616565b905060006112276110a7565b90506112348782866119c9565b61123e8183611a0c565b60006001600160a01b0388167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef611274896110e8565b6040516112819190612c79565b60405180910390a350505050505050565b61013a5490565b6000828201838110156108fe5760405162461bcd60e51b81526004016104f890612684565b6112c783611a38565b6112cf612394565b6112d98484611a82565b905060006112e78584611b0f565b905060006060866001600160a01b031663a9059cbb60e01b87856040516024016113129291906125f6565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161135091906125a2565b6000604051808303816000865af19150503d806000811461138d576040519150601f19603f3d011682016040523d82523d6000602084013e611392565b606091505b50915091508180156113bc5750805115806113bc5750808060200190518101906113bc91906124fe565b6113d85760405162461bcd60e51b81526004016104f89061264d565b6113e487878587611b8d565b50505050505050565b6113f5612394565b604051806020016040528061143161140c8561193b565b6001600160a01b0387166000908152610102602052604090209063ffffffff61199a16565b90529392505050565b611442612394565b61144a612394565b8251845161145d9163ffffffff61129916565b81529392505050565b61146f84611a38565b611477612394565b6114818584611a82565b9050600061148f8684611b0f565b905060006060876001600160a01b03166323b872dd60e01b8888866040516024016114bc939291906125d2565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516114fa91906125a2565b6000604051808303816000865af19150503d8060008114611537576040519150601f19603f3d011682016040523d82523d6000602084013e61153c565b606091505b509150915081801561156657508051158061156657508080602001905181019061156691906124fe565b6115825760405162461bcd60e51b81526004016104f890612850565b61158e88878587611b8d565b5050505050505050565b6001600160a01b0382166115be5760405162461bcd60e51b81526004016104f890612c42565b6115c6612394565b60405180602001604052806115da85610916565b905290506115e6612394565b6115f6828463ffffffff61143a16565b9050611600612394565b60405180602001604052806116136105da565b9052905061161f612394565b61162f828663ffffffff61143a16565b9050600061163b6110a7565b90506116488782866119c9565b6116528183611a0c565b6001600160a01b03871660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef611274896110e8565b303b1590565b603354610100900460ff16806116a757506116a7611688565b806116b5575060335460ff16155b6116d15760405162461bcd60e51b81526004016104f890612976565b603354610100900460ff161580156116fc576033805460ff1961ff0019909116610100171660011790555b611704611be6565b61170c611c67565b8015611181576033805461ff001916905550565b6000805b835181101561176c5783818151811061173957fe5b60200260200101516001600160a01b0316836001600160a01b03161415611764576001915050610901565b600101611724565b5060009392505050565b60006001600160a01b03821661178e57506000610901565b825460005b81811015611877578481815481106117a757fe5b6000918252602090912001546001600160a01b038581169116141561186f57600182038114611838578460018303815481106117df57fe5b9060005260206000200160009054906101000a90046001600160a01b031685828154811061180957fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b8480548061184257fe5b600082815260209020810160001990810180546001600160a01b0319169055019055508291506109019050565b600101611793565b506000949350505050565b60006001600160a01b03821615806118f857506118f8838054806020026020016040519081016040528092919081815260200182805480156118ed57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116118cf575b505050505083611720565b1561190557506000610901565b50815460018082018455600093845260209093200180546001600160a01b0319166001600160a01b039290921691909117905590565b60408051808201909152601581527455494e5436345f4e554d4245525f544f4f5f42494760581b602082015260009067ffffffffffffffff8311156119935760405162461bcd60e51b81526004016104f8919061261a565b5090919050565b60006108fe8383611d41565b6119ae612394565b6119b6612394565b8251845161145d9163ffffffff611ed216565b610e946119d58361193b565b6119e66119e1846110e8565b611f14565b6001600160a01b038616600090815261010260205260409020919063ffffffff611f6c16565b611a34611a188361193b565b611a246119e1846110e8565b610101919063ffffffff611f6c16565b5050565b6000611a438261210e565b6001600160a01b0383166000908152602081905260409020549091508114611a34576001600160a01b0391909116600090815260208190526040902055565b611a8a612394565b6108fe83846001600160a01b03166370a08231856040518263ffffffff1660e01b8152600401611aba91906125be565b60206040518083038186803b158015611ad257600080fd5b505afa158015611ae6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b0a919061258a565b6121fb565b600080611b1b8461210e565b905060128110611b5957611b51611b3982601263ffffffff611ed216565b600a0a611b45856110e8565b9063ffffffff61228d16565b915050610901565b611b85611b6d60128363ffffffff611ed216565b600a0a611b79856110e8565b9063ffffffff6122c716565b949350505050565b611bc0611baa611b9d86856121fb565b839063ffffffff61143a16565b611bb48686611a82565b9063ffffffff61230916565b60000b15611be05760405162461bcd60e51b81526004016104f890612ae7565b50505050565b603354610100900460ff1680611bff5750611bff611688565b80611c0d575060335460ff16155b611c295760405162461bcd60e51b81526004016104f890612976565b603354610100900460ff1615801561170c576033805460ff1961ff0019909116610100171660011790558015611181576033805461ff001916905550565b603354610100900460ff1680611c805750611c80611688565b80611c8e575060335460ff16155b611caa5760405162461bcd60e51b81526004016104f890612976565b603354610100900460ff16158015611cd5576033805460ff1961ff0019909116610100171660011790555b6000611cdf6110ae565b609880546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015611181576033805461ff001916905550565b815460009080611d55576000915050610901565b8354600019820190600090869083908110611d6c57fe5b6000918252602090912001805490915067ffffffffffffffff90811690861610611dab5754600160401b90046001600160c01b03169250610901915050565b8260011480611de2575085600001600081548110611dc557fe5b60009182526020909120015467ffffffffffffffff908116908616105b15611df35760009350505050610901565b600060001983015b81811115611e9b578754600283830160010104906000908a9083908110611e1e57fe5b6000918252602090912001805490915067ffffffffffffffff908116908a16811015611e4c57829450611e93565b8067ffffffffffffffff168a67ffffffffffffffff161015611e7357600183039350611e93565b5054600160401b90046001600160c01b0316965061090195505050505050565b505050611dfb565b876000018281548110611eaa57fe5b600091825260209091200154600160401b90046001600160c01b031698975050505050505050565b60006108fe83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612331565b60408051808201909152601681527555494e543139325f4e554d4245525f544f4f5f42494760501b60208201526000906001600160c01b038311156119935760405162461bcd60e51b81526004016104f8919061261a565b825480611fdf576040805180820190915267ffffffffffffffff80851682526001600160c01b0380851660208085019182528854600181018a5560008a8152919091209451940180549151909216600160401b0293831667ffffffffffffffff1990911617909116919091179055611be0565b6000846000016001830381548110611ff357fe5b6000918252602090912001805490915067ffffffffffffffff908116908516811015612085576040805180820190915267ffffffffffffffff80871682526001600160c01b0380871660208085019182528a54600181018c5560008c8152919091209451940180549151909216600160401b0293831667ffffffffffffffff1990911617909116919091179055612106565b808567ffffffffffffffff1614156120bb57815467ffffffffffffffff16600160401b6001600160c01b03861602178255612106565b604080518082018252601a81527f434845434b504f494e545f504153545f434845434b504f494e540000000000006020820152905162461bcd60e51b81526104f8919060040161261a565b505050505050565b6001600160a01b0381166000908152602081905260408120548061092c5760408051600481526024810182526020810180516001600160e01b031663313ce56760e01b17905290516000916060916001600160a01b03871691612170916125a2565b600060405180830381855afa9150503d80600081146121ab576040519150601f19603f3d011682016040523d82523d6000602084013e6121b0565b606091505b50915091508180156121c25750805115155b6121de5760405162461bcd60e51b81526004016104f89061280f565b808060200190518101906121f2919061258a565b95945050505050565b612203612394565b600061220e8461210e565b9050601281106122535760408051602081019091528061224861223884601263ffffffff611ed216565b8690600a0a63ffffffff6122c716565b815250915050610901565b60408051602081019091528061228361227360128563ffffffff611ed216565b8690600a0a63ffffffff61228d16565b9052949350505050565b60008261229c57506000610901565b828202828482816122a957fe5b04146108fe5760405162461bcd60e51b81526004016104f8906128c8565b60006108fe83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061235d565b80518251600091101561231e57506001610901565b8151835110156111505750600019610901565b600081848411156123555760405162461bcd60e51b81526004016104f8919061261a565b505050900390565b6000818361237e5760405162461bcd60e51b81526004016104f8919061261a565b50600083858161238a57fe5b0495945050505050565b6040518060200160405280600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106123e857805160ff1916838001178555612415565b82800160010185558215612415579182015b828111156124155782518255916020019190600101906123fa565b50612421929150612425565b5090565b61043791905b80821115612421576000815560010161242b565b600060208284031215612450578081fd5b81356108fe81612cbc565b6000806040838503121561246d578081fd5b823561247881612cbc565b9150602083013561248881612cbc565b809150509250929050565b6000806000606084860312156124a7578081fd5b83356124b281612cbc565b925060208401356124c281612cbc565b929592945050506040919091013590565b600080604083850312156124e5578182fd5b82356124f081612cbc565b946020939093013593505050565b60006020828403121561250f578081fd5b815180151581146108fe578182fd5b60006020828403121561252f578081fd5b50919050565b600060208284031215612546578081fd5b6040516020810181811067ffffffffffffffff82111715612565578283fd5b6040529135825250919050565b600060208284031215612583578081fd5b5035919050565b60006020828403121561259b578081fd5b5051919050565b600082516125b4818460208701612c90565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b6000602082528251806020840152612639816040850160208701612c90565b601f01601f19169190910160400192915050565b6020808252601d908201527f446563696d616c45524332303a207472616e73666572206661696c6564000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601f908201527f7472616e7366657246726f6d2829206973206e6f7420737570706f7274656400604082015260600190565b6020808252600e908201526d24b73b30b634b21034b7383aba1760911b604082015260600190565b60208082526027908201527f5065727046694f776e61626c65557067726164653a2073616d652061732063616040820152666e64696461746560c81b606082015260800190565b60208082526027908201527f5065727046694f776e61626c65557067726164653a206e6f7420746865206e656040820152663b9037bbb732b960c91b606082015260800190565b6020808252601f908201527f657863656564207374616b654d6f64756c6520616d6f756e74206c696d697400604082015260600190565b60208082526016908201527513995959081d1bc81dda5d1a191c985dc8199a5c9cdd60521b604082015260600190565b60208082526021908201527f446563696d616c45524332303a2067657420646563696d616c73206661696c656040820152601960fa1b606082015260800190565b60208082526021908201527f446563696d616c45524332303a207472616e7366657246726f6d206661696c656040820152601960fa1b606082015260800190565b60208082526018908201527f72656d6f76652077726f6e67207374616b654d6f64756c650000000000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b60208082526011908201527029ba34b6361034b71031b7b7b63237bbb760791b604082015260600190565b60208082526022908201527f5065727046694f776e61626c65557067726164653a207a65726f206164647265604082015261737360f01b606082015260800190565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201526d195b881a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252601a908201527f617070726f76652829206973206e6f7420737570706f72746564000000000000604082015260600190565b60208082526021908201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736040820152607360f81b606082015260800190565b6020808252600e908201526d6e6f207374616b654d6f64756c6560901b604082015260600190565b6020808252600b908201526a0416d6f756e7420697320360ac1b604082015260600190565b6020808252601b908201527f7472616e736665722829206973206e6f7420737570706f727465640000000000604082015260600190565b6020808252600d908201526c1a5b9d985b1a59081a5b9c1d5d609a1b604082015260600190565b60208082526022908201527f446563696d616c45524332303a2062616c616e636520696e636f6e73697374656040820152611b9d60f21b606082015260800190565b6020808252602f908201527f5065727046694f776e61626c65557067726164653a2063616e6469646174652060408201526e6973207a65726f206164647265737360881b606082015260800190565b6020808252602d908201527f5065727046694f776e61626c65557067726164653a2063616c6c65722069732060408201526c3737ba103a34329037bbb732b960991b606082015260800190565b6020808252601a908201527f7374616b654d6f64756c6520646f6573206e6f74206578697374000000000000604082015260600190565b60208082526026908201527f5065727046694f776e61626c65557067726164653a2073616d65206173206f726040820152651a59da5b985b60d21b606082015260800190565b6020808252601f908201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604082015260600190565b90815260200190565b60ff91909116815260200190565b60005b83811015612cab578181015183820152602001612c93565b83811115611be05750506000910152565b6001600160a01b038116811461118157600080fdfea2646970667358221220e2b1cd7d2bb2019c2958982eaf27d22af8c1499f2e7a671bc07b72566c43b29064736f6c63430006090033\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Signer, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { StakingReserveFake } from \"../StakingReserveFake\";\n\nexport class StakingReserveFake__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<StakingReserveFake> {\n    return super.deploy(overrides || {}) as Promise<StakingReserveFake>;\n  }\n  getDeployTransaction(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  attach(address: string): StakingReserveFake {\n    return super.attach(address) as StakingReserveFake;\n  }\n  connect(signer: Signer): StakingReserveFake__factory {\n    return super.connect(signer) as StakingReserveFake__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): StakingReserveFake {\n    return new Contract(address, _abi, signerOrProvider) as StakingReserveFake;\n  }\n}\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"fee\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"epoch\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"FeeInEpoch\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"staker\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"RewardWithdrawn\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"candidate\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"claimFeesAndVestedReward\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_amount\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"depositAndStake\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"epochRewardHistory\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"perpReward\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"feeMap\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"d\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"feeNotifier\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"feeTokens\",\n    outputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getEpochRewardHistoryLength\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_staker\",\n        type: \"address\",\n      },\n    ],\n    name: \"getFeeEpochCursor\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_epoch\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_token\",\n        type: \"address\",\n      },\n    ],\n    name: \"getFeeOfEpoch\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_staker\",\n        type: \"address\",\n      },\n    ],\n    name: \"getFeeRevenue\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"address\",\n            name: \"token\",\n            type: \"address\",\n          },\n          {\n            components: [\n              {\n                internalType: \"uint256\",\n                name: \"d\",\n                type: \"uint256\",\n              },\n            ],\n            internalType: \"struct Decimal.decimal\",\n            name: \"balance\",\n            type: \"tuple\",\n          },\n        ],\n        internalType: \"struct StakingReserve.FeeBalance[]\",\n        name: \"feeBalance\",\n        type: \"tuple[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_staker\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_epochIndex\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getLockedBalance\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"bool\",\n            name: \"exist\",\n            type: \"bool\",\n          },\n          {\n            components: [\n              {\n                internalType: \"uint256\",\n                name: \"d\",\n                type: \"uint256\",\n              },\n            ],\n            internalType: \"struct Decimal.decimal\",\n            name: \"locked\",\n            type: \"tuple\",\n          },\n          {\n            components: [\n              {\n                internalType: \"uint256\",\n                name: \"d\",\n                type: \"uint256\",\n              },\n            ],\n            internalType: \"struct Decimal.decimal\",\n            name: \"timeWeightedLocked\",\n            type: \"tuple\",\n          },\n        ],\n        internalType: \"struct StakingReserve.LockedBalance\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_staker\",\n        type: \"address\",\n      },\n    ],\n    name: \"getRewardEpochCursor\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getTotalBalance\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_epochIndex\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getTotalEffectiveStake\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_staker\",\n        type: \"address\",\n      },\n    ],\n    name: \"getUnlockedBalance\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_staker\",\n        type: \"address\",\n      },\n    ],\n    name: \"getUnstakableBalance\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_staker\",\n        type: \"address\",\n      },\n    ],\n    name: \"getVestedReward\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"reward\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_perpToken\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract SupplySchedule\",\n        name: \"_supplySchedule\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_feeNotifier\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_vestingPeriod\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"_token\",\n        type: \"address\",\n      },\n    ],\n    name: \"isExistedFeeToken\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"mock_getCurrentTimestamp\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_number\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"mock_setBlockNumber\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_timestamp\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"mock_setBlockTimestamp\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"nextEpochIndex\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_amount\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"notifyRewardAmount\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"_token\",\n        type: \"address\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_amount\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"notifyTokenAmount\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"perpToken\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"rewardsDistribution\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_notifier\",\n        type: \"address\",\n      },\n    ],\n    name: \"setFeeNotifier\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"setOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_rewardsDistribution\",\n        type: \"address\",\n      },\n    ],\n    name: \"setRewardsDistribution\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_vestingPeriod\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"setVestingPeriod\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_amount\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"stake\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"stakeBalanceMap\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"exist\",\n        type: \"bool\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"totalBalance\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"rewardEpochCursor\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"feeEpochCursor\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"stakers\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"token\",\n    outputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_amount\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"unstake\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"updateOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"vestingPeriod\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_amount\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"withdraw\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x6080604052635611c2306101a1556127116101a25534801561002057600080fd5b50613654806100306000396000f3fe608060405234801561001057600080fd5b506004361061025d5760003560e01c80636a3662f111610146578063a63a5e76116100c3578063cf756fdf11610087578063cf756fdf146104e0578063cfc90c32146104f3578063d7058d8d14610506578063fc0c546a14610519578063fd5e6dd114610521578063ff59f86d146105345761025d565b8063a63a5e76146104a2578063a7d4b2d3146104aa578063ac04f243146104bd578063bc5920ba146104d0578063c77f7c61146104d85761025d565b80638da5cb5b1161010a5780638da5cb5b146104595780638ef4403c146104615780638f0a270e146104745780639432665a146104875780639cadb3a01461049a5761025d565b80636a3662f11461040e5780636c8381f81461042157806370c88be814610429578063715018a6146104495780637313ee5a146104515761025d565b8063141eea7f116101df57806336b4402a116101a357806336b4402a1461038a5780633ee7a5ce146103ad5780633fc6df6e146103c057806340bee0ed146103c857806341daeb24146103db5780635cdd7c70146103fb5761025d565b8063141eea7f1461034757806316c2f69f1461035c57806319762143146103645780631c17820314610377578063239e1d671461035c5761025d565b80630cd61a0c116102265780630cd61a0c146102e65780630dc095cf14610306578063129de5bf1461031957806312b583491461032c57806313af4035146103345761025d565b8062c141b61461026257806301bb7d9c1461027757806303e16d421461028a57806304aa4487146102b35780630a8d9b67146102d3575b600080fd5b610275610270366004612de7565b610547565b005b610275610285366004612d8f565b61054d565b61029d610298366004612ca3565b6106ea565b6040516102aa91906135a1565b60405180910390f35b6102c66102c1366004612de7565b6106fd565b6040516102aa9190613597565b6102756102e1366004612d5a565b61072d565b6102f96102f4366004612ca3565b610856565b6040516102aa9190612f2d565b6102c6610314366004612e17565b6108b5565b6102c6610327366004612ca3565b61090a565b6102c661096d565b610275610342366004612ca3565b6109a5565b61034f610a7e565b6040516102aa9190612e62565b61029d610a8e565b610275610372366004612ca3565b610a95565b610275610385366004612d8f565b610aec565b61039d610398366004612ca3565b610b5c565b6040516102aa9493929190612f38565b6102756103bb366004612d8f565b610b94565b61034f610cd8565b6102756103d6366004612de7565b610ce7565b6103ee6103e9366004612ca3565b610d22565b6040516102aa9190612ed4565b610275610409366004612ca3565b610f63565b61029d61041c366004612ca3565b610fbb565b61034f610fda565b61043c610437366004612d0f565b610fe9565b6040516102aa9190613572565b6102756110af565b61029d61112e565b61034f611135565b61034f61046f366004612de7565b611144565b61029d610482366004612ca3565b61116c565b610275610495366004612de7565b61118b565b61034f611191565b6102756111a1565b6102c66104b8366004612ca3565b611380565b6102756104cb366004612daa565b61151a565b610275611935565b61029d6119f8565b6102756104ee366004612cbf565b611a07565b6102c6610501366004612de7565b611ae4565b6102c6610514366004612ca3565b611b0f565b61034f611b32565b61034f61052f366004612de7565b611b42565b610275610542366004612d8f565b611b50565b6101a255565b600061056661056136849003840184612daa565b611d84565b1161058c5760405162461bcd60e51b81526004016105839061302c565b60405180910390fd5b6000610596611d88565b90506105a461056182611b0f565b6105b661056136859003850185612daa565b11156105d45760405162461bcd60e51b815260040161058390613196565b60006105ef60016105e3610a8e565b9063ffffffff611d8c16565b90506105f9612c28565b6106038383610fe9565b6040805160608101909152600181529091506020810161063c61062b36889003880188612daa565b60208501519063ffffffff611db116565b815260200161066461065336889003880188612daa565b60408501519063ffffffff611db116565b90526001600160a01b0384166000908152610165602090815260408083208684526004018252918290208351815460ff191690151517815590830151516001820155910151516002909101556106df6106c236869003860186612daa565b60408051602081019091526101635481529063ffffffff611ddd16565b516101635550505050565b61016c6020526000908152604090205481565b610167818154811061070b57fe5b6000918252602091829020604080519384019052600290910201548152905081565b610735611d88565b61016d546001600160a01b039081169116146107635760405162461bcd60e51b815260040161058390613314565b600061077761056136849003840184612daa565b116107945760405162461bcd60e51b81526004016105839061333a565b6107db6107a636839003830183612daa565b6001600160a01b038416600090815261016c60209081526040918290208251918201909252905481529063ffffffff611e5216565b6001600160a01b038316600090815261016c602052604090209051905561080182610856565b6108525761016b80546001810182556000919091527f45c4c4b2842a4a2a717cf0ddf6c6d1dee52b7fd8d9da97eb519765c7a27020f40180546001600160a01b0319166001600160a01b0384161790555b5050565b6000805b61016b548110156108aa57826001600160a01b031661016b828154811061087d57fe5b6000918252602090912001546001600160a01b031614156108a25760019150506108b0565b60010161085a565b50600090505b919050565b6108bd612c56565b61016783815481106108cb57fe5b600091825260208083206001600160a01b0386168452600160029093020191909101815260409182902082519182019092529054815290505b92915050565b610912612c56565b61091a612c56565b61092683610437610a8e565b6020908101516001600160a01b0385166000908152610165835260409081902081519384019091526001015482529150610966908263ffffffff611db116565b9392505050565b610975612c56565b6101666000610982610a8e565b815260208082019290925260409081016000208151928301909152548152905090565b6109ad611d88565b6065546001600160a01b039081169116146109da5760405162461bcd60e51b8152600401610583906134a8565b6001600160a01b038116610a005760405162461bcd60e51b815260040161058390613284565b6065546001600160a01b0382811691161415610a2e5760405162461bcd60e51b81526004016105839061352c565b6066546001600160a01b0382811691161415610a5c5760405162461bcd60e51b81526004016105839061305a565b606680546001600160a01b0319166001600160a01b0392909216919091179055565b61016d546001600160a01b031681565b6101675490565b610a9d611d88565b6065546001600160a01b03908116911614610aca5760405162461bcd60e51b8152600401610583906134a8565b609980546001600160a01b0319166001600160a01b0392909216919091179055565b6101315460ff16610b0f5760405162461bcd60e51b8152600401610583906134f5565b610131805460ff19169055610b39610b25611d88565b610b3436849003840184612daa565b611e75565b610b4b6104cb36839003830183612daa565b50610131805460ff19166001179055565b610165602090815260009182526040918290208054835192830190935260018101548252600281015460039091015460ff9093169284565b6101315460ff16610bb75760405162461bcd60e51b8152600401610583906134f5565b610131805460ff19169055610bd461056136839003830183612daa565b610bf05760405162461bcd60e51b81526004016105839061302c565b6000610bfa611d88565b9050610c086105618261090a565b610c1a61056136859003850185612daa565b1115610c385760405162461bcd60e51b815260040161058390613129565b610c83610c4a36849003840184612daa565b6001600160a01b03831660009081526101656020908152604091829020825191820190925260019091015481529063ffffffff611db116565b6001600160a01b03808316600090815261016560205260409020915160019092019190915561016954610cc6911682610cc136869003860186612daa565b611f66565b5050610131805460ff19166001179055565b6099546001600160a01b031681565b610cef611d88565b6065546001600160a01b03908116911614610d1c5760405162461bcd60e51b8152600401610583906134a8565b61016455565b6001600160a01b038116600090815261016560205260409020606090610d46610a8e565b81600301541415610d5757506108b0565b61016b548067ffffffffffffffff81118015610d7257600080fd5b50604051908082528060200260200182016040528015610dac57816020015b610d99612c69565b815260200190600190039081610d915790505b509250610db7612c56565b60038301545b610dc5610a8e565b811015610f5a57600081815260048501602090815260409182902082519182019092526002909101548152610df990611d84565b15610e255760008181526004850160209081526040918290208251918201909252600290910154815291505b610e2e82611d84565b610e3757610f52565b610e3f612c56565b60008281526101666020908152604091829020825191820190925290548152610e6f90849063ffffffff61209516565b905060005b84811015610f4f57600061016b8281548110610e8c57fe5b6000918252602090912001546001600160a01b03169050610eab612c56565b610eb585836108b5565b9050610ec081611d84565b610ecb575050610f47565b610f04610ede828663ffffffff6120b816565b8a8581518110610eea57fe5b602002602001015160200151611e5290919063ffffffff16565b898481518110610f1057fe5b60200260200101516020018190525081898481518110610f2c57fe5b60209081029190910101516001600160a01b03909116905250505b600101610e74565b50505b600101610dbd565b50505050919050565b610f6b611d88565b6065546001600160a01b03908116911614610f985760405162461bcd60e51b8152600401610583906134a8565b61016d80546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03166000908152610165602052604090206002015490565b6066546001600160a01b031690565b610ff1612c28565b610ff9612c28565b506001600160a01b0383166000908152610165602090815260408083208584526004018252918290208251606081018452815460ff161515815283518084018552600183015481528184015283519283018452600290910154825291820152805115611066579050610904565b82611071575061107d565b60018303925050610ff1565b60405180606001604052806000151581526020016110996120db565b81526020016110a66120db565b90529392505050565b6110b7611d88565b6065546001600160a01b039081169116146110e45760405162461bcd60e51b8152600401610583906134a8565b6065546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3606580546001600160a01b0319169055565b6101645481565b6065546001600160a01b031690565b61016b818154811061115257fe5b6000918252602090912001546001600160a01b0316905081565b6001600160a01b03166000908152610165602052604090206003015490565b6101a155565b610169546001600160a01b031681565b6101315460ff166111c45760405162461bcd60e51b8152600401610583906134f5565b610131805460ff1916905560006111d9611d88565b90506111e3612c56565b6111ec82611380565b905060606111f983610d22565b8051909150151560008061120c85611d84565b11905080806112185750815b6112345760405162461bcd60e51b81526004016105839061324d565b610167546001600160a01b038616600090815261016560205260408120600301919091555b83518110156112c85761128284828151811061127157fe5b602002602001015160200151611d84565b156112c0576112c084828151811061129657fe5b602002602001015160000151878684815181106112af57fe5b602002602001015160200151611f66565b600101611259565b508080156112dc5750610164546101675410155b1561136b5761016454610167546112f89163ffffffff6120f616565b6001600160a01b03808716600090815261016560205260409020600201919091556101695461132991168686611f66565b7f1d3eee4ca001cff39eec6ec7615aacf2f2bd61791273830728ba00ccbd6e13378561135486611d84565b604051611362929190612e9a565b60405180910390a15b5050610131805460ff19166001179055505050565b611388612c56565b61016454611394610a8e565b10156113a9576113a26120db565b90506108b0565b60006113c6610164546113ba610a8e565b9063ffffffff6120f616565b6001600160a01b038416600090815261016560205260409020600281015491925090821015611400576113f76120db565b925050506108b0565b611408612c56565b60028201545b83811015610f5a5760008181526004840160209081526040918290208251918201909252600290910154815261144390611d84565b1561146f5760008181526004840160209081526040918290208251918201909252600290910154815291505b61147882611d84565b61148157611512565b611489612c56565b6114fc61016660008481526020019081526020016000206040518060200160405290816000820154815250506114f08561016786815481106114c757fe5b60009182526020918290206040805193840190526002909102015481529063ffffffff6120b816565b9063ffffffff61209516565b905061150e868263ffffffff611e5216565b9550505b60010161140e565b600061152582611d84565b116115425760405162461bcd60e51b81526004016105839061302c565b600061154c611d88565b905061155a6105618261090a565b61156383611d84565b11156115815760405162461bcd60e51b815260040161058390612f87565b61016a60009054906101000a90046001600160a01b03166001600160a01b031663544736e66040518163ffffffff1660e01b815260040160206040518083038186803b1580156115d057600080fd5b505afa1580156115e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116089190612d3a565b6116245760405162461bcd60e51b815260040161058390613365565b61016a546040805163a83ef51560e01b815290516000926001600160a01b03169163a83ef515916004808301926020929190829003018186803b15801561166a57600080fd5b505afa15801561167e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a29190612dff565b905060006116b360016105e3610a8e565b9050600061016a60009054906101000a90046001600160a01b03166001600160a01b0316638c4e8c216040518163ffffffff1660e01b815260040160206040518083038186803b15801561170657600080fd5b505afa15801561171a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061173e9190612dff565b9050611748612c56565b611750612138565b8211156117a45761178f84611783611776611769612138565b869063ffffffff6120f616565b899063ffffffff61213f16565b9063ffffffff61216116565b90506117a48561179d610a8e565b8884612183565b6001600160a01b038516600090815261016560209081526040808320868452600481019092529091205460ff16156117e7576117e28685898a612183565b611897565b6117ef612c28565b8160040160006117fd610a8e565b815260208082019290925260409081016000908120825160608082018552825460ff16151582528451808701865260018085015482528388019182528651808901885260029586015481529387019390935285519182018652828252805182880190815290518287019081528c865260048a01909752949093209251835460ff191690151517835592515192820192909255915151910155505b6118d28261016660006118a8610a8e565b8152602080820192909252604090810160002081519283019091525481529063ffffffff611e5216565b61016660006118df610a8e565b815260208082019290925260409081016000209251909255815190810190915261016354815261192790839061191b908a63ffffffff61223816565b9063ffffffff611ddd16565b516101635550505050505050565b6066546001600160a01b031661195d5760405162461bcd60e51b815260040161058390613459565b611965611d88565b6066546001600160a01b039081169116146119925760405162461bcd60e51b8152600401610583906130e2565b6066546065546040516001600160a01b0392831692909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360668054606580546001600160a01b03199081166001600160a01b03841617909155169055565b6000611a02612138565b905090565b600054610100900460ff1680611a205750611a206122a3565b80611a2e575060005460ff16155b611a4a5760405162461bcd60e51b8152600401610583906132c6565b600054610100900460ff16158015611a75576000805460ff1961ff0019909116610100171660011790555b611a7d6122a9565b611a8561233c565b61016980546001600160a01b038088166001600160a01b03199283161790925561016a805487841690831617905561016d8054928616929091169190911790556101648290558015611add576000805461ff00191690555b5050505050565b611aec612c56565b506000908152610166602090815260409182902082519182019092529054815290565b611b17612c56565b611b288261043760016105e3610a8e565b6020015192915050565b61016e546001600160a01b031681565b610168818154811061115257fe5b611b58611d88565b6099546001600160a01b03908116911614611b855760405162461bcd60e51b81526004016105839061339c565b611b8d612c56565b611b9561096d565b9050610167604051806020016040528084803603810190611bb69190612daa565b9052815460018181018455600093845260208420925151600290920290920155611be2906113ba610a8e565b905060005b61016b54811015611cfd57600061016b8281548110611c0257fe5b60009182526020808320909101546001600160a01b031680835261016c82526040928390208351928301909352915481529091507f1b97835ae43d7358e1d70d7e50005dc31b89e5e3bf48377750406fa4e6941124908290611c6390611d84565b85604051611c7393929190612eb3565b60405180910390a16001600160a01b038116600090815261016c60205260409020610167805485908110611ca357fe5b600091825260208083206001600160a01b038616845260016002909302019190910190526040902090549055611cd76120db565b6001600160a01b03909116600090815261016c6020526040902090519055600101611be7565b50611d06612c56565b6040805160208101909152610163548152611d27908463ffffffff61223816565b90506000611d3482611d84565b1215611d525760405162461bcd60e51b815260040161058390613196565b611d5b816123b2565b6101666000611d68610a8e565b81526020810191909152604001600020905190556106df6120db565b5190565b3390565b6000828201838110156109665760405162461bcd60e51b815260040161058390612ff5565b611db9612c56565b611dc1612c56565b82518451611dd49163ffffffff6120f616565b81529392505050565b611de5612c56565b8180600001516001600160ff1b0310156040518060600160405280603381526020016135ec6033913990611e2c5760405162461bcd60e51b81526004016105839190612f54565b50611e35612c56565b83518551611e489163ffffffff6123e016565b8152949350505050565b611e5a612c56565b611e62612c56565b82518451611dd49163ffffffff611d8c16565b611e7e81611d84565b611e9a5760405162461bcd60e51b81526004016105839061302c565b6001600160a01b038216600090815261016560205260409020805460ff16611f20576101688054600180820183556000929092527f8077777ae4769de06cbfd1c0b8b1f653b51ec156d91a9aca16a4102f19e03d9e0180546001600160a01b0319166001600160a01b038616179055815460ff1916178155611f1a610a8e565b60028201555b604080516020810190915260018201548152611f42908363ffffffff611e5216565b51600182015561016954611f61906001600160a01b0316843085612426565b505050565b611f6f83612558565b611f77612c56565b611f8184846125a2565b90506000611f8f858461262f565b905060006060866001600160a01b031663a9059cbb60e01b8785604051602401611fba929190612e9a565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051611ff89190612e46565b6000604051808303816000865af19150503d8060008114612035576040519150601f19603f3d011682016040523d82523d6000602084013e61203a565b606091505b50915091508180156120645750805115806120645750808060200190518101906120649190612d3a565b6120805760405162461bcd60e51b815260040161058390612fbe565b61208c878785876126ad565b50505050505050565b61209d612c56565b6120a5612c56565b82518451611dd49163ffffffff61270616565b6120c0612c56565b6120c8612c56565b82518451611dd49163ffffffff61271416565b6120e3612c56565b5060408051602081019091526000815290565b600061096683836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612722565b6101a15490565b612147612c56565b61214f612c56565b8351611dd4908463ffffffff61274e16565b612169612c56565b612171612c56565b8351611dd4908463ffffffff61278816565b61218b612c28565b6121958585610fe9565b905060405180606001604052806001151581526020016121c2858460200151611e5290919063ffffffff16565b81526020016121de848460400151611e5290919063ffffffff16565b90526001600160a01b039590951660009081526101656020908152604080832096835260049096018152908590208651815460ff191690151517815590860151516001820155939094015151600290930192909255505050565b612240612c56565b8180600001516001600160ff1b0310156040518060600160405280603381526020016135ec60339139906122875760405162461bcd60e51b81526004016105839190612f54565b50612290612c56565b83518551611e489163ffffffff6127ca16565b303b1590565b600054610100900460ff16806122c257506122c26122a3565b806122d0575060005460ff16155b6122ec5760405162461bcd60e51b8152600401610583906132c6565b600054610100900460ff16158015612317576000805460ff1961ff0019909116610100171660011790555b61231f612810565b612327612891565b8015612339576000805461ff00191690555b50565b600054610100900460ff168061235557506123556122a3565b80612363575060005460ff16155b61237f5760405162461bcd60e51b8152600401610583906132c6565b600054610100900460ff161580156123aa576000805460ff1961ff0019909116610100171660011790555b61232761296b565b6123ba612c56565b6123c2612c56565b8251600013156123d85782516000038152610904565b915182525090565b60008183038183128015906123f55750838113155b8061240a575060008312801561240a57508381135b6109665760405162461bcd60e51b815260040161058390613415565b61242f84612558565b612437612c56565b61244185846125a2565b9050600061244f868461262f565b905060006060876001600160a01b03166323b872dd60e01b88888660405160240161247c93929190612e76565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516124ba9190612e46565b6000604051808303816000865af19150503d80600081146124f7576040519150601f19603f3d011682016040523d82523d6000602084013e6124fc565b606091505b50915091508180156125265750805115806125265750808060200190518101906125269190612d3a565b6125425760405162461bcd60e51b8152600401610583906131cb565b61254e888785876126ad565b5050505050505050565b6000612563826129fb565b6001600160a01b038316600090815260cc60205260409020549091508114610852576001600160a01b0391909116600090815260cc6020526040902055565b6125aa612c56565b61096683846001600160a01b03166370a08231856040518263ffffffff1660e01b81526004016125da9190612e62565b60206040518083038186803b1580156125f257600080fd5b505afa158015612606573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061262a9190612dff565b612ae8565b60008061263b846129fb565b9050601281106126795761267161265982601263ffffffff6120f616565b600a0a61266585611d84565b9063ffffffff61274e16565b915050610904565b6126a561268d60128363ffffffff6120f616565b600a0a61269985611d84565b9063ffffffff61278816565b949350505050565b6126e06126ca6126bd8685612ae8565b839063ffffffff611e5216565b6126d486866125a2565b9063ffffffff612b7a16565b60000b156127005760405162461bcd60e51b8152600401610583906133d3565b50505050565b600061096683836012612bab565b600061096683836012612bca565b600081848411156127465760405162461bcd60e51b81526004016105839190612f54565b505050900390565b60008261275d57506000610904565b8282028284828161276a57fe5b04146109665760405162461bcd60e51b81526004016105839061320c565b600061096683836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612be8565b60008282018183128015906127df5750838112155b806127f457506000831280156127f457508381125b6109665760405162461bcd60e51b8152600401610583906130a1565b600054610100900460ff168061282957506128296122a3565b80612837575060005460ff16155b6128535760405162461bcd60e51b8152600401610583906132c6565b600054610100900460ff16158015612327576000805460ff1961ff0019909116610100171660011790558015612339576000805461ff001916905550565b600054610100900460ff16806128aa57506128aa6122a3565b806128b8575060005460ff16155b6128d45760405162461bcd60e51b8152600401610583906132c6565b600054610100900460ff161580156128ff576000805460ff1961ff0019909116610100171660011790555b6000612909611d88565b606580546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015612339576000805461ff001916905550565b600054610100900460ff168061298457506129846122a3565b80612992575060005460ff16155b6129ae5760405162461bcd60e51b8152600401610583906132c6565b600054610100900460ff161580156129d9576000805460ff1961ff0019909116610100171660011790555b610131805460ff191660011790558015612339576000805461ff001916905550565b6001600160a01b038116600090815260cc6020526040812054806109045760408051600481526024810182526020810180516001600160e01b031663313ce56760e01b17905290516000916060916001600160a01b03871691612a5d91612e46565b600060405180830381855afa9150503d8060008114612a98576040519150601f19603f3d011682016040523d82523d6000602084013e612a9d565b606091505b5091509150818015612aaf5750805115155b612acb5760405162461bcd60e51b815260040161058390613155565b80806020019051810190612adf9190612dff565b95945050505050565b612af0612c56565b6000612afb846129fb565b905060128110612b4057604080516020810190915280612b35612b2584601263ffffffff6120f616565b8690600a0a63ffffffff61278816565b815250915050610904565b604080516020810190915280612b70612b6060128563ffffffff6120f616565b8690600a0a63ffffffff61274e16565b9052949350505050565b805182516000911015612b8f57506001610904565b815183511015612ba25750600019610904565b50600092915050565b60006126a583612699612bbd85612c1f565b879063ffffffff61274e16565b60006126a5612bd883612c1f565b612699868663ffffffff61274e16565b60008183612c095760405162461bcd60e51b81526004016105839190612f54565b506000838581612c1557fe5b0495945050505050565b60ff16600a0a90565b6040518060600160405280600015158152602001612c44612c56565b8152602001612c51612c56565b905290565b6040518060200160405280600081525090565b604051806040016040528060006001600160a01b03168152602001612c51612c56565b600060208284031215612c9d578081fd5b50919050565b600060208284031215612cb4578081fd5b8135610966816135d6565b60008060008060808587031215612cd4578283fd5b8435612cdf816135d6565b93506020850135612cef816135d6565b92506040850135612cff816135d6565b9396929550929360600135925050565b60008060408385031215612d21578182fd5b8235612d2c816135d6565b946020939093013593505050565b600060208284031215612d4b578081fd5b81518015158114610966578182fd5b60008060408385031215612d6c578182fd5b8235612d77816135d6565b9150612d868460208501612c8c565b90509250929050565b600060208284031215612da0578081fd5b6109668383612c8c565b600060208284031215612dbb578081fd5b6040516020810181811067ffffffffffffffff82111715612dda578283fd5b6040529135825250919050565b600060208284031215612df8578081fd5b5035919050565b600060208284031215612e10578081fd5b5051919050565b60008060408385031215612e29578182fd5b823591506020830135612e3b816135d6565b809150509250929050565b60008251612e588184602087016135aa565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b602080825282518282018190526000919060409081850190868401855b82811015612f2057815180516001600160a01b0316855286015151868501529284019290850190600101612ef1565b5091979650505050505050565b901515815260200190565b9315158452915160208401526040830152606082015260800190565b6000602082528251806020840152612f738160408501602087016135aa565b601f01601f19169190910160400192915050565b6020808252601b908201527f5374616b65206d6f7265207468616e20616c6c2062616c616e63650000000000604082015260600190565b6020808252601d908201527f446563696d616c45524332303a207472616e73666572206661696c6564000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b602080825260149082015273496e70757420616d6f756e74206973207a65726f60601b604082015260600190565b60208082526027908201527f5065727046694f776e61626c65557067726164653a2073616d652061732063616040820152666e64696461746560c81b606082015260800190565b60208082526021908201527f5369676e6564536166654d6174683a206164646974696f6e206f766572666c6f6040820152607760f81b606082015260800190565b60208082526027908201527f5065727046694f776e61626c65557067726164653a206e6f7420746865206e656040820152663b9037bbb732b960c91b606082015260800190565b6020808252601290820152714e6f7420656e6f7567682062616c616e636560701b604082015260600190565b60208082526021908201527f446563696d616c45524332303a2067657420646563696d616c73206661696c656040820152601960fa1b606082015260800190565b6020808252818101527f556e7374616b65206d6f7265207468616e206c6f636b65642062616c616e6365604082015260600190565b60208082526021908201527f446563696d616c45524332303a207472616e7366657246726f6d206661696c656040820152601960fa1b606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b60208082526017908201527f6e6f2076657374656420726577617264206f7220666565000000000000000000604082015260600190565b60208082526022908201527f5065727046694f776e61626c65557067726164653a207a65726f206164647265604082015261737360f01b606082015260800190565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201526d195b881a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252600c908201526b10b332b2a737ba34b334b2b960a11b604082015260600190565b6020808252601190820152700616d6f756e742063616e2774206265203607c1b604082015260600190565b6020808252601b908201527f504552502072657761726420686173206e6f7420737461727465640000000000604082015260600190565b60208082526018908201527f6f6e6c792072657761726473446973747269627574696f6e0000000000000000604082015260600190565b60208082526022908201527f446563696d616c45524332303a2062616c616e636520696e636f6e73697374656040820152611b9d60f21b606082015260800190565b60208082526024908201527f5369676e6564536166654d6174683a207375627472616374696f6e206f766572604082015263666c6f7760e01b606082015260800190565b6020808252602f908201527f5065727046694f776e61626c65557067726164653a2063616e6469646174652060408201526e6973207a65726f206164647265737360881b606082015260800190565b6020808252602d908201527f5065727046694f776e61626c65557067726164653a2063616c6c65722069732060408201526c3737ba103a34329037bbb732b960991b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526026908201527f5065727046694f776e61626c65557067726164653a2073616d65206173206f726040820152651a59da5b985b60d21b606082015260800190565b8151151581526020808301515190820152604091820151519181019190915260600190565b9051815260200190565b90815260200190565b60005b838110156135c55781810151838201526020016135ad565b838111156127005750506000910152565b6001600160a01b038116811461233957600080fdfe4d69786564446563696d616c3a2075696e742076616c756520697320626967676572207468616e205f494e543235365f4d4158a2646970667358221220fd14df5c5a4b37b27811a8c9cafa005b1a8823c06acc36278bc56ba5a8bd813364736f6c63430006090033\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Signer, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { SupplyScheduleFake } from \"../SupplyScheduleFake\";\n\nexport class SupplyScheduleFake__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<SupplyScheduleFake> {\n    return super.deploy(overrides || {}) as Promise<SupplyScheduleFake>;\n  }\n  getDeployTransaction(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  attach(address: string): SupplyScheduleFake {\n    return super.attach(address) as SupplyScheduleFake;\n  }\n  connect(signer: Signer): SupplyScheduleFake__factory {\n    return super.connect(signer) as SupplyScheduleFake__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): SupplyScheduleFake {\n    return new Contract(address, _abi, signerOrProvider) as SupplyScheduleFake;\n  }\n}\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"candidate\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"decayRate\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"d\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"inflationRate\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"d\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IMinter\",\n        name: \"_minter\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_inflationRate\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_decayRate\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_mintDuration\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"isMintable\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"isStarted\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"mintDuration\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"mintableSupply\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"mock_getCurrentTimestamp\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_number\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"mock_setBlockNumber\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_timestamp\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"mock_setBlockTimestamp\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"nextMintTime\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"recordMintEvent\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_decayRate\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"setDecayRate\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"setOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"startSchedule\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"supplyDecayEndTime\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"updateOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Signer, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { Ownable } from \"../Ownable\";\n\nexport class Ownable__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<Ownable> {\n    return super.deploy(overrides || {}) as Promise<Ownable>;\n  }\n  getDeployTransaction(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  attach(address: string): Ownable {\n    return super.attach(address) as Ownable;\n  }\n  connect(signer: Signer): Ownable__factory {\n    return super.connect(signer) as Ownable__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): Ownable {\n    return new Contract(address, _abi, signerOrProvider) as Ownable;\n  }\n}\n\nconst _abi = [\n  {\n    inputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"transferOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x608060405234801561001057600080fd5b50600080546001600160a01b0319163317905561012a806100326000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c80638da5cb5b146037578063f2fde38b146051575b600080fd5b603d6062565b6040516048919060e0565b60405180910390f35b6060605c36600460b4565b6071565b005b6000546001600160a01b031681565b6000546001600160a01b03163314608757600080fd5b6001600160a01b0381161560b157600080546001600160a01b0319166001600160a01b0383161790555b50565b60006020828403121560c4578081fd5b81356001600160a01b038116811460d9578182fd5b9392505050565b6001600160a01b039190911681526020019056fea2646970667358221220ce293bebff5dce968a35dead50c2292897176d060e37fa199d8a7494d775215c64736f6c63430006090033\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Signer, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { Pausable } from \"../Pausable\";\n\nexport class Pausable__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<Pausable> {\n    return super.deploy(overrides || {}) as Promise<Pausable>;\n  }\n  getDeployTransaction(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  attach(address: string): Pausable {\n    return super.attach(address) as Pausable;\n  }\n  connect(signer: Signer): Pausable__factory {\n    return super.connect(signer) as Pausable__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): Pausable {\n    return new Contract(address, _abi, signerOrProvider) as Pausable;\n  }\n}\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [],\n    name: \"Pause\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [],\n    name: \"Unpause\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"pause\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"paused\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"transferOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"unpause\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x60806040526000805460ff60a01b1916905534801561001d57600080fd5b50600080546001600160a01b031916331790556102688061003f6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80633f4ba83a1461005c5780635c975abb146100665780638456cb59146100845780638da5cb5b1461008c578063f2fde38b146100a1575b600080fd5b6100646100b4565b005b61006e610117565b60405161007b9190610227565b60405180910390f35b610064610127565b610094610191565b60405161007b9190610213565b6100646100af3660046101e5565b6101a0565b6000546001600160a01b031633146100cb57600080fd5b600054600160a01b900460ff166100e157600080fd5b6000805460ff60a01b191681556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b339190a1565b600054600160a01b900460ff1681565b6000546001600160a01b0316331461013e57600080fd5b600054600160a01b900460ff161561015557600080fd5b6000805460ff60a01b1916600160a01b1781556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff6259190a1565b6000546001600160a01b031681565b6000546001600160a01b031633146101b757600080fd5b6001600160a01b038116156101e257600080546001600160a01b0319166001600160a01b0383161790555b50565b6000602082840312156101f6578081fd5b81356001600160a01b038116811461020c578182fd5b9392505050565b6001600160a01b0391909116815260200190565b90151581526020019056fea2646970667358221220e103198d1c5226144efd6a797f9ea9d40aacfbfb6a997c77283b5013b6dbd24b64736f6c63430006090033\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport {\n  Signer,\n  BigNumberish,\n  Contract,\n  ContractFactory,\n  Overrides,\n} from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { TetherToken } from \"../TetherToken\";\n\nexport class TetherToken__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    _initialSupply: BigNumberish,\n    _name: string,\n    _symbol: string,\n    _decimals: BigNumberish,\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<TetherToken> {\n    return super.deploy(\n      _initialSupply,\n      _name,\n      _symbol,\n      _decimals,\n      overrides || {}\n    ) as Promise<TetherToken>;\n  }\n  getDeployTransaction(\n    _initialSupply: BigNumberish,\n    _name: string,\n    _symbol: string,\n    _decimals: BigNumberish,\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(\n      _initialSupply,\n      _name,\n      _symbol,\n      _decimals,\n      overrides || {}\n    );\n  }\n  attach(address: string): TetherToken {\n    return super.attach(address) as TetherToken;\n  }\n  connect(signer: Signer): TetherToken__factory {\n    return super.connect(signer) as TetherToken__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): TetherToken {\n    return new Contract(address, _abi, signerOrProvider) as TetherToken;\n  }\n}\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_initialSupply\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"string\",\n        name: \"_name\",\n        type: \"string\",\n      },\n      {\n        internalType: \"string\",\n        name: \"_symbol\",\n        type: \"string\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_decimals\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"_user\",\n        type: \"address\",\n      },\n    ],\n    name: \"AddedBlackList\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"newAddress\",\n        type: \"address\",\n      },\n    ],\n    name: \"Deprecate\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"_blackListedUser\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"_balance\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"DestroyedBlackFunds\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Issue\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"feeBasisPoints\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"maxFee\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Params\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [],\n    name: \"Pause\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Redeem\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"_user\",\n        type: \"address\",\n      },\n    ],\n    name: \"RemovedBlackList\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [],\n    name: \"Unpause\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"MAX_UINT\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"_totalSupply\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_evilUser\",\n        type: \"address\",\n      },\n    ],\n    name: \"addBlackList\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_owner\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_spender\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"remaining\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowed\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"who\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"balances\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"basisPointsRate\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_upgradedAddress\",\n        type: \"address\",\n      },\n    ],\n    name: \"deprecate\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"deprecated\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_blackListedUser\",\n        type: \"address\",\n      },\n    ],\n    name: \"destroyBlackFunds\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_maker\",\n        type: \"address\",\n      },\n    ],\n    name: \"getBlackListStatus\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getOwner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"isBlackListed\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"issue\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"maximumFee\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"pause\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"paused\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"redeem\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_clearedUser\",\n        type: \"address\",\n      },\n    ],\n    name: \"removeBlackList\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"newBasisPoints\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"newMaxFee\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"setParams\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_from\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"transferOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"unpause\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"upgradedAddress\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x60806040526000805460ff60a01b1916815560038190556004553480156200002657600080fd5b506040516200185b3803806200185b833981016040819052620000499162000209565b600080546001600160a01b031916331790556001849055825162000075906007906020860190620000bd565b5081516200008b906008906020850190620000bd565b506009555050600080546001600160a01b0316815260026020526040902055600a805460ff60a01b1916905562000282565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200010057805160ff191683800117855562000130565b8280016001018555821562000130579182015b828111156200013057825182559160200191906001019062000113565b506200013e92915062000142565b5090565b6200015f91905b808211156200013e576000815560010162000149565b90565b600082601f83011262000173578081fd5b81516001600160401b03808211156200018a578283fd5b6040516020601f8401601f1916820181018381118382101715620001ac578586fd5b80604052508194508382528681858801011115620001c957600080fd5b600092505b83831015620001ed5785830181015182840182015291820191620001ce565b83831115620001ff5760008185840101525b5050505092915050565b600080600080608085870312156200021f578384fd5b845160208601519094506001600160401b03808211156200023e578485fd5b6200024c8883890162000162565b9450604087015191508082111562000262578384fd5b50620002718782880162000162565b606096909601519497939650505050565b6115c980620002926000396000f3fe608060405234801561001057600080fd5b50600436106101f05760003560e01c806370a082311161010f578063db006a75116100a2578063e4997dc511610071578063e4997dc5146103ae578063e5b5019a146103c1578063f2fde38b146103c9578063f3bdc228146103dc576101f0565b8063db006a751461036d578063dd62ed3e14610380578063dd644f7214610393578063e47d60601461039b576101f0565b806395d89b41116100de57806395d89b411461032c578063a9059cbb14610334578063c0324c7714610347578063cc872b661461035a576101f0565b806370a08231146103015780638456cb5914610314578063893d20e81461031c5780638da5cb5b14610324576101f0565b806327e235e3116101875780633f4ba83a116101565780633f4ba83a146102cb57806359bf1abe146102d35780635c658165146102e65780635c975abb146102f9576101f0565b806327e235e3146102a0578063313ce567146102b357806335390714146102bb5780633eaaf86b146102c3576101f0565b80630ecb93c0116101c35780630ecb93c01461025057806318160ddd1461026357806323b872dd1461027857806326976e3f1461028b576101f0565b806306fdde03146101f55780630753c30c14610213578063095ea7b3146102285780630e136b191461023b575b600080fd5b6101fd6103ef565b60405161020a91906114f4565b60405180910390f35b61022661022136600461134a565b61047d565b005b6102266102363660046113d9565b6104f9565b610243610595565b60405161020a91906114e9565b61022661025e36600461134a565b6105a5565b61026b61060f565b60405161020a9190611547565b610226610286366004611399565b6106b9565b610293610749565b60405161020a9190611454565b61026b6102ae36600461134a565b610758565b61026b61076a565b61026b610770565b61026b610776565b61022661077c565b6102436102e136600461134a565b6107df565b61026b6102f4366004611365565b610801565b61024361081e565b61026b61030f36600461134a565b61082e565b6102266108d3565b61029361093d565b61029361094c565b6101fd61095b565b6102266103423660046113d9565b6109b6565b610226610355366004611433565b610a75565b610226610368366004611403565b610b05565b61022661037b366004611403565b610ba8565b61026b61038e366004611365565b610c4b565b61026b610cf9565b6102436103a936600461134a565b610cff565b6102266103bc36600461134a565b610d14565b61026b610d7b565b6102266103d736600461134a565b610d81565b6102266103ea36600461134a565b610dc6565b6007805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104755780601f1061044a57610100808354040283529160200191610475565b820191906000526020600020905b81548152906001019060200180831161045857829003601f168201915b505050505081565b6000546001600160a01b0316331461049457600080fd5b600a8054600160a01b60ff60a01b19909116176001600160a01b0319166001600160a01b0383161790556040517fcc358699805e9a8b7f77b522628c7cb9abd07d9efb86b6fb616af1609036a99e906104ee908390611454565b60405180910390a150565b6040604436101561050957600080fd5b600a54600160a01b900460ff161561058657600a5460405163aee92d3360e01b81526001600160a01b039091169063aee92d339061054f90339087908790600401611492565b600060405180830381600087803b15801561056957600080fd5b505af115801561057d573d6000803e3d6000fd5b50505050610590565b6105908383610e66565b505050565b600a54600160a01b900460ff1681565b6000546001600160a01b031633146105bc57600080fd5b6001600160a01b03811660009081526006602052604090819020805460ff19166001179055517f42e160154868087d6bfdc0ca23d96a1c1cfa32f1b72ba9ba27b69b98a0d819dc906104ee908390611454565b600a54600090600160a01b900460ff16156106b157600a60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561067257600080fd5b505afa158015610686573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106aa919061141b565b90506106b6565b506001545b90565b600054600160a01b900460ff16156106d057600080fd5b6001600160a01b03831660009081526006602052604090205460ff16156106f657600080fd5b600a54600160a01b900460ff161561073e57600a54604051638b477adb60e01b81526001600160a01b0390911690638b477adb9061054f903390879087908790600401611468565b610590838383610f18565b600a546001600160a01b031681565b60026020526000908152604090205481565b60095481565b60045481565b60015481565b6000546001600160a01b0316331461079357600080fd5b600054600160a01b900460ff166107a957600080fd5b6000805460ff60a01b191681556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b339190a1565b6001600160a01b03811660009081526006602052604090205460ff165b919050565b600560209081526000928352604080842090915290825290205481565b600054600160a01b900460ff1681565b600a54600090600160a01b900460ff16156108ca57600a546040516370a0823160e01b81526001600160a01b03909116906370a0823190610873908590600401611454565b60206040518083038186803b15801561088b57600080fd5b505afa15801561089f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c3919061141b565b90506107fc565b6108c382611113565b6000546001600160a01b031633146108ea57600080fd5b600054600160a01b900460ff161561090157600080fd5b6000805460ff60a01b1916600160a01b1781556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff6259190a1565b6000546001600160a01b031690565b6000546001600160a01b031681565b6008805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104755780601f1061044a57610100808354040283529160200191610475565b600054600160a01b900460ff16156109cd57600080fd5b3360009081526006602052604090205460ff16156109ea57600080fd5b600a54600160a01b900460ff1615610a6757600a5460405163370c4c0560e11b81526001600160a01b0390911690636e18980a90610a3090339086908690600401611492565b600060405180830381600087803b158015610a4a57600080fd5b505af1158015610a5e573d6000803e3d6000fd5b50505050610a71565b610a71828261112e565b5050565b6000546001600160a01b03163314610a8c57600080fd5b60148210610a9957600080fd5b60328110610aa657600080fd5b6003829055600954610ac2908290600a0a63ffffffff6112a716565b60048190556003546040517fb044a1e409eac5c48e5af22d4af52670dd1a99059537a78b31b48c6500a6354e92610af99291611550565b60405180910390a15050565b6000546001600160a01b03163314610b1c57600080fd5b60015481810111610b2c57600080fd5b600080546001600160a01b031681526002602052604090205481810111610b5257600080fd5b600080546001600160a01b0316815260026020526040908190208054830190556001805483019055517fcb8241adb0c3fdb35b70c24ce35c5eb0c17af7431c99f827d44a445ca624176a906104ee908390611547565b6000546001600160a01b03163314610bbf57600080fd5b806001541015610bce57600080fd5b600080546001600160a01b0316815260026020526040902054811115610bf357600080fd5b600180548290039055600080546001600160a01b03168152600260205260409081902080548390039055517f702d5967f45f6513a38ffc42d6ba9bf230bd40e8f53b16363c7eb4fd2deb9a44906104ee908390611547565b600a54600090600160a01b900460ff1615610ce957600a54604051636eb1769f60e11b81526001600160a01b039091169063dd62ed3e90610c9290869086906004016114b6565b60206040518083038186803b158015610caa57600080fd5b505afa158015610cbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce2919061141b565b9050610cf3565b610ce283836112d2565b92915050565b60035481565b60066020526000908152604090205460ff1681565b6000546001600160a01b03163314610d2b57600080fd5b6001600160a01b03811660009081526006602052604090819020805460ff19169055517fd7e9ec6e6ecd65492dce6bf513cd6867560d49544421d0783ddf06e76c24470c906104ee908390611454565b60001981565b6000546001600160a01b03163314610d9857600080fd5b6001600160a01b03811615610dc357600080546001600160a01b0319166001600160a01b0383161790555b50565b6000546001600160a01b03163314610ddd57600080fd5b6001600160a01b03811660009081526006602052604090205460ff16610e0257600080fd5b6000610e0d8261082e565b6001600160a01b03831660009081526002602052604080822091909155600180548390039055519091507f61e6e66b0d6339b2980aecc6ccc0039736791f0ccde9ed512e789a7fbdd698c690610af990849084906114d0565b60406044361015610e7657600080fd5b8115801590610ea757503360009081526005602090815260408083206001600160a01b038716845290915290205415155b15610eb157600080fd5b3360008181526005602090815260408083206001600160a01b03881680855292529182902085905590519091907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610f0b908690611547565b60405180910390a3505050565b60606064361015610f2857600080fd5b6001600160a01b0384166000908152600560209081526040808320338452909152812054600354909190610f779061271090610f6b90879063ffffffff6112a716565b9063ffffffff6112fd16565b9050600454811115610f8857506004545b600019821015610fc757610fa2828563ffffffff61131216565b6001600160a01b03871660009081526005602090815260408083203384529091529020555b6000610fd9858363ffffffff61131216565b6001600160a01b038816600090815260026020526040902054909150611005908663ffffffff61131216565b6001600160a01b03808916600090815260026020526040808220939093559088168152205461103a908263ffffffff61132416565b6001600160a01b03871660009081526002602052604090205581156110d157600080546001600160a01b0316815260026020526040902054611082908363ffffffff61132416565b600080546001600160a01b0390811682526002602052604080832093909355905491519181169190891690600080516020611574833981519152906110c8908690611547565b60405180910390a35b856001600160a01b0316876001600160a01b0316600080516020611574833981519152836040516111029190611547565b60405180910390a350505050505050565b6001600160a01b031660009081526002602052604090205490565b6040604436101561113e57600080fd5b600061115b612710610f6b600354866112a790919063ffffffff16565b905060045481111561116c57506004545b600061117e848363ffffffff61131216565b336000908152600260205260409020549091506111a1908563ffffffff61131216565b33600090815260026020526040808220929092556001600160a01b038716815220546111d3908263ffffffff61132416565b6001600160a01b038616600090815260026020526040902055811561126757600080546001600160a01b031681526002602052604090205461121b908363ffffffff61132416565b600080546001600160a01b03908116825260026020526040808320939093559054915191169033906000805160206115748339815191529061125e908690611547565b60405180910390a35b846001600160a01b0316336001600160a01b0316600080516020611574833981519152836040516112989190611547565b60405180910390a35050505050565b6000826112b657506000610cf3565b828202828482816112c357fe5b04146112cb57fe5b9392505050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205490565b60008082848161130957fe5b04949350505050565b60008282111561131e57fe5b50900390565b6000828201838110156112cb57fe5b80356001600160a01b0381168114610cf357600080fd5b60006020828403121561135b578081fd5b6112cb8383611333565b60008060408385031215611377578081fd5b6113818484611333565b91506113908460208501611333565b90509250929050565b6000806000606084860312156113ad578081fd5b83356113b88161155e565b925060208401356113c88161155e565b929592945050506040919091013590565b600080604083850312156113eb578182fd5b6113f58484611333565b946020939093013593505050565b600060208284031215611414578081fd5b5035919050565b60006020828403121561142c578081fd5b5051919050565b60008060408385031215611445578182fd5b50508035926020909101359150565b6001600160a01b0391909116815260200190565b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b6000602080835283518082850152825b8181101561152057858101830151858201604001528201611504565b818111156115315783604083870101525b50601f01601f1916929092016040019392505050565b90815260200190565b918252602082015260400190565b6001600160a01b0381168114610dc357600080fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa26469706673582212209dd31ab2a8d2427b0628f8b7e597ed179186a27197f89d0e0348192badcc976f64736f6c63430006090033\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Signer, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { TraderWallet } from \"../TraderWallet\";\n\nexport class TraderWallet__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    _clearingHouse: string,\n    _token: string,\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<TraderWallet> {\n    return super.deploy(\n      _clearingHouse,\n      _token,\n      overrides || {}\n    ) as Promise<TraderWallet>;\n  }\n  getDeployTransaction(\n    _clearingHouse: string,\n    _token: string,\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(_clearingHouse, _token, overrides || {});\n  }\n  attach(address: string): TraderWallet {\n    return super.attach(address) as TraderWallet;\n  }\n  connect(signer: Signer): TraderWallet__factory {\n    return super.connect(signer) as TraderWallet__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): TraderWallet {\n    return new Contract(address, _abi, signerOrProvider) as TraderWallet;\n  }\n}\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"contract ClearingHouseFake\",\n        name: \"_clearingHouse\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract IERC20\",\n        name: \"_token\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    inputs: [],\n    name: \"clearingHouse\",\n    outputs: [\n      {\n        internalType: \"contract ClearingHouseFake\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract Amm\",\n        name: \"_amm\",\n        type: \"address\",\n      },\n    ],\n    name: \"closePosition\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract Amm\",\n        name: \"_amm\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_trader\",\n        type: \"address\",\n      },\n    ],\n    name: \"liquidate\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"enum TraderWallet.ActionType\",\n        name: \"_action1\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"_setRestriction\",\n        type: \"bool\",\n      },\n      {\n        internalType: \"enum TraderWallet.ActionType\",\n        name: \"_action2\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"contract Amm\",\n        name: \"_amm\",\n        type: \"address\",\n      },\n      {\n        internalType: \"enum ClearingHouse.Side\",\n        name: \"_side\",\n        type: \"uint8\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_quoteAssetAmount\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_leverage\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_baseAssetAmountLimit\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_trader\",\n        type: \"address\",\n      },\n    ],\n    name: \"multiActions\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract Amm\",\n        name: \"_amm\",\n        type: \"address\",\n      },\n      {\n        internalType: \"enum ClearingHouse.Side\",\n        name: \"_side\",\n        type: \"uint8\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_quoteAssetAmount\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_leverage\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_minBaseAssetAmount\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"openPosition\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract Amm\",\n        name: \"_amm\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_trader1\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_trader2\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_trader3\",\n        type: \"address\",\n      },\n    ],\n    name: \"threeLiquidations\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract Amm\",\n        name: \"_amm\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_trader1\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_trader2\",\n        type: \"address\",\n      },\n    ],\n    name: \"twoLiquidations\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x608060405234801561001057600080fd5b50604051610bc2380380610bc283398101604081905261002f916100fb565b600080546001600160a01b0319166001600160a01b03848116919091179182905560405163095ea7b360e01b81528382169263095ea7b39261007a9291169060001990600401610134565b602060405180830381600087803b15801561009457600080fd5b505af11580156100a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100cc91906100d4565b505050610165565b6000602082840312156100e5578081fd5b815180151581146100f4578182fd5b9392505050565b6000806040838503121561010d578081fd5b82516101188161014d565b60208401519092506101298161014d565b809150509250929050565b6001600160a01b03929092168252602082015260400190565b6001600160a01b038116811461016257600080fd5b50565b610a4e806101746000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063893d242d1161005b578063893d242d146100c85780639e02076e146100db578063b5be520d146100ee578063f2a6b510146101015761007d565b80630af96800146100825780632f86e2dd146100a057806386b9d81f146100b5575b600080fd5b61008a610114565b6040516100979190610936565b60405180910390f35b6100b36100ae3660046106d6565b610123565b005b6100b36100c33660046106f9565b61018f565b6100b36100d63660046107d6565b6101f7565b6100b36100e9366004610840565b610268565b6100b36100fc36600461077b565b61031f565b6100b361010f366004610731565b610451565b6000546001600160a01b031681565b6000546001600160a01b031663a8c1b0bc8261013d61051e565b6040518363ffffffff1660e01b815260040161015a9291906109d6565b600060405180830381600087803b15801561017457600080fd5b505af1158015610188573d6000803e3d6000fd5b5050505050565b6000546040516386b9d81f60e01b81526001600160a01b03909116906386b9d81f906101c1908590859060040161094a565b600060405180830381600087803b1580156101db57600080fd5b505af11580156101ef573d6000803e3d6000fd5b505050505050565b60005460405163893d242d60e01b81526001600160a01b039091169063893d242d9061022f9088908890889088908890600401610964565b600060405180830381600087803b15801561024957600080fd5b505af115801561025d573d6000803e3d6000fd5b505050505050505050565b6102a189878761027d368990038901896108f9565b61028c368990038901896108f9565b61029b368990038901896108f9565b87610539565b871561030a576000546040516310b6e44b60e01b81526001600160a01b03909116906310b6e44b906102d7908990600401610936565b600060405180830381600087803b1580156102f157600080fd5b505af1158015610305573d6000803e3d6000fd5b505050505b61025d87878761027d368990038901896108f9565b6000546040516386b9d81f60e01b81526001600160a01b03909116906386b9d81f90610351908790879060040161094a565b600060405180830381600087803b15801561036b57600080fd5b505af115801561037f573d6000803e3d6000fd5b50506000546040516386b9d81f60e01b81526001600160a01b0390911692506386b9d81f91506103b5908790869060040161094a565b600060405180830381600087803b1580156103cf57600080fd5b505af11580156103e3573d6000803e3d6000fd5b50506000546040516386b9d81f60e01b81526001600160a01b0390911692506386b9d81f9150610419908790859060040161094a565b600060405180830381600087803b15801561043357600080fd5b505af1158015610447573d6000803e3d6000fd5b5050505050505050565b6000546040516386b9d81f60e01b81526001600160a01b03909116906386b9d81f90610483908690869060040161094a565b600060405180830381600087803b15801561049d57600080fd5b505af11580156104b1573d6000803e3d6000fd5b50506000546040516386b9d81f60e01b81526001600160a01b0390911692506386b9d81f91506104e7908690859060040161094a565b600060405180830381600087803b15801561050157600080fd5b505af1158015610515573d6000803e3d6000fd5b50505050505050565b610526610688565b5060408051602081019091526000815290565b600087600281111561054757fe5b14156105bc5760005460405163893d242d60e01b81526001600160a01b039091169063893d242d90610585908990899089908990899060040161099d565b600060405180830381600087803b15801561059f57600080fd5b505af11580156105b3573d6000803e3d6000fd5b50505050610515565b60018760028111156105ca57fe5b1415610607576000546001600160a01b031663a8c1b0bc876105ea61051e565b6040518363ffffffff1660e01b81526004016105859291906109d6565b600287600281111561061557fe5b1415610515576000546040516386b9d81f60e01b81526001600160a01b03909116906386b9d81f9061064d908990859060040161094a565b600060405180830381600087803b15801561066757600080fd5b505af115801561067b573d6000803e3d6000fd5b5050505050505050505050565b6040518060200160405280600081525090565b8035600381106106aa57600080fd5b92915050565b8035600281106106aa57600080fd5b6000602082840312156106d0578081fd5b50919050565b6000602082840312156106e7578081fd5b81356106f281610a00565b9392505050565b6000806040838503121561070b578081fd5b823561071681610a00565b9150602083013561072681610a00565b809150509250929050565b600080600060608486031215610745578081fd5b833561075081610a00565b9250602084013561076081610a00565b9150604084013561077081610a00565b809150509250925092565b60008060008060808587031215610790578081fd5b843561079b81610a00565b935060208501356107ab81610a00565b925060408501356107bb81610a00565b915060608501356107cb81610a00565b939692955090935050565b600080600080600060a086880312156107ed578081fd5b85356107f881610a00565b945061080787602088016106b0565b935061081687604088016106bf565b925061082587606088016106bf565b915061083487608088016106bf565b90509295509295909350565b60008060008060008060008060006101208a8c03121561085e578384fd5b6108688b8b61069b565b985060208a0135801515811461087c578485fd5b975061088b8b60408c0161069b565b965060608a013561089b81610a00565b95506108aa8b60808c016106b0565b94506108b98b60a08c016106bf565b93506108c88b60c08c016106bf565b92506108d78b60e08c016106bf565b91506101008a01356108e881610a00565b809150509295985092959850929598565b60006020828403121561090a578081fd5b6040516020810181811067ffffffffffffffff82111715610929578283fd5b6040529135825250919050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b038616815260a0810161097d866109f0565b602083015293356040820152913560608301523560809091015292915050565b6001600160a01b038616815260a081016109b6866109f0565b602083015293516040820152915160608301525160809091015292915050565b6001600160a01b0392909216825251602082015260400190565b80600281106109fb57fe5b919050565b6001600160a01b0381168114610a1557600080fd5b5056fea26469706673582212201a4449e34fd4d195ae678242dc900992fdedfc378cc71f7e32086e5bff3d797264736f6c63430006090033\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Signer, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { UpgradableContractV1 } from \"../UpgradableContractV1\";\n\nexport class UpgradableContractV1__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<UpgradableContractV1> {\n    return super.deploy(overrides || {}) as Promise<UpgradableContractV1>;\n  }\n  getDeployTransaction(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  attach(address: string): UpgradableContractV1 {\n    return super.attach(address) as UpgradableContractV1;\n  }\n  connect(signer: Signer): UpgradableContractV1__factory {\n    return super.connect(signer) as UpgradableContractV1__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): UpgradableContractV1 {\n    return new Contract(\n      address,\n      _abi,\n      signerOrProvider\n    ) as UpgradableContractV1;\n  }\n}\n\nconst _abi = [\n  {\n    inputs: [],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"version\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x608060405234801561001057600080fd5b506101c6806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806354fd4d50146100465780638129fc1c146100605780638da5cb5b1461006a575b600080fd5b61004e61008e565b60408051918252519081900360200190f35b610068610094565b005b61007261014d565b604080516001600160a01b039092168252519081900360200190f35b60335481565b600054610100900460ff16806100ad57506100ad61015c565b806100bb575060005460ff16155b6100f65760405162461bcd60e51b815260040180806020018281038252602e815260200180610163602e913960400191505060405180910390fd5b600054610100900460ff16158015610121576000805460ff1961ff0019909116610100171660011790555b6001603355603480546001600160a01b03191633179055801561014a576000805461ff00191690555b50565b6034546001600160a01b031681565b303b159056fe436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a6564a26469706673582212208239e444895b9509949fb59d7843a0630306381b708b670c68c3559c4cc9b34f64736f6c63430006090033\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Signer, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { UpgradableContractV2 } from \"../UpgradableContractV2\";\n\nexport class UpgradableContractV2__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<UpgradableContractV2> {\n    return super.deploy(overrides || {}) as Promise<UpgradableContractV2>;\n  }\n  getDeployTransaction(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  attach(address: string): UpgradableContractV2 {\n    return super.attach(address) as UpgradableContractV2;\n  }\n  connect(signer: Signer): UpgradableContractV2__factory {\n    return super.connect(signer) as UpgradableContractV2__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): UpgradableContractV2 {\n    return new Contract(\n      address,\n      _abi,\n      signerOrProvider\n    ) as UpgradableContractV2;\n  }\n}\n\nconst _abi = [\n  {\n    inputs: [],\n    name: \"increaseVersion\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"version\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x608060405234801561001057600080fd5b506101e4806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80634a502e4a1461005157806354fd4d501461005b5780638129fc1c146100755780638da5cb5b1461007d575b600080fd5b6100596100a1565b005b6100636100ac565b60408051918252519081900360200190f35b6100596100b2565b61008561016b565b604080516001600160a01b039092168252519081900360200190f35b603380546001019055565b60335481565b600054610100900460ff16806100cb57506100cb61017a565b806100d9575060005460ff16155b6101145760405162461bcd60e51b815260040180806020018281038252602e815260200180610181602e913960400191505060405180910390fd5b600054610100900460ff1615801561013f576000805460ff1961ff0019909116610100171660011790555b6002603355603480546001600160a01b031916331790558015610168576000805461ff00191690555b50565b6034546001600160a01b031681565b303b159056fe436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a6564a264697066735822122012e4d16590d2416a8b00bc2e9ee955729c38a9346a349a855fdfbdd895603b5264736f6c63430006090033\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Signer, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { OwnerPausableUpgradeSafe } from \"../OwnerPausableUpgradeSafe\";\n\nexport class OwnerPausableUpgradeSafe__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<OwnerPausableUpgradeSafe> {\n    return super.deploy(overrides || {}) as Promise<OwnerPausableUpgradeSafe>;\n  }\n  getDeployTransaction(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  attach(address: string): OwnerPausableUpgradeSafe {\n    return super.attach(address) as OwnerPausableUpgradeSafe;\n  }\n  connect(signer: Signer): OwnerPausableUpgradeSafe__factory {\n    return super.connect(signer) as OwnerPausableUpgradeSafe__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): OwnerPausableUpgradeSafe {\n    return new Contract(\n      address,\n      _abi,\n      signerOrProvider\n    ) as OwnerPausableUpgradeSafe;\n  }\n}\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"Paused\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"Unpaused\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"candidate\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"pause\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"paused\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"setOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"unpause\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"updateOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x608060405234801561001057600080fd5b5061073d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063715018a61161005b578063715018a6146100fd5780638456cb59146101055780638da5cb5b1461010d578063bc5920ba1461011557610088565b806313af40351461008d5780633f4ba83a146100b55780635c975abb146100bd5780636c8381f8146100d9575b600080fd5b6100b3600480360360208110156100a357600080fd5b50356001600160a01b031661011d565b005b6100b3610272565b6100c56102d0565b604080519115158252519081900360200190f35b6100e16102d9565b604080516001600160a01b039092168252519081900360200190f35b6100b36102e8565b6100b3610386565b6100e16103e2565b6100b36103f1565b6101256104f2565b6065546001600160a01b039081169116146101715760405162461bcd60e51b815260040180806020018281038252602d8152602001806106b5602d913960400191505060405180910390fd5b6001600160a01b0381166101b65760405162461bcd60e51b81526004018080602001828103825260228152602001806106646022913960400191505060405180910390fd5b6065546001600160a01b03828116911614156102035760405162461bcd60e51b81526004018080602001828103825260268152602001806106e26026913960400191505060405180910390fd5b6066546001600160a01b03828116911614156102505760405162461bcd60e51b81526004018080602001828103825260278152602001806106166027913960400191505060405180910390fd5b606680546001600160a01b0319166001600160a01b0392909216919091179055565b61027a6104f2565b6065546001600160a01b039081169116146102c65760405162461bcd60e51b815260040180806020018281038252602d8152602001806106b5602d913960400191505060405180910390fd5b6102ce6104f6565b565b60995460ff1690565b6066546001600160a01b031690565b6102f06104f2565b6065546001600160a01b0390811691161461033c5760405162461bcd60e51b815260040180806020018281038252602d8152602001806106b5602d913960400191505060405180910390fd5b6065546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3606580546001600160a01b0319169055565b61038e6104f2565b6065546001600160a01b039081169116146103da5760405162461bcd60e51b815260040180806020018281038252602d8152602001806106b5602d913960400191505060405180910390fd5b6102ce610594565b6065546001600160a01b031690565b6066546001600160a01b03166104385760405162461bcd60e51b815260040180806020018281038252602f815260200180610686602f913960400191505060405180910390fd5b6104406104f2565b6066546001600160a01b0390811691161461048c5760405162461bcd60e51b815260040180806020018281038252602781526020018061063d6027913960400191505060405180910390fd5b6066546065546040516001600160a01b0392831692909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360668054606580546001600160a01b03199081166001600160a01b03841617909155169055565b3390565b60995460ff16610544576040805162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015290519081900360640190fd5b6099805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6105776104f2565b604080516001600160a01b039092168252519081900360200190a1565b60995460ff16156105df576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6099805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586105776104f256fe5065727046694f776e61626c65557067726164653a2073616d652061732063616e6469646174655065727046694f776e61626c65557067726164653a206e6f7420746865206e6577206f776e65725065727046694f776e61626c65557067726164653a207a65726f20616464726573735065727046694f776e61626c65557067726164653a2063616e646964617465206973207a65726f20616464726573735065727046694f776e61626c65557067726164653a2063616c6c6572206973206e6f7420746865206f776e65725065727046694f776e61626c65557067726164653a2073616d65206173206f726967696e616ca26469706673582212204e48a85c189e18302e9149b89318d946f6e3f95a9ea145b2ec52e0dd28fe5e0e64736f6c63430006090033\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Signer, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { RewardsDistribution } from \"../RewardsDistribution\";\n\nexport class RewardsDistribution__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<RewardsDistribution> {\n    return super.deploy(overrides || {}) as Promise<RewardsDistribution>;\n  }\n  getDeployTransaction(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  attach(address: string): RewardsDistribution {\n    return super.attach(address) as RewardsDistribution;\n  }\n  connect(signer: Signer): RewardsDistribution__factory {\n    return super.connect(signer) as RewardsDistribution__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): RewardsDistribution {\n    return new Contract(address, _abi, signerOrProvider) as RewardsDistribution;\n  }\n}\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"reward\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"timestamp\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"RewardDistributed\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_destination\",\n        type: \"address\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_amount\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"addRewardsDistribution\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"candidate\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"_perpToken\",\n        type: \"address\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_amount\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"distributeRewards\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"distributions\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"destination\",\n        type: \"address\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"amount\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_index\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_destination\",\n        type: \"address\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_amount\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"editRewardsDistribution\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_rewardsController\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract IRewardRecipient\",\n        name: \"_defaultRecipient\",\n        type: \"address\",\n      },\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_index\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"removeRewardsDistribution\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"setOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"updateOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x608060405234801561001057600080fd5b50611a31806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80636c8381f8116100715780636c8381f814610126578063715018a61461013b5780638da5cb5b14610143578063bb69b0931461014b578063bc5920ba1461015e578063d34d4c3614610166576100a9565b806304770914146100ae57806313af4035146100c35780634487d3df146100d6578063485cc955146101005780634e0888ce14610113575b600080fd5b6100c16100bc3660046114a8565b610179565b005b6100c16100d13660046113cf565b61025c565b6100e96100e4366004611478565b610335565b6040516100f7929190611516565b60405180910390f35b6100c161010e3660046113eb565b610375565b6100c1610121366004611423565b610432565b61012e610552565b6040516100f79190611502565b6100c1610561565b61012e6105e0565b6100c1610159366004611478565b6105ef565b6100c1610708565b6100c1610174366004611423565b6107cb565b610181610b29565b6065546001600160a01b039081169116146101b75760405162461bcd60e51b81526004016101ae906118d8565b60405180910390fd5b61010054158015906101d0575061010054600019018311155b6101ec5760405162461bcd60e51b81526004016101ae90611925565b8161010084815481106101fb57fe5b906000526020600020906002020160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555080610100848154811061023f57fe5b600091825260209091209151600160029092029092010155505050565b610264610b29565b6065546001600160a01b039081169116146102915760405162461bcd60e51b81526004016101ae906118d8565b6001600160a01b0381166102b75760405162461bcd60e51b81526004016101ae90611787565b6065546001600160a01b03828116911614156102e55760405162461bcd60e51b81526004016101ae90611952565b6066546001600160a01b03828116911614156103135760405162461bcd60e51b81526004016101ae9061164e565b606680546001600160a01b0319166001600160a01b0392909216919091179055565b610100818154811061034357fe5b6000918252602091829020600290910201805460408051938401905260019091015482526001600160a01b0316915082565b600054610100900460ff168061038e575061038e610b2d565b8061039c575060005460ff16155b6103b85760405162461bcd60e51b81526004016101ae906117c9565b600054610100900460ff161580156103e3576000805460ff1961ff0019909116610100171660011790555b6103eb610b33565b60fe80546001600160a01b038086166001600160a01b03199283161790925560ff805492851692909116919091179055801561042d576000805461ff00191690555b505050565b61043a610b29565b6065546001600160a01b039081169116146104675760405162461bcd60e51b81526004016101ae906118d8565b6001600160a01b03821661048d5760405162461bcd60e51b81526004016101ae90611617565b61049681610bc6565b6104b25760405162461bcd60e51b81526004016101ae90611817565b6104ba611357565b50604080518082019091526001600160a01b03928316815260208101918252610100805460018101825560009190915290517f45e010b9ae401e2eb71529478da8bd513a9bdc2d095a111e324f5b95c09ed87b600290920291820180546001600160a01b031916919094161790925551517f45e010b9ae401e2eb71529478da8bd513a9bdc2d095a111e324f5b95c09ed87c90910155565b6066546001600160a01b031690565b610569610b29565b6065546001600160a01b039081169116146105965760405162461bcd60e51b81526004016101ae906118d8565b6065546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3606580546001600160a01b0319169055565b6065546001600160a01b031690565b6105f7610b29565b6065546001600160a01b039081169116146106245760405162461bcd60e51b81526004016101ae906118d8565b610100541580159061063d575061010054600019018111155b6106595760405162461bcd60e51b81526004016101ae90611925565b61010054600019018110156106d0576101008054600019810190811061067b57fe5b9060005260206000209060020201610100828154811061069757fe5b60009182526020909120825460029092020180546001600160a01b0319166001600160a01b039092169190911781556001918201549101555b6101008054806106dc57fe5b60008281526020812060026000199093019283020180546001600160a01b031916815560010155905550565b6066546001600160a01b03166107305760405162461bcd60e51b81526004016101ae90611889565b610738610b29565b6066546001600160a01b039081169116146107655760405162461bcd60e51b81526004016101ae90611695565b6066546065546040516001600160a01b0392831692909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360668054606580546001600160a01b03199081166001600160a01b03841617909155169055565b60fe546001600160a01b03166107df610b29565b6001600160a01b0316146108055760405162461bcd60e51b81526004016101ae9061157c565b61080e81610bc6565b61082061081b8430610bca565b610bc6565b101561083e5760405162461bcd60e51b81526004016101ae9061171d565b61084661137f565b508060005b61010054811015610a5e5760006001600160a01b0316610100828154811061086f57fe5b60009182526020909120600290910201546001600160a01b0316148015906108cb57506108c861010082815481106108a357fe5b6000918252602091829020604080519384019052600160029092020101548152610bc6565b15155b15610a565761090e61010082815481106108e157fe5b6000918252602091829020604080519384019052600160029092020101548152839063ffffffff610c6016565b915061097384610100838154811061092257fe5b600091825260209091206002909102015461010080546001600160a01b03909216918590811061094e57fe5b6000918252602091829020604080519384019052600160029092020101548152610c8c565b6060610100828154811061098357fe5b90600052602060002090600202016001016040516024016109a491906119a2565b60408051601f198184030181529190526020810180516001600160e01b0316633c6b16ab60e01b1790526101008054919250600091849081106109e357fe5b60009182526020909120600290910201546040516001600160a01b0390911690610a0e9084906114e6565b6000604051808303816000865af19150503d8060008114610a4b576040519150601f19603f3d011682016040523d82523d6000602084013e610a50565b606091505b50505050505b60010161084b565b5060ff54610a779084906001600160a01b031683610c8c565b60ff54604051600162a6079360e01b031981526001600160a01b039091169063ff59f86d90610aaa908490600401611998565b600060405180830381600087803b158015610ac457600080fd5b505af1158015610ad8573d6000803e3d6000fd5b505050507feaf3d57629d9b1ce95715ccd98d6f5bf48023be1d5a06e09f64ab7f6d8be01d5610b0683610bc6565b610b0e610dbb565b604051610b1c9291906119ac565b60405180910390a1505050565b3390565b303b1590565b600054610100900460ff1680610b4c5750610b4c610b2d565b80610b5a575060005460ff16155b610b765760405162461bcd60e51b81526004016101ae906117c9565b600054610100900460ff16158015610ba1576000805460ff1961ff0019909116610100171660011790555b610ba9610dbf565b610bb1610e40565b8015610bc3576000805461ff00191690555b50565b5190565b610bd261137f565b610c5783846001600160a01b03166370a08231856040518263ffffffff1660e01b8152600401610c029190611502565b60206040518083038186803b158015610c1a57600080fd5b505afa158015610c2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c529190611490565b610f1a565b90505b92915050565b610c6861137f565b610c7061137f565b82518451610c839163ffffffff610fac16565b81529392505050565b610c9583610fee565b610c9d61137f565b610ca78484610bca565b90506000610cb5858461103b565b905060006060866001600160a01b031663a9059cbb60e01b8785604051602401610ce0929190611530565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051610d1e91906114e6565b6000604051808303816000865af19150503d8060008114610d5b576040519150601f19603f3d011682016040523d82523d6000602084013e610d60565b606091505b5091509150818015610d8a575080511580610d8a575080806020019051810190610d8a9190611458565b610da65760405162461bcd60e51b81526004016101ae906115a9565b610db2878785876110b9565b50505050505050565b4290565b600054610100900460ff1680610dd85750610dd8610b2d565b80610de6575060005460ff16155b610e025760405162461bcd60e51b81526004016101ae906117c9565b600054610100900460ff16158015610bb1576000805460ff1961ff0019909116610100171660011790558015610bc3576000805461ff001916905550565b600054610100900460ff1680610e595750610e59610b2d565b80610e67575060005460ff16155b610e835760405162461bcd60e51b81526004016101ae906117c9565b600054610100900460ff16158015610eae576000805460ff1961ff0019909116610100171660011790555b6000610eb8610b29565b606580546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015610bc3576000805461ff001916905550565b610f2261137f565b6000610f2d84611112565b905060128110610f7257604080516020810190915280610f67610f5784601263ffffffff610fac16565b8690600a0a63ffffffff6111ff16565b815250915050610c5a565b604080516020810190915280610fa2610f9260128563ffffffff610fac16565b8690600a0a63ffffffff61124116565b9052949350505050565b6000610c5783836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061127b565b6000610ff982611112565b6001600160a01b038316600090815260cb60205260409020549091508114611037576001600160a01b038216600090815260cb602052604090208190555b5050565b60008061104784611112565b9050601281106110855761107d61106582601263ffffffff610fac16565b600a0a61107185610bc6565b9063ffffffff61124116565b915050610c5a565b6110b161109960128363ffffffff610fac16565b600a0a6110a585610bc6565b9063ffffffff6111ff16565b949350505050565b6110ec6110d66110c98685610f1a565b839063ffffffff6112a716565b6110e08686610bca565b9063ffffffff6112ca16565b60000b1561110c5760405162461bcd60e51b81526004016101ae90611847565b50505050565b6001600160a01b038116600090815260cb602052604081205480610c5a5760408051600481526024810182526020810180516001600160e01b031663313ce56760e01b17905290516000916060916001600160a01b03871691611174916114e6565b600060405180830381855afa9150503d80600081146111af576040519150601f19603f3d011682016040523d82523d6000602084013e6111b4565b606091505b50915091508180156111c65750805115155b6111e25760405162461bcd60e51b81526004016101ae906116dc565b808060200190518101906111f69190611490565b95945050505050565b6000610c5783836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506112fb565b60008261125057506000610c5a565b8282028284828161125d57fe5b0414610c575760405162461bcd60e51b81526004016101ae90611746565b6000818484111561129f5760405162461bcd60e51b81526004016101ae9190611549565b505050900390565b6112af61137f565b6112b761137f565b82518451610c839163ffffffff61133216565b8051825160009110156112df57506001610c5a565b8151835110156112f25750600019610c5a565b50600092915050565b6000818361131c5760405162461bcd60e51b81526004016101ae9190611549565b50600083858161132857fe5b0495945050505050565b600082820183811015610c575760405162461bcd60e51b81526004016101ae906115e0565b604051806040016040528060006001600160a01b0316815260200161137a61137f565b905290565b6040518060200160405280600081525090565b6000602082840312156113a3578081fd5b6040516020810181811067ffffffffffffffff821117156113c2578283fd5b6040529135825250919050565b6000602082840312156113e0578081fd5b8135610c57816119e6565b600080604083850312156113fd578081fd5b8235611408816119e6565b91506020830135611418816119e6565b809150509250929050565b60008060408385031215611435578182fd5b8235611440816119e6565b915061144f8460208501611392565b90509250929050565b600060208284031215611469578081fd5b81518015158114610c57578182fd5b600060208284031215611489578081fd5b5035919050565b6000602082840312156114a1578081fd5b5051919050565b6000806000606084860312156114bc578081fd5b8335925060208401356114ce816119e6565b91506114dd8560408601611392565b90509250925092565b600082516114f88184602087016119ba565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392909216825251602082015260400190565b6001600160a01b03929092168252602082015260400190565b60006020825282518060208401526115688160408501602087016119ba565b601f01601f19169190910160400192915050565b60208082526013908201527210afb932bbb0b93239a1b7b73a3937b63632b960691b604082015260600190565b6020808252601d908201527f446563696d616c45524332303a207472616e73666572206661696c6564000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526017908201527f43616e74206164642061207a65726f2061646472657373000000000000000000604082015260600190565b60208082526027908201527f5065727046694f776e61626c65557067726164653a2073616d652061732063616040820152666e64696461746560c81b606082015260800190565b60208082526027908201527f5065727046694f776e61626c65557067726164653a206e6f7420746865206e656040820152663b9037bbb732b960c91b606082015260800190565b60208082526021908201527f446563696d616c45524332303a2067657420646563696d616c73206661696c656040820152601960fa1b606082015260800190565b6020808252600f908201526e06e6f7420656e6f756768205045525608c1b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b60208082526022908201527f5065727046694f776e61626c65557067726164653a207a65726f206164647265604082015261737360f01b606082015260800190565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201526d195b881a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526016908201527510d85b9d081859190818481e995c9bc8185b5bdd5b9d60521b604082015260600190565b60208082526022908201527f446563696d616c45524332303a2062616c616e636520696e636f6e73697374656040820152611b9d60f21b606082015260800190565b6020808252602f908201527f5065727046694f776e61626c65557067726164653a2063616e6469646174652060408201526e6973207a65726f206164647265737360881b606082015260800190565b6020808252602d908201527f5065727046694f776e61626c65557067726164653a2063616c6c65722069732060408201526c3737ba103a34329037bbb732b960991b606082015260800190565b602080825260139082015272696e646578206f7574206f6620626f756e647360681b604082015260600190565b60208082526026908201527f5065727046694f776e61626c65557067726164653a2073616d65206173206f726040820152651a59da5b985b60d21b606082015260800190565b9051815260200190565b9054815260200190565b918252602082015260400190565b60005b838110156119d55781810151838201526020016119bd565b8381111561110c5750506000910152565b6001600160a01b0381168114610bc357600080fdfea26469706673582212207d3d317a8e7bd1a337e45e63098f0b8516d987aff8e9a2932956fa400246db0f64736f6c63430006090033\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Signer, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { MerkleRedeemUpgradeSafe } from \"../MerkleRedeemUpgradeSafe\";\n\nexport class MerkleRedeemUpgradeSafe__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<MerkleRedeemUpgradeSafe> {\n    return super.deploy(overrides || {}) as Promise<MerkleRedeemUpgradeSafe>;\n  }\n  getDeployTransaction(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  attach(address: string): MerkleRedeemUpgradeSafe {\n    return super.attach(address) as MerkleRedeemUpgradeSafe;\n  }\n  connect(signer: Signer): MerkleRedeemUpgradeSafe__factory {\n    return super.connect(signer) as MerkleRedeemUpgradeSafe__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): MerkleRedeemUpgradeSafe {\n    return new Contract(\n      address,\n      _abi,\n      signerOrProvider\n    ) as MerkleRedeemUpgradeSafe;\n  }\n}\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"_claimant\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"_balance\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Claimed\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"candidate\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_liquidityProvider\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_begin\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_end\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"claimStatus\",\n    outputs: [\n      {\n        internalType: \"bool[]\",\n        name: \"\",\n        type: \"bool[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_liquidityProvider\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_week\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_claimedBalance\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes32[]\",\n        name: \"_merkleProof\",\n        type: \"bytes32[]\",\n      },\n    ],\n    name: \"claimWeek\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_liquidityProvider\",\n        type: \"address\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"week\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"balance\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"bytes32[]\",\n            name: \"merkleProof\",\n            type: \"bytes32[]\",\n          },\n        ],\n        internalType: \"struct MerkleRedeemUpgradeSafe.Claim[]\",\n        name: \"claims\",\n        type: \"tuple[]\",\n      },\n    ],\n    name: \"claimWeeks\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"claimed\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_begin\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_end\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"merkleRoots\",\n    outputs: [\n      {\n        internalType: \"bytes32[]\",\n        name: \"\",\n        type: \"bytes32[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_week\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"_merkleRoot\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_totalAllocation\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"seedAllocations\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"setOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"token\",\n    outputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"updateOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_liquidityProvider\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_week\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_claimedBalance\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes32[]\",\n        name: \"_merkleProof\",\n        type: \"bytes32[]\",\n      },\n    ],\n    name: \"verifyClaim\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"valid\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"weekMerkleRoots\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x608060405234801561001057600080fd5b50611127806100206000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063715018a61161008c578063c804c39a11610066578063c804c39a146101c0578063dd8c9c9d146101d3578063eb0d07f5146101f3578063fc0c546a14610206576100ea565b8063715018a6146101a85780638da5cb5b146101b0578063bc5920ba146101b8576100ea565b806347fb23c1116100c857806347fb23c11461014d5780634cd488ab1461016d57806358b4e4b4146101805780636c8381f814610193576100ea565b8063120aa877146100ef57806313af40351461011857806339436b001461012d575b600080fd5b6101026100fd366004610cb0565b61020e565b60405161010f9190610e27565b60405180910390f35b61012b610126366004610adc565b61022e565b005b61014061013b366004610d07565b610310565b60405161010f9190610def565b61016061015b366004610be5565b6103a6565b60405161010f9190610da9565b61012b61017b366004610cdc565b61045a565b61012b61018e366004610c18565b61053f565b61019b6105e7565b60405161010f9190610d58565b61012b6105f6565b61019b610675565b61012b610684565b61012b6101ce366004610afe565b610747565b6101e66101e1366004610c98565b61083b565b60405161010f9190610e32565b610102610201366004610c18565b61084d565b61019b6108a3565b609a60209081526000928352604080842090915290825290205460ff1681565b6102366108b2565b6065546001600160a01b0390811691161461026c5760405162461bcd60e51b815260040161026390611017565b60405180910390fd5b6001600160a01b0381166102925760405162461bcd60e51b815260040161026390610f22565b6065546001600160a01b03828116911614156102c05760405162461bcd60e51b815260040161026390611064565b6066546001600160a01b03828116911614156102ee5760405162461bcd60e51b815260040161026390610e6b565b606680546001600160a01b0319166001600160a01b0392909216919091179055565b6060828203600101818167ffffffffffffffff8111801561033057600080fd5b5060405190808252806020026020018201604052801561035a578160200160208202803683370190505b50905060005b8281101561039b57858101600090815260996020526040902054825183908390811061038857fe5b6020908102919091010152600101610360565b509150505b92915050565b6060828203600101818167ffffffffffffffff811180156103c657600080fd5b506040519080825280602002602001820160405280156103f0578160200160208202803683370190505b50905060005b82811015610450578581016000908152609a602090815260408083206001600160a01b038b168452909152902054825160ff9091169083908390811061043857fe5b911515602092830291909101909101526001016103f6565b5095945050505050565b600083815260996020526040902054156104865760405162461bcd60e51b815260040161026390610f91565b60008381526099602052604090819020839055609b5490516323b872dd60e01b81526001600160a01b03909116906323b872dd906104cc90339030908690600401610d6c565b602060405180830381600087803b1580156104e657600080fd5b505af11580156104fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051e9190610c78565b61053a5760405162461bcd60e51b815260040161026390610f64565b505050565b6000838152609a602090815260408083206001600160a01b038816845290915290205460ff16156105825760405162461bcd60e51b815260040161026390610ef9565b61058e8484848461084d565b6105aa5760405162461bcd60e51b815260040161026390610e3b565b6000838152609a602090815260408083206001600160a01b03881684529091529020805460ff191660011790556105e184836108b6565b50505050565b6066546001600160a01b031690565b6105fe6108b2565b6065546001600160a01b0390811691161461062b5760405162461bcd60e51b815260040161026390611017565b6065546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3606580546001600160a01b0319169055565b6065546001600160a01b031690565b6066546001600160a01b03166106ac5760405162461bcd60e51b815260040161026390610fc8565b6106b46108b2565b6066546001600160a01b039081169116146106e15760405162461bcd60e51b815260040161026390610eb2565b6066546065546040516001600160a01b0392831692909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360668054606580546001600160a01b03199081166001600160a01b03841617909155169055565b6000610751610a36565b60005b83518110156108305783818151811061076957fe5b60209081029190910181015180516000908152609a835260408082206001600160a01b038a168352909352919091205490925060ff16156107bc5760405162461bcd60e51b815260040161026390610ef9565b6107d48583600001518460200151856040015161084d565b6107f05760405162461bcd60e51b815260040161026390610e3b565b60208083015183516000908152609a835260408082206001600160a01b038a16835290935291909120805460ff1916600190811790915593019201610754565b506105e184836108b6565b60996020526000908152604090205481565b6000808584604051602001610863929190610d28565b60405160208183030381529060405280519060200120905061089983609960008881526020019081526020016000205483610999565b9695505050505050565b609b546001600160a01b031681565b3390565b8015610995577fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a82826040516108ed929190610d90565b60405180910390a1609b5460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb906109279085908590600401610d90565b602060405180830381600087803b15801561094157600080fd5b505af1158015610955573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109799190610c78565b6109955760405162461bcd60e51b815260040161026390610f64565b5050565b600081815b8551811015610a2b5760008682815181106109b557fe5b602002602001015190508083116109f65782816040516020016109d9929190610d4a565b604051602081830303815290604052805190602001209250610a22565b8083604051602001610a09929190610d4a565b6040516020818303038152906040528051906020012092505b5060010161099e565b509092149392505050565b60405180606001604052806000815260200160008152602001606081525090565b80356001600160a01b03811681146103a057600080fd5b600082601f830112610a7e578081fd5b8135610a91610a8c826110d1565b6110aa565b818152915060208083019084810181840286018201871015610ab257600080fd5b60005b84811015610ad157813584529282019290820190600101610ab5565b505050505092915050565b600060208284031215610aed578081fd5b610af78383610a57565b9392505050565b60008060408385031215610b10578081fd5b610b1a8484610a57565b915060208084013567ffffffffffffffff80821115610b37578384fd5b81860187601f820112610b48578485fd5b80359250610b58610a8c846110d1565b83815284810190828601875b86811015610bd457813585016060818e03601f19011215610b8357898afd5b610b8d60606110aa565b89820135815260408201358a820152606082013588811115610bad578b8cfd5b610bbb8f8c83860101610a6e565b6040830152508552509287019290870190600101610b64565b50979a909950975050505050505050565b600080600060608486031215610bf9578081fd5b610c038585610a57565b95602085013595506040909401359392505050565b60008060008060808587031215610c2d578081fd5b610c378686610a57565b93506020850135925060408501359150606085013567ffffffffffffffff811115610c60578182fd5b610c6c87828801610a6e565b91505092959194509250565b600060208284031215610c89578081fd5b81518015158114610af7578182fd5b600060208284031215610ca9578081fd5b5035919050565b60008060408385031215610cc2578182fd5b82359150610cd38460208501610a57565b90509250929050565b600080600060608486031215610cf0578283fd5b505081359360208301359350604090920135919050565b60008060408385031215610d19578182fd5b50508035926020909101359150565b60609290921b6bffffffffffffffffffffffff19168252601482015260340190565b918252602082015260400190565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b81811015610de3578351151583529284019291840191600101610dc5565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b81811015610de357835183529284019291840191600101610e0b565b901515815260200190565b90815260200190565b60208082526016908201527524b731b7b93932b1ba1036b2b935b63290383937b7b360511b604082015260600190565b60208082526027908201527f5065727046694f776e61626c65557067726164653a2073616d652061732063616040820152666e64696461746560c81b606082015260800190565b60208082526027908201527f5065727046694f776e61626c65557067726164653a206e6f7420746865206e656040820152663b9037bbb732b960c91b606082015260800190565b6020808252600f908201526e436c61696d656420616c726561647960881b604082015260600190565b60208082526022908201527f5065727046694f776e61626c65557067726164653a207a65726f206164647265604082015261737360f01b606082015260800190565b60208082526013908201527211549497d514905394d1915497d19052531151606a1b604082015260600190565b6020808252601a908201527f63616e6e6f742072657772697465206d65726b6c6520726f6f74000000000000604082015260600190565b6020808252602f908201527f5065727046694f776e61626c65557067726164653a2063616e6469646174652060408201526e6973207a65726f206164647265737360881b606082015260800190565b6020808252602d908201527f5065727046694f776e61626c65557067726164653a2063616c6c65722069732060408201526c3737ba103a34329037bbb732b960991b606082015260800190565b60208082526026908201527f5065727046694f776e61626c65557067726164653a2073616d65206173206f726040820152651a59da5b985b60d21b606082015260800190565b60405181810167ffffffffffffffff811182821017156110c957600080fd5b604052919050565b600067ffffffffffffffff8211156110e7578081fd5b506020908102019056fea26469706673582212209c7af67a7279e352308f19a4e0f3ded4c61e83b1a908f9c40ad2ba7ac791d99f64736f6c63430006090033\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Signer, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { FeeRewardPoolL1 } from \"../FeeRewardPoolL1\";\n\nexport class FeeRewardPoolL1__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<FeeRewardPoolL1> {\n    return super.deploy(overrides || {}) as Promise<FeeRewardPoolL1>;\n  }\n  getDeployTransaction(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  attach(address: string): FeeRewardPoolL1 {\n    return super.attach(address) as FeeRewardPoolL1;\n  }\n  connect(signer: Signer): FeeRewardPoolL1__factory {\n    return super.connect(signer) as FeeRewardPoolL1__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): FeeRewardPoolL1 {\n    return new Contract(address, _abi, signerOrProvider) as FeeRewardPoolL1;\n  }\n}\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"RewardTransferred\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"staker\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"RewardWithdrawn\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"DURATION\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"candidate\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_staker\",\n        type: \"address\",\n      },\n    ],\n    name: \"earned\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"feeTokenPoolDispatcher\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"_token\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract StakedPerpToken\",\n        name: \"_stakedPerpToken\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_feeTokenPoolDispatcher\",\n        type: \"address\",\n      },\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"lastTimeRewardApplicable\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"lastUpdateTime\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_reward\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"notifyRewardAmount\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_staker\",\n        type: \"address\",\n      },\n    ],\n    name: \"notifyStakeChanged\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"periodFinish\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"rewardPerToken\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"rewardPerTokenStored\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"d\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"rewardRate\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"d\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"rewards\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"d\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"setOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"stakedPerpToken\",\n    outputs: [\n      {\n        internalType: \"contract StakedPerpToken\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"token\",\n    outputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"updateOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"userRewardPerTokenPaid\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"d\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"withdrawReward\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x608060405234801561001057600080fd5b50611b2c806100206000396000f3fe608060405234801561001057600080fd5b50600436106101415760003560e01c8063bc5920ba116100b8578063cd8ae3dd1161007c578063cd8ae3dd1461022f578063df136d6514610242578063ebe2b12b1461024a578063f6aa49e714610252578063fc0c546a1461025a578063ff59f86d1461026257610141565b8063bc5920ba146101fc578063c0c53b8b14610204578063c885bc5814610217578063c8f33c911461021f578063cd3daf9d1461022757610141565b80636c8381f81161010a5780636c8381f8146101c1578063715018a6146101c95780637b0a47ee146101d157806380faa57d146101d95780638b876347146101e15780638da5cb5b146101f457610141565b80628cc262146101465780630700037d1461016f57806313af40351461018f5780631be05289146101a45780634cd7ee95146101ac575b600080fd5b61015961015436600461152f565b610275565b6040516101669190611aa2565b60405180910390f35b61018261017d36600461152f565b610302565b6040516101669190611aac565b6101a261019d36600461152f565b610314565b005b6101826103f6565b6101b46103fd565b604051610166919061163d565b6101b461040d565b6101a261041d565b61018261049c565b6101826104a3565b6101826101ef36600461152f565b6104be565b6101b46104d0565b6101a26104df565b6101a261021236600461156b565b6105a2565b6101a2610696565b610182610784565b61015961078b565b6101a261023d36600461152f565b610845565b61018261088c565b610182610893565b6101b461089a565b6101b46108aa565b6101a26102703660046115b5565b6108ba565b61027d61151c565b6001600160a01b038216600081815260ff60209081526040808320815180840183529054815293835260fe8252918290208251918201909252905481526102fc91906102f0906102db906102cf61078b565b9063ffffffff610a4616565b6102e486610a72565b9063ffffffff610b0b16565b9063ffffffff610b2e16565b92915050565b60ff6020526000908152604090205481565b61031c610b51565b6065546001600160a01b039081169116146103525760405162461bcd60e51b815260040161034990611a0f565b60405180910390fd5b6001600160a01b0381166103785760405162461bcd60e51b8152600401610349906118a0565b6065546001600160a01b03828116911614156103a65760405162461bcd60e51b815260040161034990611a5c565b6066546001600160a01b03828116911614156103d45760405162461bcd60e51b81526004016103499061170b565b606680546001600160a01b0319166001600160a01b0392909216919091179055565b6201518081565b610105546001600160a01b031681565b6066546001600160a01b03165b90565b610425610b51565b6065546001600160a01b039081169116146104525760405162461bcd60e51b815260040161034990611a0f565b6065546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3606580546001600160a01b0319169055565b6101015481565b60006104b96104b0610b55565b61010354610b59565b905090565b60fe6020526000908152604090205481565b6065546001600160a01b031690565b6066546001600160a01b03166105075760405162461bcd60e51b8152600401610349906119c0565b61050f610b51565b6066546001600160a01b0390811691161461053c5760405162461bcd60e51b8152600401610349906117a0565b6066546065546040516001600160a01b0392831692909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360668054606580546001600160a01b03199081166001600160a01b03841617909155169055565b600054610100900460ff16806105bb57506105bb610b71565b806105c9575060005460ff16155b6105e55760405162461bcd60e51b8152600401610349906118e2565b600054610100900460ff16158015610610576000805460ff1961ff0019909116610100171660011790555b6001600160a01b0383166106365760405162461bcd60e51b815260040161034990611930565b61063e610b77565b61010580546001600160a01b038086166001600160a01b03199283161790925561010480548584169083161790556101068054928716929091169190911790558015610690576000805461ff00191690555b50505050565b60006106a0610b51565b90506106ab81610c09565b6106b361151c565b506001600160a01b038116600090815260ff602090815260408083208151928301909152548152906106e482610c68565b116107015760405162461bcd60e51b815260040161034990611752565b610709610c6c565b6001600160a01b03808416600090815260ff6020526040902091519091556101065461073791168383610c87565b816001600160a01b03167f1d3eee4ca001cff39eec6ec7615aacf2f2bd61791273830728ba00ccbd6e133761076b83610c68565b6040516107789190611aac565b60405180910390a25050565b6101025481565b61079361151c565b61079b61151c565b6107a3610db6565b90506107ae81610c68565b6107ca575050604080516020810190915261010054815261041a565b60006107e7610102546107db6104a3565b9063ffffffff610e5716565b604080516020810190915261010154815290915061083e90610821908390610815908663ffffffff610e9916565b9063ffffffff610ebc16565b60408051602081019091526101005481529063ffffffff610b2e16565b9250505090565b610105546001600160a01b031661085a610b51565b6001600160a01b0316146108805760405162461bcd60e51b815260040161034990611777565b61088981610c09565b50565b6101005481565b6101035481565b610104546001600160a01b031681565b610106546001600160a01b031681565b610104546001600160a01b03166108cf610b51565b6001600160a01b0316146108f55760405162461bcd60e51b815260040161034990611828565b600061090e610909368490038401846115cc565b610c68565b1161092b5760405162461bcd60e51b815260040161034990611957565b6109356000610c09565b600061093f610b55565b90506101035481106109775761096d62015180610961368590038501856115cc565b9063ffffffff610ede16565b51610101556109dd565b6101035460009061098e908363ffffffff610e5716565b905061099861151c565b60408051602081019091526101015481526109b9908363ffffffff610ebc16565b90506109d562015180610961836102f0368990038901896115cc565b516101015550505b6101028190556109f6816201518063ffffffff610f0016565b610103557fe7b1adc654f4988d82260a00603bcc1f508dc3aa94b2b9cd5bc9ab42cfc591dc610a2d610909368590038501856115cc565b604051610a3a9190611aac565b60405180910390a15050565b610a4e61151c565b610a5661151c565b82518451610a699163ffffffff610e5716565b81529392505050565b610a7a61151c565b604080516020810191829052610105546370a0823160e01b9092529081906001600160a01b03166370a08231610ab3866024850161163d565b60206040518083038186803b158015610acb57600080fd5b505afa158015610adf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b039190611609565b905292915050565b610b1361151c565b610b1b61151c565b82518451610a699163ffffffff610f2516565b610b3661151c565b610b3e61151c565b82518451610a699163ffffffff610f0016565b3390565b4290565b6000818310610b685781610b6a565b825b9392505050565b303b1590565b600054610100900460ff1680610b905750610b90610b71565b80610b9e575060005460ff16155b610bba5760405162461bcd60e51b8152600401610349906118e2565b600054610100900460ff16158015610be5576000805460ff1961ff0019909116610100171660011790555b610bed610f33565b610bf5610fb4565b8015610889576000805461ff001916905550565b610c1161078b565b5161010055610c1e6104a3565b610102556001600160a01b0381161561088957610c3a81610275565b6001600160a01b038216600090815260ff60209081526040808320935190935560fe90522061010054905550565b5190565b610c7461151c565b5060408051602081019091526000815290565b610c908361108e565b610c9861151c565b610ca284846110db565b90506000610cb08584611168565b905060006060866001600160a01b031663a9059cbb60e01b8785604051602401610cdb929190611651565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051610d199190611621565b6000604051808303816000865af19150503d8060008114610d56576040519150601f19603f3d011682016040523d82523d6000602084013e610d5b565b606091505b5091509150818015610d85575080511580610d85575080806020019051810190610d85919061154b565b610da15760405162461bcd60e51b81526004016103499061169d565b610dad878785876111e6565b50505050505050565b610dbe61151c565b604051806020016040528061010560009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e1857600080fd5b505afa158015610e2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e509190611609565b9052905090565b6000610b6a83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611239565b610ea161151c565b610ea961151c565b82518451610a699163ffffffff61126516565b610ec461151c565b610ecc61151c565b8351610a69908463ffffffff61127316565b610ee661151c565b610eee61151c565b8351610a69908463ffffffff6112ad16565b600082820183811015610b6a5760405162461bcd60e51b8152600401610349906116d4565b6000610b6a838360126112ef565b600054610100900460ff1680610f4c5750610f4c610b71565b80610f5a575060005460ff16155b610f765760405162461bcd60e51b8152600401610349906118e2565b600054610100900460ff16158015610bf5576000805460ff1961ff0019909116610100171660011790558015610889576000805461ff001916905550565b600054610100900460ff1680610fcd5750610fcd610b71565b80610fdb575060005460ff16155b610ff75760405162461bcd60e51b8152600401610349906118e2565b600054610100900460ff16158015611022576000805460ff1961ff0019909116610100171660011790555b600061102c610b51565b606580546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015610889576000805461ff001916905550565b60006110998261130d565b6001600160a01b038316600090815260cb602052604090205490915081146110d7576001600160a01b038216600090815260cb602052604090208190555b5050565b6110e361151c565b610b6a83846001600160a01b03166370a08231856040518263ffffffff1660e01b8152600401611113919061163d565b60206040518083038186803b15801561112b57600080fd5b505afa15801561113f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111639190611609565b6113fa565b6000806111748461130d565b9050601281106111b2576111aa61119282601263ffffffff610e5716565b600a0a61119e85610c68565b9063ffffffff61127316565b9150506102fc565b6111de6111c660128363ffffffff610e5716565b600a0a6111d285610c68565b9063ffffffff6112ad16565b949350505050565b6112196112036111f686856113fa565b839063ffffffff610b2e16565b61120d86866110db565b9063ffffffff61148c16565b60000b156106905760405162461bcd60e51b81526004016103499061197e565b6000818484111561125d5760405162461bcd60e51b8152600401610349919061166a565b505050900390565b6000610b6a838360126114bd565b600082611282575060006102fc565b8282028284828161128f57fe5b0414610b6a5760405162461bcd60e51b81526004016103499061185f565b6000610b6a83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506114dc565b60006111de6112fd83611513565b6111d2868663ffffffff61127316565b6001600160a01b038116600090815260cb6020526040812054806102fc5760408051600481526024810182526020810180516001600160e01b031663313ce56760e01b17905290516000916060916001600160a01b0387169161136f91611621565b600060405180830381855afa9150503d80600081146113aa576040519150601f19603f3d011682016040523d82523d6000602084013e6113af565b606091505b50915091508180156113c15750805115155b6113dd5760405162461bcd60e51b8152600401610349906117e7565b808060200190518101906113f19190611609565b95945050505050565b61140261151c565b600061140d8461130d565b9050601281106114525760408051602081019091528061144761143784601263ffffffff610e5716565b8690600a0a63ffffffff6112ad16565b8152509150506102fc565b60408051602081019091528061148261147260128563ffffffff610e5716565b8690600a0a63ffffffff61127316565b9052949350505050565b8051825160009110156114a1575060016102fc565b8151835110156114b457506000196102fc565b50600092915050565b60006111de836111d26114cf85611513565b879063ffffffff61127316565b600081836114fd5760405162461bcd60e51b8152600401610349919061166a565b50600083858161150957fe5b0495945050505050565b60ff16600a0a90565b6040518060200160405280600081525090565b600060208284031215611540578081fd5b8135610b6a81611ae1565b60006020828403121561155c578081fd5b81518015158114610b6a578182fd5b60008060006060848603121561157f578182fd5b833561158a81611ae1565b9250602084013561159a81611ae1565b915060408401356115aa81611ae1565b809150509250925092565b6000602082840312156115c6578081fd5b50919050565b6000602082840312156115dd578081fd5b6040516020810181811067ffffffffffffffff821117156115fc578283fd5b6040529135825250919050565b60006020828403121561161a578081fd5b5051919050565b60008251611633818460208701611ab5565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6000602082528251806020840152611689816040850160208701611ab5565b601f01601f19169190910160400192915050565b6020808252601d908201527f446563696d616c45524332303a207472616e73666572206661696c6564000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526027908201527f5065727046694f776e61626c65557067726164653a2073616d652061732063616040820152666e64696461746560c81b606082015260800190565b6020808252600b908201526a072657761726420697320360ac1b604082015260600190565b6020808252600f908201526e37b7363c9039a832b9382a37b5b2b760891b604082015260600190565b60208082526027908201527f5065727046694f776e61626c65557067726164653a206e6f7420746865206e656040820152663b9037bbb732b960c91b606082015260800190565b60208082526021908201527f446563696d616c45524332303a2067657420646563696d616c73206661696c656040820152601960fa1b606082015260800190565b6020808252601b908201527f6f6e6c7920666565546f6b656e506f6f6c446973706174636865720000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b60208082526022908201527f5065727046694f776e61626c65557067726164653a207a65726f206164647265604082015261737360f01b606082015260800190565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201526d195b881a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252600d908201526c125b9d985b1a59081a5b9c1d5d609a1b604082015260600190565b6020808252600d908201526c1a5b9d985b1a59081a5b9c1d5d609a1b604082015260600190565b60208082526022908201527f446563696d616c45524332303a2062616c616e636520696e636f6e73697374656040820152611b9d60f21b606082015260800190565b6020808252602f908201527f5065727046694f776e61626c65557067726164653a2063616e6469646174652060408201526e6973207a65726f206164647265737360881b606082015260800190565b6020808252602d908201527f5065727046694f776e61626c65557067726164653a2063616c6c65722069732060408201526c3737ba103a34329037bbb732b960991b606082015260800190565b60208082526026908201527f5065727046694f776e61626c65557067726164653a2073616d65206173206f726040820152651a59da5b985b60d21b606082015260800190565b9051815260200190565b90815260200190565b60005b83811015611ad0578181015183820152602001611ab8565b838111156106905750506000910152565b6001600160a01b038116811461088957600080fdfea264697066735822122086d88a99dcf88cab951b6b1560893761f0ece2832eeee5990963c103feddf0f164736f6c63430006090033\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Signer, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { FeeTokenPoolDispatcherL1 } from \"../FeeTokenPoolDispatcherL1\";\n\nexport class FeeTokenPoolDispatcherL1__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<FeeTokenPoolDispatcherL1> {\n    return super.deploy(overrides || {}) as Promise<FeeTokenPoolDispatcherL1>;\n  }\n  getDeployTransaction(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  attach(address: string): FeeTokenPoolDispatcherL1 {\n    return super.attach(address) as FeeTokenPoolDispatcherL1;\n  }\n  connect(signer: Signer): FeeTokenPoolDispatcherL1__factory {\n    return super.connect(signer) as FeeTokenPoolDispatcherL1__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): FeeTokenPoolDispatcherL1 {\n    return new Contract(\n      address,\n      _abi,\n      signerOrProvider\n    ) as FeeTokenPoolDispatcherL1;\n  }\n}\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"feeRewardPool\",\n        type: \"address\",\n      },\n    ],\n    name: \"FeeRewardPoolAdded\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"feeRewardPool\",\n        type: \"address\",\n      },\n    ],\n    name: \"FeeRewardPoolRemoved\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"feeRewardPool\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"FeeTransferred\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"TOKEN_AMOUNT_LIMIT\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IRewardRecipient\",\n        name: \"_recipient\",\n        type: \"address\",\n      },\n    ],\n    name: \"addFeeRewardPool\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"candidate\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"feeRewardPoolMap\",\n    outputs: [\n      {\n        internalType: \"contract IRewardRecipient\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"feeTokens\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getFeeTokenLength\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"_token\",\n        type: \"address\",\n      },\n    ],\n    name: \"isFeeTokenExisted\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IRewardRecipient\",\n        name: \"_recipient\",\n        type: \"address\",\n      },\n    ],\n    name: \"removeFeeRewardPool\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"setOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"transferToFeeRewardPool\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"updateOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x608060405234801561001057600080fd5b50611ac0806100206000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806382fbcc261161008c5780639dd0cf71116100665780639dd0cf711461019b578063bc5920ba146101ae578063de114190146101b6578063ebef27be146101cb576100ea565b806382fbcc26146101785780638da5cb5b146101805780638ef4403c14610188576100ea565b80636c8381f8116100c85780636c8381f814610140578063715018a61461014857806378098ccf146101505780638129fc1c14610170576100ea565b806313af4035146100ef5780631a4d096114610104578063257767591461012d575b600080fd5b6101026100fd3660046114a7565b6101d3565b005b6101176101123660046114a7565b6102b5565b604051610124919061154b565b60405180910390f35b61010261013b3660046114a7565b6102d0565b61011761050b565b61010261051a565b61016361015e3660046114a7565b610599565b60405161012491906115b6565b610102610610565b61010261069b565b610117610722565b6101176101963660046114ff565b610731565b6101026101a93660046114a7565b610758565b6101026108c0565b6101be610983565b6040516101249190611a40565b6101be610988565b6101db61098e565b6065546001600160a01b039081169116146102115760405162461bcd60e51b815260040161020890611949565b60405180910390fd5b6001600160a01b0381166102375760405162461bcd60e51b8152600401610208906117a9565b6065546001600160a01b03828116911614156102655760405162461bcd60e51b8152600401610208906119f0565b6066546001600160a01b03828116911614156102935760405162461bcd60e51b815260040161020890611662565b606680546001600160a01b0319166001600160a01b0392909216919091179055565b60cc602052600090815260409020546001600160a01b031681565b6102d861098e565b6065546001600160a01b039081169116146103055760405162461bcd60e51b815260040161020890611949565b6001600160a01b03811661032b5760405162461bcd60e51b815260040161020890611891565b6000816001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561036857600080fd5b505af115801561037c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a091906114e3565b905060006103b560cd8363ffffffff61099216565b90506001600160a01b0381166103dd5760405162461bcd60e51b815260040161020890611996565b816001600160a01b0316816001600160a01b03161461040e5760405162461bcd60e51b8152600401610208906119c4565b6040516370a0823160e01b81526000906001600160a01b038416906370a082319061043d90309060040161154b565b60206040518083038186803b15801561045557600080fd5b505afa158015610469573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048d9190611517565b111561049e5761049c82610aa0565b505b6001600160a01b03808316600090815260cc60205260409081902080546001600160a01b0319811690915590519116907fa551baddb3e03710917b6b140b0b4d5d3b003376d62a588a25744a3cc8370fea906104fd908590849061155f565b60405180910390a150505050565b6066546001600160a01b031690565b61052261098e565b6065546001600160a01b0390811691161461054f5760405162461bcd60e51b815260040161020890611949565b6065546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3606580546001600160a01b0319169055565b60006106088260cd8054806020026020016040519081016040528092919081815260200182805480156105f557602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116105d7575b5050505050610ba290919063ffffffff16565b90505b919050565b600054610100900460ff16806106295750610629610bf8565b80610637575060005460ff16155b6106535760405162461bcd60e51b8152600401610208906117eb565b600054610100900460ff1615801561067e576000805460ff1961ff0019909116610100171660011790555b610686610bfe565b8015610698576000805461ff00191690555b50565b60cd546106ba5760405162461bcd60e51b815260040161020890611839565b6000805b60cd54811015610704576106f260cd82815481106106d857fe5b6000918252602090912001546001600160a01b0316610aa0565b806106fa5750815b91506001016106be565b50806106985760405162461bcd60e51b815260040161020890611868565b6065546001600160a01b031690565b60cd818154811061073e57fe5b6000918252602090912001546001600160a01b0316905081565b61076061098e565b6065546001600160a01b0390811691161461078d5760405162461bcd60e51b815260040161020890611949565b60cd546014116107af5760405162461bcd60e51b815260040161020890611772565b6000816001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156107ec57600080fd5b505af1158015610800573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082491906114e3565b905061083760cd8263ffffffff610c7c16565b6108535760405162461bcd60e51b815260040161020890611891565b6001600160a01b03818116600090815260cc60205260409081902080546001600160a01b03191692851692909217909155517fe75de6f5bb42c9fd77881e126dc670147ee72bcf0fdf8b62cd4c317441f59df7906108b4908390859061155f565b60405180910390a15050565b6066546001600160a01b03166108e85760405162461bcd60e51b8152600401610208906118fa565b6108f061098e565b6066546001600160a01b0390811691161461091d5760405162461bcd60e51b8152600401610208906116a9565b6066546065546040516001600160a01b0392831692909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360668054606580546001600160a01b03199081166001600160a01b03841617909155169055565b601481565b60cd5490565b3390565b60006001600160a01b0382166109aa57506000610a9a565b825460005b81811015610a93578481815481106109c357fe5b6000918252602090912001546001600160a01b0385811691161415610a8b57600182038114610a54578460018303815481106109fb57fe5b9060005260206000200160009054906101000a90046001600160a01b0316858281548110610a2557fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b84805480610a5e57fe5b600082815260209020810160001990810180546001600160a01b031916905501905550829150610a9a9050565b6001016109af565b5060009150505b92915050565b6000610aaa611494565b610ab48330610d35565b9050610abf81610dc9565b15610b99576001600160a01b03808416600090815260cc602052604090205416610aea848284610dcd565b604051600162a6079360e01b031981526001600160a01b0382169063ff59f86d90610b19908590600401611a36565b600060405180830381600087803b158015610b3357600080fd5b505af1158015610b47573d6000803e3d6000fd5b505050507f1d6298f49fc15449b78df91fcca6812136edc2972366cb70aa0d9145a308cd318482610b7785610dc9565b604051610b8693929190611579565b60405180910390a160019250505061060b565b50600092915050565b6000805b8351811015610bee57838181518110610bbb57fe5b60200260200101516001600160a01b0316836001600160a01b03161415610be6576001915050610a9a565b600101610ba6565b5060009392505050565b303b1590565b600054610100900460ff1680610c175750610c17610bf8565b80610c25575060005460ff16155b610c415760405162461bcd60e51b8152600401610208906117eb565b600054610100900460ff16158015610c6c576000805460ff1961ff0019909116610100171660011790555b610c74610efc565b610686610f7d565b60006001600160a01b0382161580610cf25750610cf283805480602002602001604051908101604052809291908181526020018280548015610ce757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610cc9575b505050505083610ba2565b15610cff57506000610a9a565b50815460018082018455600093845260209093200180546001600160a01b0319166001600160a01b039290921691909117905590565b610d3d611494565b610dc283846001600160a01b03166370a08231856040518263ffffffff1660e01b8152600401610d6d919061154b565b60206040518083038186803b158015610d8557600080fd5b505afa158015610d99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dbd9190611517565b611057565b9392505050565b5190565b610dd6836110e9565b610dde611494565b610de88484610d35565b90506000610df68584611136565b905060006060866001600160a01b031663a9059cbb60e01b8785604051602401610e2192919061159d565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051610e5f919061152f565b6000604051808303816000865af19150503d8060008114610e9c576040519150601f19603f3d011682016040523d82523d6000602084013e610ea1565b606091505b5091509150818015610ecb575080511580610ecb575080806020019051810190610ecb91906114c3565b610ee75760405162461bcd60e51b8152600401610208906115f4565b610ef3878785876111b4565b50505050505050565b600054610100900460ff1680610f155750610f15610bf8565b80610f23575060005460ff16155b610f3f5760405162461bcd60e51b8152600401610208906117eb565b600054610100900460ff16158015610686576000805460ff1961ff0019909116610100171660011790558015610698576000805461ff001916905550565b600054610100900460ff1680610f965750610f96610bf8565b80610fa4575060005460ff16155b610fc05760405162461bcd60e51b8152600401610208906117eb565b600054610100900460ff16158015610feb576000805460ff1961ff0019909116610100171660011790555b6000610ff561098e565b606580546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015610698576000805461ff001916905550565b61105f611494565b600061106a8461120d565b9050601281106110af576040805160208101909152806110a461109484601263ffffffff6112fa16565b8690600a0a63ffffffff61133c16565b815250915050610a9a565b6040805160208101909152806110df6110cf60128563ffffffff6112fa16565b8690600a0a63ffffffff61137e16565b9052949350505050565b60006110f48261120d565b6001600160a01b0383166000908152609960205260409020549091508114611132576001600160a01b03821660009081526099602052604090208190555b5050565b6000806111428461120d565b9050601281106111805761117861116082601263ffffffff6112fa16565b600a0a61116c85610dc9565b9063ffffffff61137e16565b915050610a9a565b6111ac61119460128363ffffffff6112fa16565b600a0a6111a085610dc9565b9063ffffffff61133c16565b949350505050565b6111e76111d16111c48685611057565b839063ffffffff6113b816565b6111db8686610d35565b9063ffffffff6113e416565b60000b156112075760405162461bcd60e51b8152600401610208906118b8565b50505050565b6001600160a01b038116600090815260996020526040812054806106085760408051600481526024810182526020810180516001600160e01b031663313ce56760e01b17905290516000916060916001600160a01b0387169161126f9161152f565b600060405180830381855afa9150503d80600081146112aa576040519150601f19603f3d011682016040523d82523d6000602084013e6112af565b606091505b50915091508180156112c15750805115155b6112dd5760405162461bcd60e51b8152600401610208906116f0565b808060200190518101906112f19190611517565b95945050505050565b6000610dc283836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061140c565b6000610dc283836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611438565b60008261138d57506000610a9a565b8282028284828161139a57fe5b0414610dc25760405162461bcd60e51b815260040161020890611731565b6113c0611494565b6113c8611494565b825184516113db9163ffffffff61146f16565b81529392505050565b8051825160009110156113f957506001610a9a565b815183511015610b995750600019610a9a565b600081848411156114305760405162461bcd60e51b815260040161020891906115c1565b505050900390565b600081836114595760405162461bcd60e51b815260040161020891906115c1565b50600083858161146557fe5b0495945050505050565b600082820183811015610dc25760405162461bcd60e51b81526004016102089061162b565b6040518060200160405280600081525090565b6000602082840312156114b8578081fd5b8135610dc281611a75565b6000602082840312156114d4578081fd5b81518015158114610dc2578182fd5b6000602082840312156114f4578081fd5b8151610dc281611a75565b600060208284031215611510578081fd5b5035919050565b600060208284031215611528578081fd5b5051919050565b60008251611541818460208701611a49565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b60006020825282518060208401526115e0816040850160208701611a49565b601f01601f19169190910160400192915050565b6020808252601d908201527f446563696d616c45524332303a207472616e73666572206661696c6564000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526027908201527f5065727046694f776e61626c65557067726164653a2073616d652061732063616040820152666e64696461746560c81b606082015260800190565b60208082526027908201527f5065727046694f776e61626c65557067726164653a206e6f7420746865206e656040820152663b9037bbb732b960c91b606082015260800190565b60208082526021908201527f446563696d616c45524332303a2067657420646563696d616c73206661696c656040820152601960fa1b606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b60208082526019908201527f65786365656420746f6b656e20616d6f756e74206c696d697400000000000000604082015260600190565b60208082526022908201527f5065727046694f776e61626c65557067726164653a207a65726f206164647265604082015261737360f01b606082015260800190565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201526d195b881a5b9a5d1a585b1a5e995960921b606082015260800190565b602080825260159082015274199959551bdad95b9cc81b9bdd081cd95d081e595d605a1b604082015260600190565b6020808252600f908201526e666565206973206e6f77207a65726f60881b604082015260600190565b6020808252600d908201526c1a5b9d985b1a59081a5b9c1d5d609a1b604082015260600190565b60208082526022908201527f446563696d616c45524332303a2062616c616e636520696e636f6e73697374656040820152611b9d60f21b606082015260800190565b6020808252602f908201527f5065727046694f776e61626c65557067726164653a2063616e6469646174652060408201526e6973207a65726f206164647265737360881b606082015260800190565b6020808252602d908201527f5065727046694f776e61626c65557067726164653a2063616c6c65722069732060408201526c3737ba103a34329037bbb732b960991b606082015260800190565b6020808252601490820152731d1bdad95b88191bd95cc81b9bdd08195e1a5cdd60621b604082015260600190565b6020808252601290820152713932b6b7bb32903bb937b733903a37b5b2b760711b604082015260600190565b60208082526026908201527f5065727046694f776e61626c65557067726164653a2073616d65206173206f726040820152651a59da5b985b60d21b606082015260800190565b9051815260200190565b90815260200190565b60005b83811015611a64578181015183820152602001611a4c565b838111156112075750506000910152565b6001600160a01b038116811461069857600080fdfea26469706673582212201764788adfabd64b95589ac09e196dee9fdb099f8ddb2ce0a1c0eea5182ee44064736f6c63430006090033\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Signer, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { PerpRewardVesting } from \"../PerpRewardVesting\";\n\nexport class PerpRewardVesting__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<PerpRewardVesting> {\n    return super.deploy(overrides || {}) as Promise<PerpRewardVesting>;\n  }\n  getDeployTransaction(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  attach(address: string): PerpRewardVesting {\n    return super.attach(address) as PerpRewardVesting;\n  }\n  connect(signer: Signer): PerpRewardVesting__factory {\n    return super.connect(signer) as PerpRewardVesting__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): PerpRewardVesting {\n    return new Contract(address, _abi, signerOrProvider) as PerpRewardVesting;\n  }\n}\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"_claimant\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"_balance\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Claimed\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"candidate\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_liquidityProvider\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_begin\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_end\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"claimStatus\",\n    outputs: [\n      {\n        internalType: \"bool[]\",\n        name: \"\",\n        type: \"bool[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_account\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_week\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_claimedBalance\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes32[]\",\n        name: \"_merkleProof\",\n        type: \"bytes32[]\",\n      },\n    ],\n    name: \"claimWeek\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_account\",\n        type: \"address\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"week\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"balance\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"bytes32[]\",\n            name: \"merkleProof\",\n            type: \"bytes32[]\",\n          },\n        ],\n        internalType: \"struct MerkleRedeemUpgradeSafe.Claim[]\",\n        name: \"_claims\",\n        type: \"tuple[]\",\n      },\n    ],\n    name: \"claimWeeks\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"claimed\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getLengthOfMerkleRoots\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"_token\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_vestingPeriod\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"merkleRootIndexes\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"merkleRootTimestampMap\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_begin\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_end\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"merkleRoots\",\n    outputs: [\n      {\n        internalType: \"bytes32[]\",\n        name: \"\",\n        type: \"bytes32[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_week\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"_merkleRoot\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_totalAllocation\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"seedAllocations\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"setOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"token\",\n    outputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"updateOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_liquidityProvider\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_week\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_claimedBalance\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes32[]\",\n        name: \"_merkleProof\",\n        type: \"bytes32[]\",\n      },\n    ],\n    name: \"verifyClaim\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"valid\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"vestingPeriod\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"weekMerkleRoots\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x608060405234801561001057600080fd5b5061173e806100206000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c80637313ee5a116100ad578063dd8c9c9d11610071578063dd8c9c9d1461023a578063e2bd3e351461024d578063eb0d07f514610260578063f373579f14610273578063fc0c546a1461028657610121565b80637313ee5a146101fc5780638da5cb5b14610204578063bc5920ba1461020c578063c804c39a14610214578063cd6dc6871461022757610121565b806347fb23c1116100f457806347fb23c1146101995780634cd488ab146101b957806358b4e4b4146101cc5780636c8381f8146101df578063715018a6146101f457610121565b8063120aa8771461012657806313af40351461014f57806339144f501461016457806339436b0014610179575b600080fd5b6101396101343660046111dc565b61028e565b6040516101469190611356565b60405180910390f35b61016261015d366004610fe0565b6102ae565b005b61016c610390565b6040516101469190611361565b61018c610187366004611236565b610397565b604051610146919061131e565b6101ac6101a73660046110e4565b61042b565b60405161014691906112d8565b6101626101c736600461120b565b6104df565b6101626101da366004611118565b610584565b6101e76105e6565b6040516101469190611287565b6101626105f5565b61016c610674565b6101e761067b565b61016261068a565b610162610222366004610ffc565b61074d565b610162610235366004611199565b6107b7565b61016c6102483660046111c4565b610870565b61016c61025b3660046111c4565b610882565b61013961026e366004611118565b610895565b61016c6102813660046111c4565b6108eb565b6101e761090a565b609a60209081526000928352604080842090915290825290205460ff1681565b6102b6610919565b6065546001600160a01b039081169116146102ec5760405162461bcd60e51b81526004016102e390611619565b60405180910390fd5b6001600160a01b0381166103125760405162461bcd60e51b81526004016102e3906114af565b6065546001600160a01b03828116911614156103405760405162461bcd60e51b81526004016102e390611666565b6066546001600160a01b038281169116141561036e5760405162461bcd60e51b81526004016102e3906113d1565b606680546001600160a01b0319166001600160a01b0392909216919091179055565b6101015490565b6060828203600101818167ffffffffffffffff811180156103b757600080fd5b506040519080825280602002602001820160405280156103e1578160200160208202803683370190505b50905060005b8281101561042257858101600090815260996020526040902054825183908390811061040f57fe5b60209081029190910101526001016103e7565b50949350505050565b6060828203600101818167ffffffffffffffff8111801561044b57600080fd5b50604051908082528060200260200182016040528015610475578160200160208202803683370190505b50905060005b828110156104d5578581016000908152609a602090815260408083206001600160a01b038b168452909152902054825160ff909116908390839081106104bd57fe5b9115156020928302919091019091015260010161047b565b5095945050505050565b6104e7610919565b6065546001600160a01b039081169116146105145760405162461bcd60e51b81526004016102e390611619565b61051f83838361091d565b61053a6101025461052e6109fd565b9063ffffffff610a0116565b60008481526101006020526040812091909155610101805460018101825591527f109ea3cebb188b9c1b9fc5bb3920be60dfdc8699098dff92f3d80daaca74768901929092555050565b6000838152610100602052604090205461059c6109fd565b101580156105b857506000838152610100602052604090205415155b6105d45760405162461bcd60e51b81526004016102e39061145f565b6105e084848484610a2d565b50505050565b6066546001600160a01b031690565b6105fd610919565b6065546001600160a01b0390811691161461062a5760405162461bcd60e51b81526004016102e390611619565b6065546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3606580546001600160a01b0319169055565b6101025481565b6065546001600160a01b031690565b6066546001600160a01b03166106b25760405162461bcd60e51b81526004016102e3906115ca565b6106ba610919565b6066546001600160a01b039081169116146106e75760405162461bcd60e51b81526004016102e390611418565b6066546065546040516001600160a01b0392831692909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360668054606580546001600160a01b03199081166001600160a01b03841617909155169055565b60005b81518110156107b2576107aa8383838151811061076957fe5b60200260200101516000015184848151811061078157fe5b60200260200101516020015185858151811061079957fe5b602002602001015160400151610584565b600101610750565b505050565b600054610100900460ff16806107d057506107d0610acf565b806107de575060005460ff16155b6107fa5760405162461bcd60e51b81526004016102e3906114f1565b600054610100900460ff16158015610825576000805460ff1961ff0019909116610100171660011790555b6001600160a01b03831661084b5760405162461bcd60e51b81526004016102e39061153f565b61085483610ad5565b61010282905580156107b2576000805461ff0019169055505050565b60996020526000908152604090205481565b6101006020526000908152604090205481565b60008085846040516020016108ab929190611257565b6040516020818303038152906040528051906020012090506108e183609960008881526020019081526020016000205483610b6a565b9695505050505050565b61010181815481106108f957fe5b600091825260209091200154905081565b609b546001600160a01b031681565b3390565b600083815260996020526040902054156109495760405162461bcd60e51b81526004016102e390611593565b60008381526099602052604090819020839055609b5490516323b872dd60e01b81526001600160a01b03909116906323b872dd9061098f9033903090869060040161129b565b602060405180830381600087803b1580156109a957600080fd5b505af11580156109bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e19190611179565b6107b25760405162461bcd60e51b81526004016102e390611566565b4290565b600082820183811015610a265760405162461bcd60e51b81526004016102e39061139a565b9392505050565b6000838152609a602090815260408083206001600160a01b038816845290915290205460ff1615610a705760405162461bcd60e51b81526004016102e390611486565b610a7c84848484610895565b610a985760405162461bcd60e51b81526004016102e39061136a565b6000838152609a602090815260408083206001600160a01b03881684529091529020805460ff191660011790556105e08483610c07565b303b1590565b600054610100900460ff1680610aee5750610aee610acf565b80610afc575060005460ff16155b610b185760405162461bcd60e51b81526004016102e3906114f1565b600054610100900460ff16158015610b43576000805460ff1961ff0019909116610100171660011790555b610b4b610ce6565b610b5482610d79565b8015610b66576000805461ff00191690555b5050565b600081815b8551811015610bfc576000868281518110610b8657fe5b60200260200101519050808311610bc7578281604051602001610baa929190611279565b604051602081830303815290604052805190602001209250610bf3565b8083604051602001610bda929190611279565b6040516020818303038152906040528051906020012092505b50600101610b6f565b509092149392505050565b8015610b66577fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a8282604051610c3e9291906112bf565b60405180910390a1609b5460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90610c7890859085906004016112bf565b602060405180830381600087803b158015610c9257600080fd5b505af1158015610ca6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cca9190611179565b610b665760405162461bcd60e51b81526004016102e390611566565b600054610100900460ff1680610cff5750610cff610acf565b80610d0d575060005460ff16155b610d295760405162461bcd60e51b81526004016102e3906114f1565b600054610100900460ff16158015610d54576000805460ff1961ff0019909116610100171660011790555b610d5c610e17565b610d64610e98565b8015610d76576000805461ff00191690555b50565b600054610100900460ff1680610d925750610d92610acf565b80610da0575060005460ff16155b610dbc5760405162461bcd60e51b81526004016102e3906114f1565b600054610100900460ff16158015610de7576000805460ff1961ff0019909116610100171660011790555b609b80546001600160a01b0319166001600160a01b0384161790558015610b66576000805461ff00191690555050565b600054610100900460ff1680610e305750610e30610acf565b80610e3e575060005460ff16155b610e5a5760405162461bcd60e51b81526004016102e3906114f1565b600054610100900460ff16158015610d64576000805460ff1961ff0019909116610100171660011790558015610d76576000805461ff001916905550565b600054610100900460ff1680610eb15750610eb1610acf565b80610ebf575060005460ff16155b610edb5760405162461bcd60e51b81526004016102e3906114f1565b600054610100900460ff16158015610f06576000805460ff1961ff0019909116610100171660011790555b6000610f10610919565b606580546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015610d76576000805461ff001916905550565b600082601f830112610f82578081fd5b8135610f95610f90826116d3565b6116ac565b818152915060208083019084810181840286018201871015610fb657600080fd5b60005b84811015610fd557813584529282019290820190600101610fb9565b505050505092915050565b600060208284031215610ff1578081fd5b8135610a26816116f3565b6000806040838503121561100e578081fd5b8235611019816116f3565b915060208381013567ffffffffffffffff80821115611036578384fd5b81860187601f820112611047578485fd5b80359250611057610f90846116d3565b83815284810190828601875b868110156110d357813585016060818e03601f1901121561108257898afd5b61108c60606116ac565b89820135815260408201358a8201526060820135888111156110ac578b8cfd5b6110ba8f8c83860101610f72565b6040830152508552509287019290870190600101611063565b50979a909950975050505050505050565b6000806000606084860312156110f8578081fd5b8335611103816116f3565b95602085013595506040909401359392505050565b6000806000806080858703121561112d578081fd5b8435611138816116f3565b93506020850135925060408501359150606085013567ffffffffffffffff811115611161578182fd5b61116d87828801610f72565b91505092959194509250565b60006020828403121561118a578081fd5b81518015158114610a26578182fd5b600080604083850312156111ab578182fd5b82356111b6816116f3565b946020939093013593505050565b6000602082840312156111d5578081fd5b5035919050565b600080604083850312156111ee578182fd5b823591506020830135611200816116f3565b809150509250929050565b60008060006060848603121561121f578283fd5b505081359360208301359350604090920135919050565b60008060408385031215611248578182fd5b50508035926020909101359150565b60609290921b6bffffffffffffffffffffffff19168252601482015260340190565b918252602082015260400190565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b818110156113125783511515835292840192918401916001016112f4565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b818110156113125783518352928401929184019160010161133a565b901515815260200190565b90815260200190565b60208082526016908201527524b731b7b93932b1ba1036b2b935b63290383937b7b360511b604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526027908201527f5065727046694f776e61626c65557067726164653a2073616d652061732063616040820152666e64696461746560c81b606082015260800190565b60208082526027908201527f5065727046694f776e61626c65557067726164653a206e6f7420746865206e656040820152663b9037bbb732b960c91b606082015260800190565b6020808252600d908201526c496e76616c696420636c61696d60981b604082015260600190565b6020808252600f908201526e436c61696d656420616c726561647960881b604082015260600190565b60208082526022908201527f5065727046694f776e61626c65557067726164653a207a65726f206164647265604082015261737360f01b606082015260800190565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201526d195b881a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252600d908201526c125b9d985b1a59081a5b9c1d5d609a1b604082015260600190565b60208082526013908201527211549497d514905394d1915497d19052531151606a1b604082015260600190565b6020808252601a908201527f63616e6e6f742072657772697465206d65726b6c6520726f6f74000000000000604082015260600190565b6020808252602f908201527f5065727046694f776e61626c65557067726164653a2063616e6469646174652060408201526e6973207a65726f206164647265737360881b606082015260800190565b6020808252602d908201527f5065727046694f776e61626c65557067726164653a2063616c6c65722069732060408201526c3737ba103a34329037bbb732b960991b606082015260800190565b60208082526026908201527f5065727046694f776e61626c65557067726164653a2073616d65206173206f726040820152651a59da5b985b60d21b606082015260800190565b60405181810167ffffffffffffffff811182821017156116cb57600080fd5b604052919050565b600067ffffffffffffffff8211156116e9578081fd5b5060209081020190565b6001600160a01b0381168114610d7657600080fdfea26469706673582212209e357462c4d9ccdba700907e54b4ed305562564745dc2973f7e438acd7237a5064736f6c63430006090033\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Signer, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { StakedPerpToken } from \"../StakedPerpToken\";\n\nexport class StakedPerpToken__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<StakedPerpToken> {\n    return super.deploy(overrides || {}) as Promise<StakedPerpToken>;\n  }\n  getDeployTransaction(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  attach(address: string): StakedPerpToken {\n    return super.attach(address) as StakedPerpToken;\n  }\n  connect(signer: Signer): StakedPerpToken__factory {\n    return super.connect(signer) as StakedPerpToken__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): StakedPerpToken {\n    return new Contract(address, _abi, signerOrProvider) as StakedPerpToken;\n  }\n}\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"stakedModule\",\n        type: \"address\",\n      },\n    ],\n    name: \"StakeModuleAdded\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"stakedModule\",\n        type: \"address\",\n      },\n    ],\n    name: \"StakeModuleRemoved\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"staker\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Staked\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"staker\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Unstaked\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"staker\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Withdrawn\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"TOKEN_AMOUNT_LIMIT\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IStakeModule\",\n        name: \"_stakeModule\",\n        type: \"address\",\n      },\n    ],\n    name: \"addStakeModule\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_owner\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"__blockNumber\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"balanceOfAt\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"candidate\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"cooldownPeriod\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        internalType: \"uint8\",\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getStakeModuleLength\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"_perpToken\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_cooldownPeriod\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IStakeModule\",\n        name: \"_stakeModule\",\n        type: \"address\",\n      },\n    ],\n    name: \"isStakeModuleExisted\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"perpToken\",\n    outputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IStakeModule\",\n        name: \"_stakeModule\",\n        type: \"address\",\n      },\n    ],\n    name: \"removeStakeModule\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"setOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_amount\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"stake\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"stakeModules\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"stakerCooldown\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"stakerWithdrawPendingBalance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"d\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"__blockNumber\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"totalSupplyAt\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"unstake\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"updateOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"withdraw\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x608060405234801561001057600080fd5b50612c80806100206000396000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c80638da5cb5b11610104578063bc5920ba116100a2578063dd62ed3e11610071578063dd62ed3e1461038a578063de1141901461039d578063f0a10b1a146103a5578063fae7d15c146103b8576101da565b8063bc5920ba14610349578063c1bbe0de14610351578063cd6dc68714610364578063d5f8fcfa14610377576101da565b8063981b24d0116100de578063981b24d0146103085780639cadb3a01461031b578063a9059cbb14610323578063ac04f24314610336576101da565b80638da5cb5b146102e557806390c95b7d146102ed57806395d89b4114610300576101da565b806329a2293d1161017c5780634ee2cd7e1161014b5780634ee2cd7e146102a25780636c8381f8146102b557806370a08231146102ca578063715018a6146102dd576101da565b806329a2293d1461026a5780632def66201461027d578063313ce567146102855780633ccfd60b1461029a576101da565b8063095ea7b3116101b8578063095ea7b31461021a57806313af40351461023a57806318160ddd1461024f57806323b872dd14610257576101da565b8063032370dc146101df57806304646a49146101fd57806306fdde0314610205575b600080fd5b6101e76103cb565b6040516101f49190612bf2565b60405180910390f35b6101e76103d3565b61020d6103da565b6040516101f49190612593565b61022d61022836600461244c565b610468565b6040516101f49190612588565b61024d6102483660046123b8565b61048b565b005b6101e7610564565b61022d61026536600461240c565b610583565b6101e76102783660046123b8565b61059d565b61024d6105b0565b61028d610789565b6040516101f49190612bfb565b61024d610793565b6101e76102b036600461244c565b61087e565b6102bd610896565b6040516101f49190612537565b6101e76102d83660046123b8565b6108a5565b61024d6108c3565b6102bd610942565b6101e76102fb3660046123b8565b610951565b61020d610964565b6101e76103163660046124eb565b6109bf565b6102bd6109cd565b61022d61033136600461244c565b6109dd565b61024d610344366004612497565b6109f7565b61024d610be3565b6102bd61035f3660046124eb565b610ca6565b61024d61037236600461244c565b610cce565b61022d6103853660046123b8565b610e18565b6101e76103983660046123d4565b610e88565b6101e7610e90565b61024d6103b33660046123b8565b610e95565b61024d6103c63660046123b8565b610f66565b610105545b90565b6101075481565b60fe805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104605780601f1061043557610100808354040283529160200191610460565b820191906000526020600020905b81548152906001019060200180831161044357829003601f168201915b505050505081565b600060405162461bcd60e51b81526004016104829061293d565b60405180910390fd5b610493611026565b6098546001600160a01b039081169116146104c05760405162461bcd60e51b815260040161048290612af1565b6001600160a01b0381166104e65760405162461bcd60e51b8152600401610482906128ad565b6098546001600160a01b03828116911614156105145760405162461bcd60e51b815260040161048290612b75565b6099546001600160a01b03828116911614156105425760405162461bcd60e51b815260040161048290612693565b609980546001600160a01b0319166001600160a01b0392909216919091179055565b600061057e61057961057461102a565b61102e565b611064565b905090565b600060405162461bcd60e51b815260040161048290612634565b6101036020526000908152604090205481565b60006105ba611026565b90506105c4611068565b6001600160a01b038116600090815261010460209081526040918290208251918201909252905481526105f690611064565b156106135760405162461bcd60e51b815260040161048290612758565b61061b61230d565b60405180602001604052806106546101026000866001600160a01b03166001600160a01b0316815260200190815260200160002061108a565b90529050610661816110d5565b61066b8282611100565b6106866101075461067a61120e565b9063ffffffff61121216565b6001600160a01b038316600090815261010360209081526040808320939093556101049052908120825190555b610105548110156107435761010581815481106106cc57fe5b60009182526020909120015460405163cd8ae3dd60e01b81526001600160a01b039091169063cd8ae3dd90610705908690600401612537565b600060405180830381600087803b15801561071f57600080fd5b505af1158015610733573d6000803e3d6000fd5b5050600190920191506106b39050565b507f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f758261076f83611064565b60405161077d92919061256f565b60405180910390a15050565b6101005460ff1681565b600061079d611026565b90506107a761230d565b506001600160a01b038116600090815261010460209081526040918290208251918201909252905481526107da816110d5565b6001600160a01b038216600090815261010360205260409020546107fc61120e565b101561081a5760405162461bcd60e51b815260040161048290612882565b6001600160a01b038083166000908152610104602090815260408083208390556101039091528120556101065461085391168383611237565b7f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d58261076f83611064565b600061088d6105798484611366565b90505b92915050565b6099546001600160a01b031690565b60006108bb610579836108b661102a565b611366565b90505b919050565b6108cb611026565b6098546001600160a01b039081169116146108f85760405162461bcd60e51b815260040161048290612af1565b6098546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3609880546001600160a01b0319169055565b6098546001600160a01b031690565b6101046020526000908152604090205481565b60ff805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104605780601f1061043557610100808354040283529160200191610460565b60006108bb6105798361102e565b610106546001600160a01b031681565b600060405162461bcd60e51b815260040161048290612a02565b610a0e610a09368390038301836124ae565b6110d5565b610a16611068565b6000610a20611026565b9050610a2a61230d565b610a39368490038401846124ae565b6001600160a01b03831660009081526101046020908152604091829020825191820190925290548152909150610a6e90611064565b15610ad8576001600160a01b03821660009081526101046020908152604091829020825191820190925290548152610aad90829063ffffffff6113b316565b6001600160a01b03831660009081526101046020908152604080832083905561010390915281205590505b61010654610aff906001600160a01b03168330610afa368890038801886124ae565b6113df565b610b098282611511565b60005b61010554811015610b9c576101058181548110610b2557fe5b60009182526020909120015460405163cd8ae3dd60e01b81526001600160a01b039091169063cd8ae3dd90610b5e908690600401612537565b600060405180830381600087803b158015610b7857600080fd5b505af1158015610b8c573d6000803e3d6000fd5b505060019092019150610b0c9050565b507f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d82610bc883611064565b604051610bd692919061256f565b60405180910390a1505050565b6099546001600160a01b0316610c0b5760405162461bcd60e51b815260040161048290612aa2565b610c13611026565b6099546001600160a01b03908116911614610c405760405162461bcd60e51b8152600401610482906126da565b6099546098546040516001600160a01b0392831692909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360998054609880546001600160a01b03199081166001600160a01b03841617909155169055565b6101058181548110610cb457fe5b6000918252602090912001546001600160a01b0316905081565b603354610100900460ff1680610ce75750610ce7611601565b80610cf5575060335460ff16155b610d115760405162461bcd60e51b8152600401610482906128ef565b603354610100900460ff16158015610d3c576033805460ff1961ff0019909116610100171660011790555b6001600160a01b038316610d625760405162461bcd60e51b81526004016104829061266b565b610d6a611607565b6040805180820190915260108082526f14dd185ad9590814195c9c195d1d585b60821b6020909201918252610da19160fe91612320565b5060408051808201909152600580825264073504552560dc1b6020909201918252610dce9160ff91612320565b50610100805460ff1916601217905561010680546001600160a01b0385166001600160a01b03199091161790556101078290558015610e13576033805461ff00191690555b505050565b60006108bb82610105805480602002602001604051908101604052809291908181526020018280548015610e7557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610e57575b505050505061169990919063ffffffff16565b600092915050565b601481565b610e9d611026565b6098546001600160a01b03908116911614610eca5760405162461bcd60e51b815260040161048290612af1565b6000610ede6101058363ffffffff6116ef16565b90506001600160a01b038116610f065760405162461bcd60e51b815260040161048290612b3e565b816001600160a01b0316816001600160a01b031614610f375760405162461bcd60e51b81526004016104829061280a565b7f2c54da8cf6b6d65b4bd7e9bf095dd4d133a2ce5731ebb20a4f1bcc3db90294308260405161077d9190612537565b610f6e611026565b6098546001600160a01b03908116911614610f9b5760405162461bcd60e51b815260040161048290612af1565b61010554601411610fbe5760405162461bcd60e51b815260040161048290612721565b610fd06101058263ffffffff6117fb16565b610fec5760405162461bcd60e51b815260040161048290612a39565b7f9400eb2cfb16fdd3f18022e33f5d4b757dea0c4367d95f0495f6af5911e1e9148160405161101b9190612537565b60405180910390a150565b3390565b4390565b61103661230d565b604051806020016040528061105c61104d856118b4565b6101019063ffffffff61191316565b905292915050565b5190565b610105546110885760405162461bcd60e51b8152600401610482906129b5565b565b805460009080156110cc578260000160018203815481106110a757fe5b600091825260209091200154600160401b90046001600160c01b031691506108be9050565b50600092915050565b60006110e082611064565b116110fd5760405162461bcd60e51b8152600401610482906129dd565b50565b6001600160a01b0382166111265760405162461bcd60e51b815260040161048290612974565b61112e61230d565b6040518060200160405280611142856108a5565b9052905061114e61230d565b61115e828463ffffffff61191f16565b905061116861230d565b604051806020016040528061117b610564565b9052905061118761230d565b611197828663ffffffff61191f16565b905060006111a361102a565b90506111b0878286611942565b6111ba8183611985565b60006001600160a01b0388167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6111f089611064565b6040516111fd9190612bf2565b60405180910390a350505050505050565b4290565b60008282018381101561088d5760405162461bcd60e51b8152600401610482906125fd565b611240836119b1565b61124861230d565b61125284846119fb565b905060006112608584611a88565b905060006060866001600160a01b031663a9059cbb60e01b878560405160240161128b92919061256f565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516112c9919061251b565b6000604051808303816000865af19150503d8060008114611306576040519150601f19603f3d011682016040523d82523d6000602084013e61130b565b606091505b50915091508180156113355750805115806113355750808060200190518101906113359190612477565b6113515760405162461bcd60e51b8152600401610482906125c6565b61135d87878587611b06565b50505050505050565b61136e61230d565b60405180602001604052806113aa611385856118b4565b6001600160a01b0387166000908152610102602052604090209063ffffffff61191316565b90529392505050565b6113bb61230d565b6113c361230d565b825184516113d69163ffffffff61121216565b81529392505050565b6113e8846119b1565b6113f061230d565b6113fa85846119fb565b905060006114088684611a88565b905060006060876001600160a01b03166323b872dd60e01b8888866040516024016114359392919061254b565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051611473919061251b565b6000604051808303816000865af19150503d80600081146114b0576040519150601f19603f3d011682016040523d82523d6000602084013e6114b5565b606091505b50915091508180156114df5750805115806114df5750808060200190518101906114df9190612477565b6114fb5760405162461bcd60e51b8152600401610482906127c9565b61150788878587611b06565b5050505050505050565b6001600160a01b0382166115375760405162461bcd60e51b815260040161048290612bbb565b61153f61230d565b6040518060200160405280611553856108a5565b9052905061155f61230d565b61156f828463ffffffff6113b316565b905061157961230d565b604051806020016040528061158c610564565b9052905061159861230d565b6115a8828663ffffffff6113b316565b905060006115b461102a565b90506115c1878286611942565b6115cb8183611985565b6001600160a01b03871660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6111f089611064565b303b1590565b603354610100900460ff16806116205750611620611601565b8061162e575060335460ff16155b61164a5760405162461bcd60e51b8152600401610482906128ef565b603354610100900460ff16158015611675576033805460ff1961ff0019909116610100171660011790555b61167d611b5f565b611685611be0565b80156110fd576033805461ff001916905550565b6000805b83518110156116e5578381815181106116b257fe5b60200260200101516001600160a01b0316836001600160a01b031614156116dd576001915050610890565b60010161169d565b5060009392505050565b60006001600160a01b03821661170757506000610890565b825460005b818110156117f05784818154811061172057fe5b6000918252602090912001546001600160a01b03858116911614156117e8576001820381146117b15784600183038154811061175857fe5b9060005260206000200160009054906101000a90046001600160a01b031685828154811061178257fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b848054806117bb57fe5b600082815260209020810160001990810180546001600160a01b0319169055019055508291506108909050565b60010161170c565b506000949350505050565b60006001600160a01b038216158061187157506118718380548060200260200160405190810160405280929190818152602001828054801561186657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611848575b505050505083611699565b1561187e57506000610890565b50815460018082018455600093845260209093200180546001600160a01b0319166001600160a01b039290921691909117905590565b60408051808201909152601581527455494e5436345f4e554d4245525f544f4f5f42494760581b602082015260009067ffffffffffffffff83111561190c5760405162461bcd60e51b81526004016104829190612593565b5090919050565b600061088d8383611cba565b61192761230d565b61192f61230d565b825184516113d69163ffffffff611e4b16565b610e1361194e836118b4565b61195f61195a84611064565b611e8d565b6001600160a01b038616600090815261010260205260409020919063ffffffff611ee516565b6119ad611991836118b4565b61199d61195a84611064565b610101919063ffffffff611ee516565b5050565b60006119bc82612087565b6001600160a01b03831660009081526020819052604090205490915081146119ad576001600160a01b0391909116600090815260208190526040902055565b611a0361230d565b61088d83846001600160a01b03166370a08231856040518263ffffffff1660e01b8152600401611a339190612537565b60206040518083038186803b158015611a4b57600080fd5b505afa158015611a5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a839190612503565b612174565b600080611a9484612087565b905060128110611ad257611aca611ab282601263ffffffff611e4b16565b600a0a611abe85611064565b9063ffffffff61220616565b915050610890565b611afe611ae660128363ffffffff611e4b16565b600a0a611af285611064565b9063ffffffff61224016565b949350505050565b611b39611b23611b168685612174565b839063ffffffff6113b316565b611b2d86866119fb565b9063ffffffff61228216565b60000b15611b595760405162461bcd60e51b815260040161048290612a60565b50505050565b603354610100900460ff1680611b785750611b78611601565b80611b86575060335460ff16155b611ba25760405162461bcd60e51b8152600401610482906128ef565b603354610100900460ff16158015611685576033805460ff1961ff00199091166101001716600117905580156110fd576033805461ff001916905550565b603354610100900460ff1680611bf95750611bf9611601565b80611c07575060335460ff16155b611c235760405162461bcd60e51b8152600401610482906128ef565b603354610100900460ff16158015611c4e576033805460ff1961ff0019909116610100171660011790555b6000611c58611026565b609880546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35080156110fd576033805461ff001916905550565b815460009080611cce576000915050610890565b8354600019820190600090869083908110611ce557fe5b6000918252602090912001805490915067ffffffffffffffff90811690861610611d245754600160401b90046001600160c01b03169250610890915050565b8260011480611d5b575085600001600081548110611d3e57fe5b60009182526020909120015467ffffffffffffffff908116908616105b15611d6c5760009350505050610890565b600060001983015b81811115611e14578754600283830160010104906000908a9083908110611d9757fe5b6000918252602090912001805490915067ffffffffffffffff908116908a16811015611dc557829450611e0c565b8067ffffffffffffffff168a67ffffffffffffffff161015611dec57600183039350611e0c565b5054600160401b90046001600160c01b0316965061089095505050505050565b505050611d74565b876000018281548110611e2357fe5b600091825260209091200154600160401b90046001600160c01b031698975050505050505050565b600061088d83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506122aa565b60408051808201909152601681527555494e543139325f4e554d4245525f544f4f5f42494760501b60208201526000906001600160c01b0383111561190c5760405162461bcd60e51b81526004016104829190612593565b825480611f58576040805180820190915267ffffffffffffffff80851682526001600160c01b0380851660208085019182528854600181018a5560008a8152919091209451940180549151909216600160401b0293831667ffffffffffffffff1990911617909116919091179055611b59565b6000846000016001830381548110611f6c57fe5b6000918252602090912001805490915067ffffffffffffffff908116908516811015611ffe576040805180820190915267ffffffffffffffff80871682526001600160c01b0380871660208085019182528a54600181018c5560008c8152919091209451940180549151909216600160401b0293831667ffffffffffffffff199091161790911691909117905561207f565b808567ffffffffffffffff16141561203457815467ffffffffffffffff16600160401b6001600160c01b0386160217825561207f565b604080518082018252601a81527f434845434b504f494e545f504153545f434845434b504f494e540000000000006020820152905162461bcd60e51b81526104829190600401612593565b505050505050565b6001600160a01b038116600090815260208190526040812054806108bb5760408051600481526024810182526020810180516001600160e01b031663313ce56760e01b17905290516000916060916001600160a01b038716916120e99161251b565b600060405180830381855afa9150503d8060008114612124576040519150601f19603f3d011682016040523d82523d6000602084013e612129565b606091505b509150915081801561213b5750805115155b6121575760405162461bcd60e51b815260040161048290612788565b8080602001905181019061216b9190612503565b95945050505050565b61217c61230d565b600061218784612087565b9050601281106121cc576040805160208101909152806121c16121b184601263ffffffff611e4b16565b8690600a0a63ffffffff61224016565b815250915050610890565b6040805160208101909152806121fc6121ec60128563ffffffff611e4b16565b8690600a0a63ffffffff61220616565b9052949350505050565b60008261221557506000610890565b8282028284828161222257fe5b041461088d5760405162461bcd60e51b815260040161048290612841565b600061088d83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506122d6565b80518251600091101561229757506001610890565b8151835110156110cc5750600019610890565b600081848411156122ce5760405162461bcd60e51b81526004016104829190612593565b505050900390565b600081836122f75760405162461bcd60e51b81526004016104829190612593565b50600083858161230357fe5b0495945050505050565b6040518060200160405280600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061236157805160ff191683800117855561238e565b8280016001018555821561238e579182015b8281111561238e578251825591602001919060010190612373565b5061239a92915061239e565b5090565b6103d091905b8082111561239a57600081556001016123a4565b6000602082840312156123c9578081fd5b813561088d81612c35565b600080604083850312156123e6578081fd5b82356123f181612c35565b9150602083013561240181612c35565b809150509250929050565b600080600060608486031215612420578081fd5b833561242b81612c35565b9250602084013561243b81612c35565b929592945050506040919091013590565b6000806040838503121561245e578182fd5b823561246981612c35565b946020939093013593505050565b600060208284031215612488578081fd5b8151801515811461088d578182fd5b6000602082840312156124a8578081fd5b50919050565b6000602082840312156124bf578081fd5b6040516020810181811067ffffffffffffffff821117156124de578283fd5b6040529135825250919050565b6000602082840312156124fc578081fd5b5035919050565b600060208284031215612514578081fd5b5051919050565b6000825161252d818460208701612c09565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b60006020825282518060208401526125b2816040850160208701612c09565b601f01601f19169190910160400192915050565b6020808252601d908201527f446563696d616c45524332303a207472616e73666572206661696c6564000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601f908201527f7472616e7366657246726f6d2829206973206e6f7420737570706f7274656400604082015260600190565b6020808252600e908201526d24b73b30b634b21034b7383aba1760911b604082015260600190565b60208082526027908201527f5065727046694f776e61626c65557067726164653a2073616d652061732063616040820152666e64696461746560c81b606082015260800190565b60208082526027908201527f5065727046694f776e61626c65557067726164653a206e6f7420746865206e656040820152663b9037bbb732b960c91b606082015260800190565b6020808252601f908201527f657863656564207374616b654d6f64756c6520616d6f756e74206c696d697400604082015260600190565b60208082526016908201527513995959081d1bc81dda5d1a191c985dc8199a5c9cdd60521b604082015260600190565b60208082526021908201527f446563696d616c45524332303a2067657420646563696d616c73206661696c656040820152601960fa1b606082015260800190565b60208082526021908201527f446563696d616c45524332303a207472616e7366657246726f6d206661696c656040820152601960fa1b606082015260800190565b60208082526018908201527f72656d6f76652077726f6e67207374616b654d6f64756c650000000000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b60208082526011908201527029ba34b6361034b71031b7b7b63237bbb760791b604082015260600190565b60208082526022908201527f5065727046694f776e61626c65557067726164653a207a65726f206164647265604082015261737360f01b606082015260800190565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201526d195b881a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252601a908201527f617070726f76652829206973206e6f7420737570706f72746564000000000000604082015260600190565b60208082526021908201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736040820152607360f81b606082015260800190565b6020808252600e908201526d6e6f207374616b654d6f64756c6560901b604082015260600190565b6020808252600b908201526a0416d6f756e7420697320360ac1b604082015260600190565b6020808252601b908201527f7472616e736665722829206973206e6f7420737570706f727465640000000000604082015260600190565b6020808252600d908201526c1a5b9d985b1a59081a5b9c1d5d609a1b604082015260600190565b60208082526022908201527f446563696d616c45524332303a2062616c616e636520696e636f6e73697374656040820152611b9d60f21b606082015260800190565b6020808252602f908201527f5065727046694f776e61626c65557067726164653a2063616e6469646174652060408201526e6973207a65726f206164647265737360881b606082015260800190565b6020808252602d908201527f5065727046694f776e61626c65557067726164653a2063616c6c65722069732060408201526c3737ba103a34329037bbb732b960991b606082015260800190565b6020808252601a908201527f7374616b654d6f64756c6520646f6573206e6f74206578697374000000000000604082015260600190565b60208082526026908201527f5065727046694f776e61626c65557067726164653a2073616d65206173206f726040820152651a59da5b985b60d21b606082015260800190565b6020808252601f908201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604082015260600190565b90815260200190565b60ff91909116815260200190565b60005b83811015612c24578181015183820152602001612c0c565b83811115611b595750506000910152565b6001600160a01b03811681146110fd57600080fdfea264697066735822122073e989f64a15a254261493e3694f85ef06600b8e35def7f3d3554a88fb15f48b64736f6c63430006090033\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Signer, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { StakingReserve } from \"../StakingReserve\";\n\nexport class StakingReserve__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<StakingReserve> {\n    return super.deploy(overrides || {}) as Promise<StakingReserve>;\n  }\n  getDeployTransaction(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  attach(address: string): StakingReserve {\n    return super.attach(address) as StakingReserve;\n  }\n  connect(signer: Signer): StakingReserve__factory {\n    return super.connect(signer) as StakingReserve__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): StakingReserve {\n    return new Contract(address, _abi, signerOrProvider) as StakingReserve;\n  }\n}\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"fee\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"epoch\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"FeeInEpoch\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"staker\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"RewardWithdrawn\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"candidate\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"claimFeesAndVestedReward\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_amount\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"depositAndStake\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"epochRewardHistory\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"perpReward\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"feeMap\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"d\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"feeNotifier\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"feeTokens\",\n    outputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getEpochRewardHistoryLength\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_staker\",\n        type: \"address\",\n      },\n    ],\n    name: \"getFeeEpochCursor\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_epoch\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_token\",\n        type: \"address\",\n      },\n    ],\n    name: \"getFeeOfEpoch\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_staker\",\n        type: \"address\",\n      },\n    ],\n    name: \"getFeeRevenue\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"address\",\n            name: \"token\",\n            type: \"address\",\n          },\n          {\n            components: [\n              {\n                internalType: \"uint256\",\n                name: \"d\",\n                type: \"uint256\",\n              },\n            ],\n            internalType: \"struct Decimal.decimal\",\n            name: \"balance\",\n            type: \"tuple\",\n          },\n        ],\n        internalType: \"struct StakingReserve.FeeBalance[]\",\n        name: \"feeBalance\",\n        type: \"tuple[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_staker\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_epochIndex\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getLockedBalance\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"bool\",\n            name: \"exist\",\n            type: \"bool\",\n          },\n          {\n            components: [\n              {\n                internalType: \"uint256\",\n                name: \"d\",\n                type: \"uint256\",\n              },\n            ],\n            internalType: \"struct Decimal.decimal\",\n            name: \"locked\",\n            type: \"tuple\",\n          },\n          {\n            components: [\n              {\n                internalType: \"uint256\",\n                name: \"d\",\n                type: \"uint256\",\n              },\n            ],\n            internalType: \"struct Decimal.decimal\",\n            name: \"timeWeightedLocked\",\n            type: \"tuple\",\n          },\n        ],\n        internalType: \"struct StakingReserve.LockedBalance\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_staker\",\n        type: \"address\",\n      },\n    ],\n    name: \"getRewardEpochCursor\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getTotalBalance\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_epochIndex\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getTotalEffectiveStake\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_staker\",\n        type: \"address\",\n      },\n    ],\n    name: \"getUnlockedBalance\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_staker\",\n        type: \"address\",\n      },\n    ],\n    name: \"getUnstakableBalance\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_staker\",\n        type: \"address\",\n      },\n    ],\n    name: \"getVestedReward\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"reward\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_perpToken\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract SupplySchedule\",\n        name: \"_supplySchedule\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_feeNotifier\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_vestingPeriod\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"_token\",\n        type: \"address\",\n      },\n    ],\n    name: \"isExistedFeeToken\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"nextEpochIndex\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_amount\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"notifyRewardAmount\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"_token\",\n        type: \"address\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_amount\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"notifyTokenAmount\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"perpToken\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"rewardsDistribution\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_notifier\",\n        type: \"address\",\n      },\n    ],\n    name: \"setFeeNotifier\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"setOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_rewardsDistribution\",\n        type: \"address\",\n      },\n    ],\n    name: \"setRewardsDistribution\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_vestingPeriod\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"setVestingPeriod\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_amount\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"stake\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"stakeBalanceMap\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"exist\",\n        type: \"bool\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"totalBalance\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"rewardEpochCursor\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"feeEpochCursor\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"stakers\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"token\",\n    outputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_amount\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"unstake\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"updateOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"vestingPeriod\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_amount\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"withdraw\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x608060405234801561001057600080fd5b506135e8806100206000396000f3fe608060405234801561001057600080fd5b506004361061023d5760003560e01c80635cdd7c701161013b578063a63a5e76116100b8578063cfc90c321161007c578063cfc90c32146104a5578063d7058d8d146104b8578063fc0c546a146104cb578063fd5e6dd1146104d3578063ff59f86d146104e65761023d565b8063a63a5e761461045c578063a7d4b2d314610464578063ac04f24314610477578063bc5920ba1461048a578063cf756fdf146104925761023d565b80637313ee5a116100ff5780637313ee5a1461041e5780638da5cb5b146104265780638ef4403c1461042e5780638f0a270e146104415780639cadb3a0146104545761023d565b80635cdd7c70146103c85780636a3662f1146103db5780636c8381f8146103ee57806370c88be8146103f6578063715018a6146104165761023d565b8063141eea7f116101c957806336b4402a1161018d57806336b4402a146103575780633ee7a5ce1461037a5780633fc6df6e1461038d57806340bee0ed1461039557806341daeb24146103a85761023d565b8063141eea7f1461031457806316c2f69f1461032957806319762143146103315780631c17820314610344578063239e1d67146103295761023d565b80630cd61a0c116102105780630cd61a0c146102b35780630dc095cf146102d3578063129de5bf146102e657806312b58349146102f957806313af4035146103015761023d565b806301bb7d9c1461024257806303e16d421461025757806304aa4487146102805780630a8d9b67146102a0575b600080fd5b610255610250366004612d23565b6104f9565b005b61026a610265366004612c37565b610696565b6040516102779190613535565b60405180910390f35b61029361028e366004612d7b565b6106a9565b604051610277919061352b565b6102556102ae366004612cee565b6106d9565b6102c66102c1366004612c37565b610802565b6040516102779190612ec1565b6102936102e1366004612dab565b610861565b6102936102f4366004612c37565b6108b6565b610293610919565b61025561030f366004612c37565b610951565b61031c610a2a565b6040516102779190612df6565b61026a610a3a565b61025561033f366004612c37565b610a41565b610255610352366004612d23565b610a98565b61036a610365366004612c37565b610b08565b6040516102779493929190612ecc565b610255610388366004612d23565b610b40565b61031c610c84565b6102556103a3366004612d7b565b610c93565b6103bb6103b6366004612c37565b610cce565b6040516102779190612e68565b6102556103d6366004612c37565b610f0f565b61026a6103e9366004612c37565b610f67565b61031c610f86565b610409610404366004612ca3565b610f95565b6040516102779190613506565b61025561105b565b61026a6110da565b61031c6110e1565b61031c61043c366004612d7b565b6110f0565b61026a61044f366004612c37565b611118565b61031c611137565b610255611147565b610293610472366004612c37565b611326565b610255610485366004612d3e565b6114c0565b6102556118db565b6102556104a0366004612c53565b61199e565b6102936104b3366004612d7b565b611a7b565b6102936104c6366004612c37565b611aa6565b61031c611ac9565b61031c6104e1366004612d7b565b611ad9565b6102556104f4366004612d23565b611ae7565b600061051261050d36849003840184612d3e565b611d1b565b116105385760405162461bcd60e51b815260040161052f90612fc0565b60405180910390fd5b6000610542611d1f565b905061055061050d82611aa6565b61056261050d36859003850185612d3e565b11156105805760405162461bcd60e51b815260040161052f9061312a565b600061059b600161058f610a3a565b9063ffffffff611d2316565b90506105a5612bbc565b6105af8383610f95565b604080516060810190915260018152909150602081016105e86105d736889003880188612d3e565b60208501519063ffffffff611d4816565b81526020016106106105ff36889003880188612d3e565b60408501519063ffffffff611d4816565b90526001600160a01b0384166000908152610165602090815260408083208684526004018252918290208351815460ff1916901515178155908301515160018201559101515160029091015561068b61066e36869003860186612d3e565b60408051602081019091526101635481529063ffffffff611d7416565b516101635550505050565b61016c6020526000908152604090205481565b61016781815481106106b757fe5b6000918252602091829020604080519384019052600290910201548152905081565b6106e1611d1f565b61016d546001600160a01b0390811691161461070f5760405162461bcd60e51b815260040161052f906132a8565b600061072361050d36849003840184612d3e565b116107405760405162461bcd60e51b815260040161052f906132ce565b61078761075236839003830183612d3e565b6001600160a01b038416600090815261016c60209081526040918290208251918201909252905481529063ffffffff611de916565b6001600160a01b038316600090815261016c60205260409020905190556107ad82610802565b6107fe5761016b80546001810182556000919091527f45c4c4b2842a4a2a717cf0ddf6c6d1dee52b7fd8d9da97eb519765c7a27020f40180546001600160a01b0319166001600160a01b0384161790555b5050565b6000805b61016b5481101561085657826001600160a01b031661016b828154811061082957fe5b6000918252602090912001546001600160a01b0316141561084e57600191505061085c565b600101610806565b50600090505b919050565b610869612bea565b610167838154811061087757fe5b600091825260208083206001600160a01b0386168452600160029093020191909101815260409182902082519182019092529054815290505b92915050565b6108be612bea565b6108c6612bea565b6108d283610404610a3a565b6020908101516001600160a01b0385166000908152610165835260409081902081519384019091526001015482529150610912908263ffffffff611d4816565b9392505050565b610921612bea565b610166600061092e610a3a565b815260208082019290925260409081016000208151928301909152548152905090565b610959611d1f565b6065546001600160a01b039081169116146109865760405162461bcd60e51b815260040161052f9061343c565b6001600160a01b0381166109ac5760405162461bcd60e51b815260040161052f90613218565b6065546001600160a01b03828116911614156109da5760405162461bcd60e51b815260040161052f906134c0565b6066546001600160a01b0382811691161415610a085760405162461bcd60e51b815260040161052f90612fee565b606680546001600160a01b0319166001600160a01b0392909216919091179055565b61016d546001600160a01b031681565b6101675490565b610a49611d1f565b6065546001600160a01b03908116911614610a765760405162461bcd60e51b815260040161052f9061343c565b609980546001600160a01b0319166001600160a01b0392909216919091179055565b6101315460ff16610abb5760405162461bcd60e51b815260040161052f90613489565b610131805460ff19169055610ae5610ad1611d1f565b610ae036849003840184612d3e565b611e0c565b610af761048536839003830183612d3e565b50610131805460ff19166001179055565b610165602090815260009182526040918290208054835192830190935260018101548252600281015460039091015460ff9093169284565b6101315460ff16610b635760405162461bcd60e51b815260040161052f90613489565b610131805460ff19169055610b8061050d36839003830183612d3e565b610b9c5760405162461bcd60e51b815260040161052f90612fc0565b6000610ba6611d1f565b9050610bb461050d826108b6565b610bc661050d36859003850185612d3e565b1115610be45760405162461bcd60e51b815260040161052f906130bd565b610c2f610bf636849003840184612d3e565b6001600160a01b03831660009081526101656020908152604091829020825191820190925260019091015481529063ffffffff611d4816565b6001600160a01b03808316600090815261016560205260409020915160019092019190915561016954610c72911682610c6d36869003860186612d3e565b611efd565b5050610131805460ff19166001179055565b6099546001600160a01b031681565b610c9b611d1f565b6065546001600160a01b03908116911614610cc85760405162461bcd60e51b815260040161052f9061343c565b61016455565b6001600160a01b038116600090815261016560205260409020606090610cf2610a3a565b81600301541415610d03575061085c565b61016b548067ffffffffffffffff81118015610d1e57600080fd5b50604051908082528060200260200182016040528015610d5857816020015b610d45612bfd565b815260200190600190039081610d3d5790505b509250610d63612bea565b60038301545b610d71610a3a565b811015610f0657600081815260048501602090815260409182902082519182019092526002909101548152610da590611d1b565b15610dd15760008181526004850160209081526040918290208251918201909252600290910154815291505b610dda82611d1b565b610de357610efe565b610deb612bea565b60008281526101666020908152604091829020825191820190925290548152610e1b90849063ffffffff61202c16565b905060005b84811015610efb57600061016b8281548110610e3857fe5b6000918252602090912001546001600160a01b03169050610e57612bea565b610e618583610861565b9050610e6c81611d1b565b610e77575050610ef3565b610eb0610e8a828663ffffffff61204f16565b8a8581518110610e9657fe5b602002602001015160200151611de990919063ffffffff16565b898481518110610ebc57fe5b60200260200101516020018190525081898481518110610ed857fe5b60209081029190910101516001600160a01b03909116905250505b600101610e20565b50505b600101610d69565b50505050919050565b610f17611d1f565b6065546001600160a01b03908116911614610f445760405162461bcd60e51b815260040161052f9061343c565b61016d80546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03166000908152610165602052604090206002015490565b6066546001600160a01b031690565b610f9d612bbc565b610fa5612bbc565b506001600160a01b0383166000908152610165602090815260408083208584526004018252918290208251606081018452815460ff1615158152835180840185526001830154815281840152835192830184526002909101548252918201528051156110125790506108b0565b8261101d5750611029565b60018303925050610f9d565b6040518060600160405280600015158152602001611045612072565b8152602001611052612072565b90529392505050565b611063611d1f565b6065546001600160a01b039081169116146110905760405162461bcd60e51b815260040161052f9061343c565b6065546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3606580546001600160a01b0319169055565b6101645481565b6065546001600160a01b031690565b61016b81815481106110fe57fe5b6000918252602090912001546001600160a01b0316905081565b6001600160a01b03166000908152610165602052604090206003015490565b610169546001600160a01b031681565b6101315460ff1661116a5760405162461bcd60e51b815260040161052f90613489565b610131805460ff19169055600061117f611d1f565b9050611189612bea565b61119282611326565b9050606061119f83610cce565b805190915015156000806111b285611d1b565b11905080806111be5750815b6111da5760405162461bcd60e51b815260040161052f906131e1565b610167546001600160a01b038616600090815261016560205260408120600301919091555b835181101561126e5761122884828151811061121757fe5b602002602001015160200151611d1b565b156112665761126684828151811061123c57fe5b6020026020010151600001518786848151811061125557fe5b602002602001015160200151611efd565b6001016111ff565b508080156112825750610164546101675410155b1561131157610164546101675461129e9163ffffffff61208d16565b6001600160a01b0380871660009081526101656020526040902060020191909155610169546112cf91168686611efd565b7f1d3eee4ca001cff39eec6ec7615aacf2f2bd61791273830728ba00ccbd6e1337856112fa86611d1b565b604051611308929190612e2e565b60405180910390a15b5050610131805460ff19166001179055505050565b61132e612bea565b6101645461133a610a3a565b101561134f57611348612072565b905061085c565b600061136c61016454611360610a3a565b9063ffffffff61208d16565b6001600160a01b0384166000908152610165602052604090206002810154919250908210156113a65761139d612072565b9250505061085c565b6113ae612bea565b60028201545b83811015610f06576000818152600484016020908152604091829020825191820190925260029091015481526113e990611d1b565b156114155760008181526004840160209081526040918290208251918201909252600290910154815291505b61141e82611d1b565b611427576114b8565b61142f612bea565b6114a2610166600084815260200190815260200160002060405180602001604052908160008201548152505061149685610167868154811061146d57fe5b60009182526020918290206040805193840190526002909102015481529063ffffffff61204f16565b9063ffffffff61202c16565b90506114b4868263ffffffff611de916565b9550505b6001016113b4565b60006114cb82611d1b565b116114e85760405162461bcd60e51b815260040161052f90612fc0565b60006114f2611d1f565b905061150061050d826108b6565b61150983611d1b565b11156115275760405162461bcd60e51b815260040161052f90612f1b565b61016a60009054906101000a90046001600160a01b03166001600160a01b031663544736e66040518163ffffffff1660e01b815260040160206040518083038186803b15801561157657600080fd5b505afa15801561158a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ae9190612cce565b6115ca5760405162461bcd60e51b815260040161052f906132f9565b61016a546040805163a83ef51560e01b815290516000926001600160a01b03169163a83ef515916004808301926020929190829003018186803b15801561161057600080fd5b505afa158015611624573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116489190612d93565b90506000611659600161058f610a3a565b9050600061016a60009054906101000a90046001600160a01b03166001600160a01b0316638c4e8c216040518163ffffffff1660e01b815260040160206040518083038186803b1580156116ac57600080fd5b505afa1580156116c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e49190612d93565b90506116ee612bea565b6116f66120cf565b82111561174a576117358461172961171c61170f6120cf565b869063ffffffff61208d16565b899063ffffffff6120d316565b9063ffffffff6120f516565b905061174a85611743610a3a565b8884612117565b6001600160a01b038516600090815261016560209081526040808320868452600481019092529091205460ff161561178d576117888685898a612117565b61183d565b611795612bbc565b8160040160006117a3610a3a565b815260208082019290925260409081016000908120825160608082018552825460ff16151582528451808701865260018085015482528388019182528651808901885260029586015481529387019390935285519182018652828252805182880190815290518287019081528c865260048a01909752949093209251835460ff191690151517835592515192820192909255915151910155505b61187882610166600061184e610a3a565b8152602080820192909252604090810160002081519283019091525481529063ffffffff611de916565b6101666000611885610a3a565b81526020808201929092526040908101600020925190925581519081019091526101635481526118cd9083906118c1908a63ffffffff6121cc16565b9063ffffffff611d7416565b516101635550505050505050565b6066546001600160a01b03166119035760405162461bcd60e51b815260040161052f906133ed565b61190b611d1f565b6066546001600160a01b039081169116146119385760405162461bcd60e51b815260040161052f90613076565b6066546065546040516001600160a01b0392831692909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360668054606580546001600160a01b03199081166001600160a01b03841617909155169055565b600054610100900460ff16806119b757506119b7612237565b806119c5575060005460ff16155b6119e15760405162461bcd60e51b815260040161052f9061325a565b600054610100900460ff16158015611a0c576000805460ff1961ff0019909116610100171660011790555b611a1461223d565b611a1c6122d0565b61016980546001600160a01b038088166001600160a01b03199283161790925561016a805487841690831617905561016d8054928616929091169190911790556101648290558015611a74576000805461ff00191690555b5050505050565b611a83612bea565b506000908152610166602090815260409182902082519182019092529054815290565b611aae612bea565b611abf82610404600161058f610a3a565b6020015192915050565b61016e546001600160a01b031681565b61016881815481106110fe57fe5b611aef611d1f565b6099546001600160a01b03908116911614611b1c5760405162461bcd60e51b815260040161052f90613330565b611b24612bea565b611b2c610919565b9050610167604051806020016040528084803603810190611b4d9190612d3e565b9052815460018181018455600093845260208420925151600290920290920155611b7990611360610a3a565b905060005b61016b54811015611c9457600061016b8281548110611b9957fe5b60009182526020808320909101546001600160a01b031680835261016c82526040928390208351928301909352915481529091507f1b97835ae43d7358e1d70d7e50005dc31b89e5e3bf48377750406fa4e6941124908290611bfa90611d1b565b85604051611c0a93929190612e47565b60405180910390a16001600160a01b038116600090815261016c60205260409020610167805485908110611c3a57fe5b600091825260208083206001600160a01b038616845260016002909302019190910190526040902090549055611c6e612072565b6001600160a01b03909116600090815261016c6020526040902090519055600101611b7e565b50611c9d612bea565b6040805160208101909152610163548152611cbe908463ffffffff6121cc16565b90506000611ccb82611d1b565b1215611ce95760405162461bcd60e51b815260040161052f9061312a565b611cf281612346565b6101666000611cff610a3a565b815260208101919091526040016000209051905561068b612072565b5190565b3390565b6000828201838110156109125760405162461bcd60e51b815260040161052f90612f89565b611d50612bea565b611d58612bea565b82518451611d6b9163ffffffff61208d16565b81529392505050565b611d7c612bea565b8180600001516001600160ff1b0310156040518060600160405280603381526020016135806033913990611dc35760405162461bcd60e51b815260040161052f9190612ee8565b50611dcc612bea565b83518551611ddf9163ffffffff61237416565b8152949350505050565b611df1612bea565b611df9612bea565b82518451611d6b9163ffffffff611d2316565b611e1581611d1b565b611e315760405162461bcd60e51b815260040161052f90612fc0565b6001600160a01b038216600090815261016560205260409020805460ff16611eb7576101688054600180820183556000929092527f8077777ae4769de06cbfd1c0b8b1f653b51ec156d91a9aca16a4102f19e03d9e0180546001600160a01b0319166001600160a01b038616179055815460ff1916178155611eb1610a3a565b60028201555b604080516020810190915260018201548152611ed9908363ffffffff611de916565b51600182015561016954611ef8906001600160a01b03168430856123ba565b505050565b611f06836124ec565b611f0e612bea565b611f188484612536565b90506000611f2685846125c3565b905060006060866001600160a01b031663a9059cbb60e01b8785604051602401611f51929190612e2e565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051611f8f9190612dda565b6000604051808303816000865af19150503d8060008114611fcc576040519150601f19603f3d011682016040523d82523d6000602084013e611fd1565b606091505b5091509150818015611ffb575080511580611ffb575080806020019051810190611ffb9190612cce565b6120175760405162461bcd60e51b815260040161052f90612f52565b61202387878587612641565b50505050505050565b612034612bea565b61203c612bea565b82518451611d6b9163ffffffff61269a16565b612057612bea565b61205f612bea565b82518451611d6b9163ffffffff6126a816565b61207a612bea565b5060408051602081019091526000815290565b600061091283836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506126b6565b4290565b6120db612bea565b6120e3612bea565b8351611d6b908463ffffffff6126e216565b6120fd612bea565b612105612bea565b8351611d6b908463ffffffff61271c16565b61211f612bbc565b6121298585610f95565b90506040518060600160405280600115158152602001612156858460200151611de990919063ffffffff16565b8152602001612172848460400151611de990919063ffffffff16565b90526001600160a01b039590951660009081526101656020908152604080832096835260049096018152908590208651815460ff191690151517815590860151516001820155939094015151600290930192909255505050565b6121d4612bea565b8180600001516001600160ff1b031015604051806060016040528060338152602001613580603391399061221b5760405162461bcd60e51b815260040161052f9190612ee8565b50612224612bea565b83518551611ddf9163ffffffff61275e16565b303b1590565b600054610100900460ff16806122565750612256612237565b80612264575060005460ff16155b6122805760405162461bcd60e51b815260040161052f9061325a565b600054610100900460ff161580156122ab576000805460ff1961ff0019909116610100171660011790555b6122b36127a4565b6122bb612825565b80156122cd576000805461ff00191690555b50565b600054610100900460ff16806122e957506122e9612237565b806122f7575060005460ff16155b6123135760405162461bcd60e51b815260040161052f9061325a565b600054610100900460ff1615801561233e576000805460ff1961ff0019909116610100171660011790555b6122bb6128ff565b61234e612bea565b612356612bea565b82516000131561236c57825160000381526108b0565b915182525090565b60008183038183128015906123895750838113155b8061239e575060008312801561239e57508381135b6109125760405162461bcd60e51b815260040161052f906133a9565b6123c3846124ec565b6123cb612bea565b6123d58584612536565b905060006123e386846125c3565b905060006060876001600160a01b03166323b872dd60e01b88888660405160240161241093929190612e0a565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161244e9190612dda565b6000604051808303816000865af19150503d806000811461248b576040519150601f19603f3d011682016040523d82523d6000602084013e612490565b606091505b50915091508180156124ba5750805115806124ba5750808060200190518101906124ba9190612cce565b6124d65760405162461bcd60e51b815260040161052f9061315f565b6124e288878587612641565b5050505050505050565b60006124f78261298f565b6001600160a01b038316600090815260cc602052604090205490915081146107fe576001600160a01b0391909116600090815260cc6020526040902055565b61253e612bea565b61091283846001600160a01b03166370a08231856040518263ffffffff1660e01b815260040161256e9190612df6565b60206040518083038186803b15801561258657600080fd5b505afa15801561259a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125be9190612d93565b612a7c565b6000806125cf8461298f565b90506012811061260d576126056125ed82601263ffffffff61208d16565b600a0a6125f985611d1b565b9063ffffffff6126e216565b9150506108b0565b61263961262160128363ffffffff61208d16565b600a0a61262d85611d1b565b9063ffffffff61271c16565b949350505050565b61267461265e6126518685612a7c565b839063ffffffff611de916565b6126688686612536565b9063ffffffff612b0e16565b60000b156126945760405162461bcd60e51b815260040161052f90613367565b50505050565b600061091283836012612b3f565b600061091283836012612b5e565b600081848411156126da5760405162461bcd60e51b815260040161052f9190612ee8565b505050900390565b6000826126f1575060006108b0565b828202828482816126fe57fe5b04146109125760405162461bcd60e51b815260040161052f906131a0565b600061091283836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612b7c565b60008282018183128015906127735750838112155b80612788575060008312801561278857508381125b6109125760405162461bcd60e51b815260040161052f90613035565b600054610100900460ff16806127bd57506127bd612237565b806127cb575060005460ff16155b6127e75760405162461bcd60e51b815260040161052f9061325a565b600054610100900460ff161580156122bb576000805460ff1961ff00199091166101001716600117905580156122cd576000805461ff001916905550565b600054610100900460ff168061283e575061283e612237565b8061284c575060005460ff16155b6128685760405162461bcd60e51b815260040161052f9061325a565b600054610100900460ff16158015612893576000805460ff1961ff0019909116610100171660011790555b600061289d611d1f565b606580546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35080156122cd576000805461ff001916905550565b600054610100900460ff16806129185750612918612237565b80612926575060005460ff16155b6129425760405162461bcd60e51b815260040161052f9061325a565b600054610100900460ff1615801561296d576000805460ff1961ff0019909116610100171660011790555b610131805460ff1916600117905580156122cd576000805461ff001916905550565b6001600160a01b038116600090815260cc6020526040812054806108b05760408051600481526024810182526020810180516001600160e01b031663313ce56760e01b17905290516000916060916001600160a01b038716916129f191612dda565b600060405180830381855afa9150503d8060008114612a2c576040519150601f19603f3d011682016040523d82523d6000602084013e612a31565b606091505b5091509150818015612a435750805115155b612a5f5760405162461bcd60e51b815260040161052f906130e9565b80806020019051810190612a739190612d93565b95945050505050565b612a84612bea565b6000612a8f8461298f565b905060128110612ad457604080516020810190915280612ac9612ab984601263ffffffff61208d16565b8690600a0a63ffffffff61271c16565b8152509150506108b0565b604080516020810190915280612b04612af460128563ffffffff61208d16565b8690600a0a63ffffffff6126e216565b9052949350505050565b805182516000911015612b23575060016108b0565b815183511015612b3657506000196108b0565b50600092915050565b60006126398361262d612b5185612bb3565b879063ffffffff6126e216565b6000612639612b6c83612bb3565b61262d868663ffffffff6126e216565b60008183612b9d5760405162461bcd60e51b815260040161052f9190612ee8565b506000838581612ba957fe5b0495945050505050565b60ff16600a0a90565b6040518060600160405280600015158152602001612bd8612bea565b8152602001612be5612bea565b905290565b6040518060200160405280600081525090565b604051806040016040528060006001600160a01b03168152602001612be5612bea565b600060208284031215612c31578081fd5b50919050565b600060208284031215612c48578081fd5b81356109128161356a565b60008060008060808587031215612c68578283fd5b8435612c738161356a565b93506020850135612c838161356a565b92506040850135612c938161356a565b9396929550929360600135925050565b60008060408385031215612cb5578182fd5b8235612cc08161356a565b946020939093013593505050565b600060208284031215612cdf578081fd5b81518015158114610912578182fd5b60008060408385031215612d00578182fd5b8235612d0b8161356a565b9150612d1a8460208501612c20565b90509250929050565b600060208284031215612d34578081fd5b6109128383612c20565b600060208284031215612d4f578081fd5b6040516020810181811067ffffffffffffffff82111715612d6e578283fd5b6040529135825250919050565b600060208284031215612d8c578081fd5b5035919050565b600060208284031215612da4578081fd5b5051919050565b60008060408385031215612dbd578182fd5b823591506020830135612dcf8161356a565b809150509250929050565b60008251612dec81846020870161353e565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b602080825282518282018190526000919060409081850190868401855b82811015612eb457815180516001600160a01b0316855286015151868501529284019290850190600101612e85565b5091979650505050505050565b901515815260200190565b9315158452915160208401526040830152606082015260800190565b6000602082528251806020840152612f0781604085016020870161353e565b601f01601f19169190910160400192915050565b6020808252601b908201527f5374616b65206d6f7265207468616e20616c6c2062616c616e63650000000000604082015260600190565b6020808252601d908201527f446563696d616c45524332303a207472616e73666572206661696c6564000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b602080825260149082015273496e70757420616d6f756e74206973207a65726f60601b604082015260600190565b60208082526027908201527f5065727046694f776e61626c65557067726164653a2073616d652061732063616040820152666e64696461746560c81b606082015260800190565b60208082526021908201527f5369676e6564536166654d6174683a206164646974696f6e206f766572666c6f6040820152607760f81b606082015260800190565b60208082526027908201527f5065727046694f776e61626c65557067726164653a206e6f7420746865206e656040820152663b9037bbb732b960c91b606082015260800190565b6020808252601290820152714e6f7420656e6f7567682062616c616e636560701b604082015260600190565b60208082526021908201527f446563696d616c45524332303a2067657420646563696d616c73206661696c656040820152601960fa1b606082015260800190565b6020808252818101527f556e7374616b65206d6f7265207468616e206c6f636b65642062616c616e6365604082015260600190565b60208082526021908201527f446563696d616c45524332303a207472616e7366657246726f6d206661696c656040820152601960fa1b606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b60208082526017908201527f6e6f2076657374656420726577617264206f7220666565000000000000000000604082015260600190565b60208082526022908201527f5065727046694f776e61626c65557067726164653a207a65726f206164647265604082015261737360f01b606082015260800190565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201526d195b881a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252600c908201526b10b332b2a737ba34b334b2b960a11b604082015260600190565b6020808252601190820152700616d6f756e742063616e2774206265203607c1b604082015260600190565b6020808252601b908201527f504552502072657761726420686173206e6f7420737461727465640000000000604082015260600190565b60208082526018908201527f6f6e6c792072657761726473446973747269627574696f6e0000000000000000604082015260600190565b60208082526022908201527f446563696d616c45524332303a2062616c616e636520696e636f6e73697374656040820152611b9d60f21b606082015260800190565b60208082526024908201527f5369676e6564536166654d6174683a207375627472616374696f6e206f766572604082015263666c6f7760e01b606082015260800190565b6020808252602f908201527f5065727046694f776e61626c65557067726164653a2063616e6469646174652060408201526e6973207a65726f206164647265737360881b606082015260800190565b6020808252602d908201527f5065727046694f776e61626c65557067726164653a2063616c6c65722069732060408201526c3737ba103a34329037bbb732b960991b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526026908201527f5065727046694f776e61626c65557067726164653a2073616d65206173206f726040820152651a59da5b985b60d21b606082015260800190565b8151151581526020808301515190820152604091820151519181019190915260600190565b9051815260200190565b90815260200190565b60005b83811015613559578181015183820152602001613541565b838111156126945750506000910152565b6001600160a01b03811681146122cd57600080fdfe4d69786564446563696d616c3a2075696e742076616c756520697320626967676572207468616e205f494e543235365f4d4158a264697066735822122096bcaf1b1eb6c71a6193ba1bf81284a70855e581f24769ebd15f9769d77e7ba664736f6c63430006090033\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Signer, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { SupplySchedule } from \"../SupplySchedule\";\n\nexport class SupplySchedule__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<SupplySchedule> {\n    return super.deploy(overrides || {}) as Promise<SupplySchedule>;\n  }\n  getDeployTransaction(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  attach(address: string): SupplySchedule {\n    return super.attach(address) as SupplySchedule;\n  }\n  connect(signer: Signer): SupplySchedule__factory {\n    return super.connect(signer) as SupplySchedule__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): SupplySchedule {\n    return new Contract(address, _abi, signerOrProvider) as SupplySchedule;\n  }\n}\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"candidate\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"decayRate\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"d\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"inflationRate\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"d\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IMinter\",\n        name: \"_minter\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_inflationRate\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_decayRate\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_mintDuration\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"isMintable\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"isStarted\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"mintDuration\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"mintableSupply\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"nextMintTime\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"recordMintEvent\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"d\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct Decimal.decimal\",\n        name: \"_decayRate\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"setDecayRate\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"setOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"startSchedule\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"supplyDecayEndTime\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"updateOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x608060405234801561001057600080fd5b506110d4806100206000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c80636fdb8191116100a2578063a83ef51511610071578063a83ef515146101c3578063a9c1f2f1146101cb578063b38e008e146101d3578063bc5920ba146101db578063cc5c095c146101e35761010b565b80636fdb8191146101a3578063715018a6146101ab5780638c4e8c21146101b35780638da5cb5b146101bb5761010b565b806346b45af7116100de57806346b45af71461015e5780634ec81af114610173578063544736e6146101865780636c8381f81461018e5761010b565b806313af4035146101105780631be2688a146101255780632166979d1461013857806331f9e35b14610140575b600080fd5b61012361011e366004610c78565b6101f8565b005b610123610133366004610cea565b6102da565b610123610315565b6101486103b5565b6040516101559190611080565b60405180910390f35b6101666103bb565b6040516101559190610d53565b610123610181366004610cb0565b6103e3565b6101666104b6565b6101966104be565b6040516101559190610d3f565b6101236104cd565b610123610554565b6101486105d3565b6101966105d9565b6101486105e8565b6101486105ee565b6101486105f4565b6101236105fa565b6101eb6106bd565b6040516101559190611076565b610200610848565b6065546001600160a01b039081169116146102365760405162461bcd60e51b815260040161022d90610fb7565b60405180910390fd5b6001600160a01b03811661025c5760405162461bcd60e51b815260040161022d90610ed8565b6065546001600160a01b038281169116141561028a5760405162461bcd60e51b815260040161022d90611030565b6066546001600160a01b03828116911614156102b85760405162461bcd60e51b815260040161022d90610e09565b606680546001600160a01b0319166001600160a01b0392909216919091179055565b6102e2610848565b6065546001600160a01b0390811691161461030f5760405162461bcd60e51b815260040161022d90610fb7565b5160cc55565b60d0546001600160a01b0316610329610848565b6001600160a01b03161461034f5760405162461bcd60e51b815260040161022d90610db1565b604080516020810190915260cc5481526103979061037b9061036f61084c565b9063ffffffff61087016565b604080516020810190915260cb5481529063ffffffff61089e16565b5160cb5560cd5460ce546103b09163ffffffff6108c116565b60ce55565b60cb5481565b600060ce54600014156103d0575060006103e0565b60ce546103db6108ed565b101590505b90565b600054610100900460ff16806103fc57506103fc6108f1565b8061040a575060005460ff16155b6104265760405162461bcd60e51b815260040161022d90610f1a565b600054610100900460ff16158015610451576000805460ff1961ff0019909116610100171660011790555b6104596108f7565b60d080546001600160a01b0319166001600160a01b03871617905560408051602080820183529086905260cb86905560cd849055815190810190915283905260cc83905580156104af576000805461ff00191690555b5050505050565b60ce54151590565b6066546001600160a01b031690565b6104d5610848565b6065546001600160a01b039081169116146105025760405162461bcd60e51b815260040161022d90610fb7565b600060cd54116105245760405162461bcd60e51b815260040161022d90611004565b60cd5461052f6108ed565b0160ce5561054f630788c2806105436108ed565b9063ffffffff6108c116565b60cf55565b61055c610848565b6065546001600160a01b039081169116146105895760405162461bcd60e51b815260040161022d90610fb7565b6065546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3606580546001600160a01b0319169055565b60ce5481565b6065546001600160a01b031690565b60cd5481565b60cc5481565b60cf5481565b6066546001600160a01b03166106225760405162461bcd60e51b815260040161022d90610f68565b61062a610848565b6066546001600160a01b039081169116146106575760405162461bcd60e51b815260040161022d90610e50565b6066546065546040516001600160a01b0392831692909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360668054606580546001600160a01b03199081166001600160a01b03841617909155169055565b6106c5610c65565b6106cd6103bb565b6106e0576106d961098a565b90506103e0565b60d0546040805163eb7c8c2560e01b815290516000926001600160a01b03169163eb7c8c25916004808301926020929190829003018186803b15801561072557600080fd5b505afa158015610739573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075d9190610c94565b6001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561079557600080fd5b505afa1580156107a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107cd9190610d27565b905060cf546107da6108ed565b106108175760408051602080820183526601affbbbb114a48252825190810190925282825261080f919063ffffffff61089e16565b9150506103e0565b604080516020808201835260cb5482528251908101909252828252610842919063ffffffff61089e16565b91505090565b3390565b610854610c65565b604051806020016040528061086960126109a5565b9052905090565b610878610c65565b610880610c65565b825184516108939163ffffffff6109ae16565b815290505b92915050565b6108a6610c65565b6108ae610c65565b825184516108939163ffffffff6109f016565b6000828201838110156108e65760405162461bcd60e51b815260040161022d90610dd2565b9392505050565b4290565b303b1590565b600054610100900460ff168061091057506109106108f1565b8061091e575060005460ff16155b61093a5760405162461bcd60e51b815260040161022d90610f1a565b600054610100900460ff16158015610965576000805460ff1961ff0019909116610100171660011790555b61096d6109fe565b610975610a7f565b8015610987576000805461ff00191690555b50565b610992610c65565b5060408051602081019091526000815290565b60ff16600a0a90565b60006108e683836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610b59565b60006108e683836012610b85565b600054610100900460ff1680610a175750610a176108f1565b80610a25575060005460ff16155b610a415760405162461bcd60e51b815260040161022d90610f1a565b600054610100900460ff16158015610975576000805460ff1961ff0019909116610100171660011790558015610987576000805461ff001916905550565b600054610100900460ff1680610a985750610a986108f1565b80610aa6575060005460ff16155b610ac25760405162461bcd60e51b815260040161022d90610f1a565b600054610100900460ff16158015610aed576000805460ff1961ff0019909116610100171660011790555b6000610af7610848565b606580546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015610987576000805461ff001916905550565b60008184841115610b7d5760405162461bcd60e51b815260040161022d9190610d5e565b505050900390565b6000610baf610b93836109a5565b610ba3868663ffffffff610bb716565b9063ffffffff610bf116565b949350505050565b600082610bc657506000610898565b82820282848281610bd357fe5b04146108e65760405162461bcd60e51b815260040161022d90610e97565b60006108e683836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525060008183610c4f5760405162461bcd60e51b815260040161022d9190610d5e565b506000838581610c5b57fe5b0495945050505050565b6040518060200160405280600081525090565b600060208284031215610c89578081fd5b81356108e681611089565b600060208284031215610ca5578081fd5b81516108e681611089565b60008060008060808587031215610cc5578283fd5b8435610cd081611089565b966020860135965060408601359560600135945092505050565b600060208284031215610cfb578081fd5b6040516020810181811067ffffffffffffffff82111715610d1a578283fd5b6040529135825250919050565b600060208284031215610d38578081fd5b5051919050565b6001600160a01b0391909116815260200190565b901515815260200190565b6000602080835283518082850152825b81811015610d8a57858101830151858201604001528201610d6e565b81811115610d9b5783604083870101525b50601f01601f1916929092016040019392505050565b60208082526007908201526610b6b4b73a32b960c91b604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526027908201527f5065727046694f776e61626c65557067726164653a2073616d652061732063616040820152666e64696461746560c81b606082015260800190565b60208082526027908201527f5065727046694f776e61626c65557067726164653a206e6f7420746865206e656040820152663b9037bbb732b960c91b606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b60208082526022908201527f5065727046694f776e61626c65557067726164653a207a65726f206164647265604082015261737360f01b606082015260800190565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201526d195b881a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602f908201527f5065727046694f776e61626c65557067726164653a2063616e6469646174652060408201526e6973207a65726f206164647265737360881b606082015260800190565b6020808252602d908201527f5065727046694f776e61626c65557067726164653a2063616c6c65722069732060408201526c3737ba103a34329037bbb732b960991b606082015260800190565b60208082526012908201527106d696e74206475726174696f6e20697320360741b604082015260600190565b60208082526026908201527f5065727046694f776e61626c65557067726164653a2073616d65206173206f726040820152651a59da5b985b60d21b606082015260800190565b9051815260200190565b90815260200190565b6001600160a01b038116811461098757600080fdfea264697066735822122069609c86f5089225e8c840104c448f9143f06b115c99ea49586bc6033cc07bbf64736f6c63430006090033\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Signer, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { TollPool } from \"../TollPool\";\n\nexport class TollPool__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<TollPool> {\n    return super.deploy(overrides || {}) as Promise<TollPool>;\n  }\n  getDeployTransaction(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  attach(address: string): TollPool {\n    return super.attach(address) as TollPool;\n  }\n  connect(signer: Signer): TollPool__factory {\n    return super.connect(signer) as TollPool__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): TollPool {\n    return new Contract(address, _abi, signerOrProvider) as TollPool;\n  }\n}\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"token\",\n        type: \"address\",\n      },\n    ],\n    name: \"FeeTokenAdded\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"feeTokenPoolDispatcher\",\n        type: \"address\",\n      },\n    ],\n    name: \"FeeTokenPoolDispatcherSet\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"token\",\n        type: \"address\",\n      },\n    ],\n    name: \"FeeTokenRemoved\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"TokenReceived\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"TokenTransferred\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"TOKEN_AMOUNT_LIMIT\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"_token\",\n        type: \"address\",\n      },\n    ],\n    name: \"addFeeToken\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"candidate\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"clearingHouse\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"clientBridge\",\n    outputs: [\n      {\n        internalType: \"contract ClientBridge\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"feeTokenPoolDispatcherL1\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"feeTokens\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getFeeTokenLength\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_clearingHouse\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract ClientBridge\",\n        name: \"_clientBridge\",\n        type: \"address\",\n      },\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"_token\",\n        type: \"address\",\n      },\n    ],\n    name: \"isFeeTokenExisted\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"_token\",\n        type: \"address\",\n      },\n    ],\n    name: \"removeFeeToken\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_feeTokenPoolDispatcherL1\",\n        type: \"address\",\n      },\n    ],\n    name: \"setFeeTokenPoolDispatcher\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"setOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"transferToFeeTokenPoolDispatcher\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"updateOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x608060405234801561001057600080fd5b50611a66806100206000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c8063715018a6116100a2578063aa2eded211610071578063aa2eded2146101cc578063bc5920ba146101df578063c50b0f52146101e7578063de114190146101fa578063ebef27be1461020f5761010b565b8063715018a61461018957806378098ccf146101915780638da5cb5b146101b15780638ef4403c146101b95761010b565b80633f3bfd61116100de5780633f3bfd6114610153578063485cc9551461015b57806367923c451461016e5780636c8381f8146101815761010b565b80630af96800146101105780630fcfc77c1461012e57806313af403514610138578063142982491461014b575b600080fd5b610118610217565b6040516101259190611503565b60405180910390f35b610136610226565b005b610136610146366004611443565b6102e7565b6101186103c0565b6101186103cf565b61013661016936600461145f565b6103de565b61013661017c366004611443565b6104d7565b610118610643565b610136610652565b6101a461019f366004611443565b6106d1565b6040516101259190611530565b610118610748565b6101186101c73660046114b7565b610757565b6101366101da366004611443565b61077e565b61013661083c565b6101366101f5366004611443565b6108ff565b6102026109d3565b60405161012591906119e2565b6102026109d8565b60ce546001600160a01b031681565b60cc546001600160a01b03166102575760405162461bcd60e51b815260040161024e90611660565b60405180910390fd5b60cd546102765760405162461bcd60e51b815260040161024e906117ac565b6000805b60cd548110156102c657600060cd828154811061029357fe5b6000918252602090912001546001600160a01b031690506102b3816109de565b806102bb5750825b92505060010161027a565b50806102e45760405162461bcd60e51b815260040161024e9061181f565b50565b6102ef610ad9565b6065546001600160a01b0390811691161461031c5760405162461bcd60e51b815260040161024e906118f5565b6001600160a01b0381166103425760405162461bcd60e51b815260040161024e9061171c565b6065546001600160a01b03828116911614156103705760405162461bcd60e51b815260040161024e9061199c565b6066546001600160a01b038281169116141561039e5760405162461bcd60e51b815260040161024e90611591565b606680546001600160a01b0319166001600160a01b0392909216919091179055565b60cf546001600160a01b031681565b60cc546001600160a01b031681565b600054610100900460ff16806103f757506103f7610add565b80610405575060005460ff16155b6104215760405162461bcd60e51b815260040161024e9061175e565b600054610100900460ff1615801561044c576000805460ff1961ff0019909116610100171660011790555b6001600160a01b0383161580159061046c57506001600160a01b03821615155b6104885760405162461bcd60e51b815260040161024e9061187f565b610490610ae3565b60ce80546001600160a01b038086166001600160a01b03199283161790925560cf80549285169290911691909117905580156104d2576000805461ff00191690555b505050565b6104df610ad9565b6065546001600160a01b0390811691161461050c5760405162461bcd60e51b815260040161024e906118f5565b600061051f60cd8363ffffffff610b7516565b90506001600160a01b0381166105475760405162461bcd60e51b815260040161024e90611942565b816001600160a01b0316816001600160a01b0316146105785760405162461bcd60e51b815260040161024e90611970565b6040516370a0823160e01b81526000906001600160a01b038416906370a08231906105a7903090600401611503565b60206040518083038186803b1580156105bf57600080fd5b505afa1580156105d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f791906114cf565b111561060857610606826109de565b505b7f1795838dc8ab2ffc5f431a1729a6afa0b587f982f7b2be0b9d7187a1ef547f91826040516106379190611503565b60405180910390a15050565b6066546001600160a01b031690565b61065a610ad9565b6065546001600160a01b039081169116146106875760405162461bcd60e51b815260040161024e906118f5565b6065546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3606580546001600160a01b0319169055565b60006107408260cd80548060200260200160405190810160405280929190818152602001828054801561072d57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161070f575b5050505050610c8390919063ffffffff16565b90505b919050565b6065546001600160a01b031690565b60cd818154811061076457fe5b6000918252602090912001546001600160a01b0316905081565b610786610ad9565b6065546001600160a01b039081169116146107b35760405162461bcd60e51b815260040161024e906118f5565b60cd546014116107d55760405162461bcd60e51b815260040161024e906116e5565b6107e660cd8263ffffffff610cd916565b6108025760405162461bcd60e51b815260040161024e9061187f565b7fdf1b1bd32a69711488d71554706bb130b1fc63a5fa1a2cd85e8440f84065ba23816040516108319190611503565b60405180910390a150565b6066546001600160a01b03166108645760405162461bcd60e51b815260040161024e906118a6565b61086c610ad9565b6066546001600160a01b039081169116146108995760405162461bcd60e51b815260040161024e906115d8565b6066546065546040516001600160a01b0392831692909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360668054606580546001600160a01b03199081166001600160a01b03841617909155169055565b610907610ad9565b6065546001600160a01b039081169116146109345760405162461bcd60e51b815260040161024e906118f5565b6001600160a01b03811661095a5760405162461bcd60e51b815260040161024e9061187f565b60cc546001600160a01b03828116911614156109885760405162461bcd60e51b815260040161024e906117db565b60cc80546001600160a01b0319166001600160a01b0383161790556040517fac0983b614c124d34daa3571cee16c9ce1cbeef6bb0ac9280d8db314f00d3fb690610831908390611503565b601481565b60cd5490565b60006109e8611430565b6109f28330610d92565b90506109fd81610e26565b15610ad05760cf54610a1a9084906001600160a01b031683610e2a565b60cf5460cc5460405163f14cedb560e01b81526001600160a01b039283169263f14cedb592610a5392889290911690869060040161153b565b600060405180830381600087803b158015610a6d57600080fd5b505af1158015610a81573d6000803e3d6000fd5b505050507fefed6b8d78a916dbd402a323824ae4454c9214b8f3d05fa85b3bb7f30dc25c0683610ab083610e26565b604051610abe929190611517565b60405180910390a16001915050610743565b50600092915050565b3390565b303b1590565b600054610100900460ff1680610afc5750610afc610add565b80610b0a575060005460ff16155b610b265760405162461bcd60e51b815260040161024e9061175e565b600054610100900460ff16158015610b51576000805460ff1961ff0019909116610100171660011790555b610b59610e50565b610b61610ed1565b80156102e4576000805461ff001916905550565b60006001600160a01b038216610b8d57506000610c7d565b825460005b81811015610c7657848181548110610ba657fe5b6000918252602090912001546001600160a01b0385811691161415610c6e57600182038114610c3757846001830381548110610bde57fe5b9060005260206000200160009054906101000a90046001600160a01b0316858281548110610c0857fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b84805480610c4157fe5b600082815260209020810160001990810180546001600160a01b031916905501905550829150610c7d9050565b600101610b92565b5060009150505b92915050565b6000805b8351811015610ccf57838181518110610c9c57fe5b60200260200101516001600160a01b0316836001600160a01b03161415610cc7576001915050610c7d565b600101610c87565b5060009392505050565b60006001600160a01b0382161580610d4f5750610d4f83805480602002602001604051908101604052809291908181526020018280548015610d4457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610d26575b505050505083610c83565b15610d5c57506000610c7d565b50815460018082018455600093845260209093200180546001600160a01b0319166001600160a01b039290921691909117905590565b610d9a611430565b610e1f83846001600160a01b03166370a08231856040518263ffffffff1660e01b8152600401610dca9190611503565b60206040518083038186803b158015610de257600080fd5b505afa158015610df6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1a91906114cf565b610fab565b9392505050565b5190565b610e338361103d565b610e458383610e4061108a565b6110a5565b6104d28383836110a5565b600054610100900460ff1680610e695750610e69610add565b80610e77575060005460ff16155b610e935760405162461bcd60e51b815260040161024e9061175e565b600054610100900460ff16158015610b61576000805460ff1961ff00199091166101001716600117905580156102e4576000805461ff001916905550565b600054610100900460ff1680610eea5750610eea610add565b80610ef8575060005460ff16155b610f145760405162461bcd60e51b815260040161024e9061175e565b600054610100900460ff16158015610f3f576000805460ff1961ff0019909116610100171660011790555b6000610f49610ad9565b606580546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35080156102e4576000805461ff001916905550565b610fb3611430565b6000610fbe846111a4565b90506012811061100357604080516020810190915280610ff8610fe884601263ffffffff61129116565b8690600a0a63ffffffff6112d316565b815250915050610c7d565b60408051602081019091528061103361102360128563ffffffff61129116565b8690600a0a63ffffffff61131516565b9052949350505050565b6000611048826111a4565b6001600160a01b0383166000908152609960205260409020549091508114611086576001600160a01b03821660009081526099602052604090208190555b5050565b611092611430565b5060408051602081019091526000815290565b600060606001600160a01b03851663095ea7b360e01b856110c6888761134f565b6040516024016110d7929190611517565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161111591906114e7565b6000604051808303816000865af19150503d8060008114611152576040519150601f19603f3d011682016040523d82523d6000602084013e611157565b606091505b50915091508180156111815750805115806111815750808060200190518101906111819190611497565b61119d5760405162461bcd60e51b815260040161024e90611848565b5050505050565b6001600160a01b038116600090815260996020526040812054806107405760408051600481526024810182526020810180516001600160e01b031663313ce56760e01b17905290516000916060916001600160a01b03871691611206916114e7565b600060405180830381855afa9150503d8060008114611241576040519150601f19603f3d011682016040523d82523d6000602084013e611246565b606091505b50915091508180156112585750805115155b6112745760405162461bcd60e51b815260040161024e9061161f565b8080602001905181019061128891906114cf565b95945050505050565b6000610e1f83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506113cd565b6000610e1f83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506113f9565b60008261132457506000610c7d565b8282028284828161133157fe5b0414610e1f5760405162461bcd60e51b815260040161024e906116a4565b60008061135b846111a4565b9050601281106113995761139161137982601263ffffffff61129116565b600a0a61138585610e26565b9063ffffffff61131516565b915050610c7d565b6113c56113ad60128363ffffffff61129116565b600a0a6113b985610e26565b9063ffffffff6112d316565b949350505050565b600081848411156113f15760405162461bcd60e51b815260040161024e919061155e565b505050900390565b6000818361141a5760405162461bcd60e51b815260040161024e919061155e565b50600083858161142657fe5b0495945050505050565b6040518060200160405280600081525090565b600060208284031215611454578081fd5b8135610e1f81611a1b565b60008060408385031215611471578081fd5b823561147c81611a1b565b9150602083013561148c81611a1b565b809150509250929050565b6000602082840312156114a8578081fd5b81518015158114610e1f578182fd5b6000602082840312156114c8578081fd5b5035919050565b6000602082840312156114e0578081fd5b5051919050565b600082516114f98184602087016119eb565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b6001600160a01b0393841681529190921660208201529051604082015260600190565b600060208252825180602084015261157d8160408501602087016119eb565b601f01601f19169190910160400192915050565b60208082526027908201527f5065727046694f776e61626c65557067726164653a2073616d652061732063616040820152666e64696461746560c81b606082015260800190565b60208082526027908201527f5065727046694f776e61626c65557067726164653a206e6f7420746865206e656040820152663b9037bbb732b960c91b606082015260800190565b60208082526021908201527f446563696d616c45524332303a2067657420646563696d616c73206661696c656040820152601960fa1b606082015260800190565b60208082526024908201527f666565546f6b656e506f6f6c446973706174636865724c31206e6f7420796574604082015263081cd95d60e21b606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b60208082526019908201527f65786365656420746f6b656e20616d6f756e74206c696d697400000000000000604082015260600190565b60208082526022908201527f5065727046694f776e61626c65557067726164653a207a65726f206164647265604082015261737360f01b606082015260800190565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201526d195b881a5b9a5d1a585b1a5e995960921b606082015260800190565b602080825260159082015274199959551bdad95b9cc81b9bdd081cd95d081e595d605a1b604082015260600190565b60208082526024908201527f696e707574206973207468652073616d65206173207468652063757272656e74604082015263206f6e6560e01b606082015260800190565b6020808252600f908201526e666565206973206e6f77207a65726f60881b604082015260600190565b6020808252601c908201527f446563696d616c45524332303a20617070726f7665206661696c656400000000604082015260600190565b6020808252600d908201526c1a5b9d985b1a59081a5b9c1d5d609a1b604082015260600190565b6020808252602f908201527f5065727046694f776e61626c65557067726164653a2063616e6469646174652060408201526e6973207a65726f206164647265737360881b606082015260800190565b6020808252602d908201527f5065727046694f776e61626c65557067726164653a2063616c6c65722069732060408201526c3737ba103a34329037bbb732b960991b606082015260800190565b6020808252601490820152731d1bdad95b88191bd95cc81b9bdd08195e1a5cdd60621b604082015260600190565b6020808252601290820152713932b6b7bb32903bb937b733903a37b5b2b760711b604082015260600190565b60208082526026908201527f5065727046694f776e61626c65557067726164653a2073616d65206173206f726040820152651a59da5b985b60d21b606082015260800190565b90815260200190565b60005b83811015611a065781810151838201526020016119ee565b83811115611a15576000848401525b50505050565b6001600160a01b03811681146102e457600080fdfea2646970667358221220d4eecd625db6f39fbc3036d89815038af25b7fd983d5da9c5a3ef17429a00b9e64736f6c63430006090033\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Signer, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\n\nimport type { PerpFiOwnableUpgrade } from \"../PerpFiOwnableUpgrade\";\n\nexport class PerpFiOwnableUpgrade__factory extends ContractFactory {\n  constructor(signer?: Signer) {\n    super(_abi, _bytecode, signer);\n  }\n\n  deploy(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<PerpFiOwnableUpgrade> {\n    return super.deploy(overrides || {}) as Promise<PerpFiOwnableUpgrade>;\n  }\n  getDeployTransaction(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  attach(address: string): PerpFiOwnableUpgrade {\n    return super.attach(address) as PerpFiOwnableUpgrade;\n  }\n  connect(signer: Signer): PerpFiOwnableUpgrade__factory {\n    return super.connect(signer) as PerpFiOwnableUpgrade__factory;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): PerpFiOwnableUpgrade {\n    return new Contract(\n      address,\n      _abi,\n      signerOrProvider\n    ) as PerpFiOwnableUpgrade;\n  }\n}\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"candidate\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"setOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"updateOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x608060405234801561001057600080fd5b506104fe806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806313af40351461005c5780636c8381f814610084578063715018a6146100a85780638da5cb5b146100b0578063bc5920ba146100b8575b600080fd5b6100826004803603602081101561007257600080fd5b50356001600160a01b03166100c0565b005b61008c610215565b604080516001600160a01b039092168252519081900360200190f35b610082610224565b61008c6102c2565b6100826102d1565b6100c86103d2565b6065546001600160a01b039081169116146101145760405162461bcd60e51b815260040180806020018281038252602d815260200180610476602d913960400191505060405180910390fd5b6001600160a01b0381166101595760405162461bcd60e51b81526004018080602001828103825260228152602001806104256022913960400191505060405180910390fd5b6065546001600160a01b03828116911614156101a65760405162461bcd60e51b81526004018080602001828103825260268152602001806104a36026913960400191505060405180910390fd5b6066546001600160a01b03828116911614156101f35760405162461bcd60e51b81526004018080602001828103825260278152602001806103d76027913960400191505060405180910390fd5b606680546001600160a01b0319166001600160a01b0392909216919091179055565b6066546001600160a01b031690565b61022c6103d2565b6065546001600160a01b039081169116146102785760405162461bcd60e51b815260040180806020018281038252602d815260200180610476602d913960400191505060405180910390fd5b6065546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3606580546001600160a01b0319169055565b6065546001600160a01b031690565b6066546001600160a01b03166103185760405162461bcd60e51b815260040180806020018281038252602f815260200180610447602f913960400191505060405180910390fd5b6103206103d2565b6066546001600160a01b0390811691161461036c5760405162461bcd60e51b81526004018080602001828103825260278152602001806103fe6027913960400191505060405180910390fd5b6066546065546040516001600160a01b0392831692909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360668054606580546001600160a01b03199081166001600160a01b03841617909155169055565b339056fe5065727046694f776e61626c65557067726164653a2073616d652061732063616e6469646174655065727046694f776e61626c65557067726164653a206e6f7420746865206e6577206f776e65725065727046694f776e61626c65557067726164653a207a65726f20616464726573735065727046694f776e61626c65557067726164653a2063616e646964617465206973207a65726f20616464726573735065727046694f776e61626c65557067726164653a2063616c6c6572206973206e6f7420746865206f776e65725065727046694f776e61626c65557067726164653a2073616d65206173206f726967696e616ca264697066735822122011672f3170acf5f1cf67266725f8cf57e397c4fc5007a5adca321a2397293e1d64736f6c63430006090033\";\n","import { getStage, Stage } from \"constant/stage\"\nimport { Connection } from \"container/connection\"\nimport { MetaData } from \"container/metadata\"\nimport { constants } from \"ethers\"\nimport { useMemo } from \"react\"\nimport {\n    ClearingHouseViewer__factory as ClearingHouseViewerFactory,\n    ERC20__factory as Erc20Factory,\n    Amm__factory as AmmFactory,\n    AmmReader__factory as AmmReaderFactory,\n    ClearingHouse__factory as ClearingHouseFactory,\n    InsuranceFund__factory as InsuranceFundFactory,\n    MetaTxGateway__factory as MetaTxGatewayFactory,\n} from \"types/contracts\"\nimport { createContainer } from \"unstated-next\"\nimport { Amm } from \"types/contracts/Amm\"\n\nexport const Contract = createContainer(useContract)\n\n// TODO: Should grab contract address info from metadata config.\n// production: https://metadata.perp.exchange/production.json\n// staging: https://metadata.perp.exchange/staging.json\nconst PRODUCTION_CONTRACTS = {}\nconst STAGING_CONTRACTS = {}\n\nexport const CONTRACT_ADDRESS = ((stage: Stage) =>\n    ({\n        [Stage.Production]: PRODUCTION_CONTRACTS,\n        [Stage.Staging]: STAGING_CONTRACTS,\n        [Stage.Development]: STAGING_CONTRACTS,\n    }[stage]))(getStage())\n\ninterface AddressMap {\n    ClearingHouseViewer: string\n    InsuranceFund: string\n    AmmReader: string\n    ClearingHouse: string\n    XDaiUsdc: string\n    MetaTxGateway: string\n}\n\n// NOTE: get contract address from metadata config endpoints\nfunction getAddressFromConfig(config: any): AddressMap {\n    const {\n        layers: {\n            layer2: {\n                contracts: { ClearingHouseViewer, ClearingHouse, InsuranceFund, AmmReader, MetaTxGateway },\n                externalContracts: { tether: XDaiTether, usdc: XDaiUsdc },\n            },\n        },\n    } = config\n    return {\n        ClearingHouseViewer: ClearingHouseViewer.address,\n        InsuranceFund: InsuranceFund.address,\n        AmmReader: AmmReader.address,\n        ClearingHouse: ClearingHouse.address,\n        XDaiUsdc: XDaiUsdc || XDaiTether, // remove this part once the perp metadata config only provide one quoteAssetSymbol address\n        MetaTxGateway: MetaTxGateway.address,\n    }\n}\n\nconst defaultContractInstance = {\n    isInitialized: false,\n    erc20: null,\n    clearingHouseViewer: null,\n    clearingHouse: null,\n    insuranceFund: null,\n    metaTxGateway: null,\n    amm: null,\n    addressMap: null,\n}\n\nfunction useContract() {\n    const { config } = MetaData.useContainer()\n    const { ethProvider, xDaiProvider } = Connection.useContainer()\n\n    return useMemo(() => {\n        if (!config) {\n            return defaultContractInstance\n        }\n        const contractAddress = getAddressFromConfig(config)\n        return {\n            isInitialized: true,\n            erc20: {\n                Eth: Erc20Factory.connect(constants.AddressZero, ethProvider),\n                XDai: Erc20Factory.connect(constants.AddressZero, xDaiProvider),\n            },\n            insuranceFund: InsuranceFundFactory.connect(contractAddress.InsuranceFund, xDaiProvider),\n            ammReader: AmmReaderFactory.connect(contractAddress.AmmReader, xDaiProvider),\n            amm: AmmFactory.connect(constants.AddressZero, xDaiProvider) as Amm,\n            addressMap: contractAddress,\n            clearingHouseViewer: ClearingHouseViewerFactory.connect(contractAddress.ClearingHouseViewer, xDaiProvider),\n            clearingHouse: ClearingHouseFactory.connect(contractAddress.ClearingHouse, xDaiProvider),\n            metaTxGateway: MetaTxGatewayFactory.connect(contractAddress.MetaTxGateway, xDaiProvider),\n        }\n    }, [config, ethProvider, xDaiProvider])\n}\n","import { ERC20_DECIMAL_DIGITS, USDC_PRECISION } from \"../constant/number\"\n\nimport Big from \"big.js\"\nimport { BigNumber } from \"ethers\"\nimport { formatUnits } from \"ethers/lib/utils\"\n\nexport interface Decimal {\n    d: BigNumber\n}\n\n// Big Number to...\nexport function bigNum2FixedStr(\n    val: BigNumber,\n    decimals: number = ERC20_DECIMAL_DIGITS,\n    digits: number = USDC_PRECISION,\n): string {\n    return Number.parseFloat(formatUnits(val, decimals)).toFixed(digits)\n}\n\nexport function bigNum2Big(val: BigNumber, decimals: number = ERC20_DECIMAL_DIGITS): Big {\n    return new Big(val.toString()).div(new Big(10).pow(decimals))\n}\n\nexport function bigNum2Decimal(val: BigNumber): Decimal {\n    return { d: val }\n}\n\n// Big to...\nexport function big2BigNum(val: Big, decimals: number = ERC20_DECIMAL_DIGITS): BigNumber {\n    return BigNumber.from(val.mul(new Big(10).pow(decimals)).toFixed(0))\n}\n\nexport function big2Decimal(val: Big): Decimal {\n    return {\n        d: big2BigNum(val, ERC20_DECIMAL_DIGITS),\n    }\n}\n\n// Decimal to...\nexport function decimal2Big(decimal: Decimal): Big {\n    return bigNum2Big(decimal.d)\n}\n\n// check regex 101 online, https://regex101.com/r/EeneAE/1\n// to understand this regex\nconst regexUSLocaleNumber = new RegExp(/\\d(?=(\\d{3})+\\.)/g)\n\n// format number like 1000 => 1,000\nexport function numberWithCommas(number: string = \"\") {\n    return number.replace(regexUSLocaleNumber, \"$&,\")\n}\n\nexport function numberWithCommasUsdc(number: Big = new Big(0)) {\n    return numberWithCommas(number.toFixed(USDC_PRECISION))\n}\n\n// TODO: check is valid number\n// TODO: check is positive\n// TODO: use in slippage if possible\n// ex: if the input is 1.005 and the digits is 2, the function will return 1.00\nexport function formatInput(input: string, digits: number): string {\n    const firstDotIndex = input.indexOf(\".\")\n    const formattedString = input\n        .split(\"\")\n        .filter((alphabet, index) => {\n            return alphabet !== \".\" || index === firstDotIndex\n        })\n        .join(\"\")\n    return formattedString.includes(\".\") && formattedString.length > formattedString.indexOf(\".\") + (digits + 1)\n        ? formattedString.substr(0, formattedString.indexOf(\".\") + (digits + 1))\n        : formattedString\n}\n","import { useEffect, useState } from \"react\"\n\nimport AmmReaderArtifact from \"@perp/contract/build/contracts/src/AmmReader.sol/AmmReader.json\"\nimport { Amm as AmmType } from \"constant/amm\"\nimport { Connection } from \"container/connection\"\nimport { Contract } from \"container/contract\"\nimport { Contract as MulticallContract } from \"ethers-multicall\"\nimport { bigNum2Big } from \"util/format\"\nimport { createContainer } from \"unstated-next\"\nimport { isAddress } from \"@ethersproject/address\"\n\nexport const Amm = createContainer(useAmm)\n\nfunction useAmm() {\n    const { insuranceFund, amm, addressMap } = Contract.useContainer()\n    const { xDaiMulticallProvider } = Connection.useContainer()\n    const [ammMap, setAmmMap] = useState<Record<string, AmmType> | null>(null)\n    const [selectedAmm, setSelectedAmm] = useState<AmmType | null>(null)\n    const [isLoading, setIsLoading] = useState<boolean>(true)\n\n    useEffect(() => {\n        async function getRawAmmList() {\n            if (\n                insuranceFund === null ||\n                xDaiMulticallProvider === null ||\n                amm === null ||\n                addressMap === null ||\n                !isAddress(addressMap.AmmReader)\n            ) {\n                return\n            }\n\n            /* amm address list */\n            const rawAmmAddressList = await insuranceFund.getAllAmms()\n            if (!rawAmmAddressList || rawAmmAddressList.length === 0) {\n                return\n            }\n\n            /* get data from amm contract */\n            const rawAmmContractList = rawAmmAddressList.map(\n                ammAddress => new MulticallContract(ammAddress, amm.interface.fragments),\n            )\n\n            /* merge this section into the ammReaderContract section in the below, once the ammReader contract provides \"open\" value */\n            if (rawAmmContractList.length === 0) {\n                return\n            }\n            const ammOpenList: boolean[] = await xDaiMulticallProvider!.all(rawAmmContractList.map(amm => amm!.open()))\n            const ammAddressList = rawAmmAddressList.filter((_, index) => ammOpenList[index])\n\n            if (ammAddressList.length === 0) {\n                return\n            }\n\n            /* merge this section into the ammReaderContract section in the below, once the ammReader contract provides \"tollRatio\" & \"spreadRatio\" value */\n            const ammContractList = ammAddressList.map(\n                ammAddress => new MulticallContract(ammAddress, amm.interface.fragments),\n            )\n            const ammRatioData = await xDaiMulticallProvider.all([\n                ...ammContractList.map(ammContract => ammContract.tollRatio()),\n                ...ammContractList.map(ammContract => ammContract.spreadRatio()),\n            ])\n            const tollRatioList = ammRatioData.splice(0, ammContractList.length)\n            const spreadRatioList = ammRatioData.splice(0, ammContractList.length)\n\n            /* ammReaderContract section */\n            const ammReaderContract = new MulticallContract(addressMap.AmmReader, AmmReaderArtifact.abi)\n            const ammRawData = await xDaiMulticallProvider.all(\n                ammAddressList.map(ammAddress => ammReaderContract.getAmmStates(ammAddress)),\n            )\n            const _ammMap: Record<string, AmmType> = {}\n            ammRawData.forEach((amm, index) => {\n                /* [quoteAssetReserve, baseAssetReserve, tradeLimitRatio, fundingPeriod, quoteAssetSymbol, baseAssetSymbol, priceFeedKey, priceFeed] */\n                _ammMap[amm[5]] = {\n                    address: ammAddressList[index],\n                    baseAssetSymbol: amm[5],\n                    quoteAssetSymbol: amm[4],\n                    tradeLimitRatio: bigNum2Big(amm[2]),\n                    tollRatio: bigNum2Big(tollRatioList[index]),\n                    spreadRatio: bigNum2Big(spreadRatioList[index]),\n                }\n            })\n\n            setAmmMap(_ammMap)\n            setIsLoading(false)\n        }\n\n        getRawAmmList()\n    }, [addressMap, amm, insuranceFund, xDaiMulticallProvider])\n\n    return {\n        isLoading,\n        ammMap,\n        selectedAmm,\n        setSelectedAmm,\n    }\n}\n","export default __webpack_public_path__ + \"static/media/check.29ea1d08.svg\";","import { Stage, STAGE } from \"../../constant\"\n\nconst CONFIG_VERSION = 1\n\nexport function setupSegment() {\n    start(STAGE)\n}\n\nexport function start(stage: Stage) {\n    const analytics = getAnalytics()\n    if (!analytics) return\n\n    const writeKey = process.env.REACT_APP_SEGMENT_API_KEY\n    analytics.load(writeKey)\n}\n\nexport function pageView() {\n    const analytics = getAnalytics()\n    if (!analytics) return\n    analytics.page({\n        v: CONFIG_VERSION,\n    })\n}\n\nexport function identify(accountAddress: string) {\n    const analytics = getAnalytics()\n    if (!analytics) return\n    analytics.identify(accountAddress)\n}\n\nexport function reset() {\n    const analytics = getAnalytics()\n    if (!analytics) return\n    analytics.reset()\n}\n\nexport function track(name: string, options: Record<string, any>) {\n    const analytics = getAnalytics()\n    if (!analytics) return\n    analytics.track(name, { ...options, v: CONFIG_VERSION })\n}\n\nexport function trackLink(linkElement: HTMLElement, name: string, options: Record<string, any>) {\n    const analytics = getAnalytics()\n    if (!analytics) return\n    analytics.trackLink(linkElement, name, { ...options, v: CONFIG_VERSION })\n}\n\nfunction getAnalytics() {\n    return (window as any).analytics\n}\n","import { Stage, getStage } from \"../../constant\"\n\nimport Bugsnag from \"@bugsnag/js\"\n\n/* NOTE: LogMetadataSet: { [tabName: string]: { [propName: string]: any }} */\nexport type LogMetadataSet = Record<string, Record<string, any>>\n\nclass Logger {\n    private static instance: Logger | null = null\n    private constructor() {}\n    static init() {\n        if (this.instance === null) {\n            this.instance = new Logger()\n        }\n        return this.instance\n    }\n    setUser(id: string) {\n        Bugsnag.setUser(id)\n    }\n    log(...args: any[]) {\n        if (getStage() === Stage.Development) {\n            console.log(...args)\n        }\n    }\n    info(...args: any[]) {\n        // NOTE: info will keep messages on all env\n        console.info(...args)\n    }\n    warn(...args: any[]) {\n        const msg = args.join(\" \")\n        // NOTE: only send in enabled env configured in Bugsnag.start's `enabledReleaseStages` prop.\n        Bugsnag.notify({\n            name: \"Warn\",\n            message: msg,\n        })\n        console.warn(...args)\n    }\n    error(err: Error, metadataSet?: LogMetadataSet) {\n        // NOTE: only send in enabled env configured in Bugsnag.start's `enabledReleaseStages` prop.\n        Bugsnag.notify(err, event => {\n            if (metadataSet) {\n                Object.entries(metadataSet).forEach(([section, metadata]) => {\n                    event.addMetadata(section, metadata)\n                })\n            }\n        })\n        console.error(err)\n    }\n}\n\nexport const logger = Logger.init()\n","import { useState, useCallback } from \"react\"\n\nexport function useLocalStorage(key: string, initialValue: string): [string, (val: string | Function) => void] {\n    const [storedValue, setStoredValue] = useState<string>(() => {\n        try {\n            const item = window.localStorage.getItem(key)\n            return item ? JSON.parse(item) : initialValue\n        } catch (error) {\n            console.error(\"localStorage get value error\", error)\n            return initialValue\n        }\n    })\n\n    const setValue = useCallback(\n        (value: string | Function) => {\n            try {\n                const valueToStore = value instanceof Function ? value(storedValue) : value\n                setStoredValue(valueToStore)\n                window.localStorage.setItem(key, JSON.stringify(valueToStore))\n            } catch (error) {\n                console.error(\"localStorage set value error\", error)\n            }\n        },\n        [key, storedValue],\n    )\n\n    return [storedValue, setValue]\n}\n","import { identify, reset } from \"../../lib/segment/base\"\nimport { useCallback, useEffect, useReducer, useRef, useState } from \"react\"\n\nimport { AbstractConnector } from \"@web3-react/abstract-connector\"\nimport { CHAIN_ID } from \"../../connector\"\nimport { STORAGE_KEY } from \"../../constant\"\nimport { SUPPORTED_WALLETS } from \"constant/wallet\"\nimport { createContainer } from \"unstated-next\"\nimport { logger } from \"lib/bugsnag/logger\"\nimport { useLocalStorage } from \"../../hook/useLocalStorage\"\nimport { useNotification } from \"../../hook/useNotification\"\nimport { usePrevious } from \"../../hook/usePrevious\"\nimport { useWeb3React } from \"@web3-react/core\"\n\nenum ACTIONS {\n    LOGIN_REQUEST = \"LOGIN_REQUEST\",\n    LOGIN_SUCCESS = \"LOGIN_SUCCESS\",\n    LOGIN_FAIL = \"LOGIN_FAIL\",\n    LOGOUT = \"LOGOUT\",\n}\n\ntype ActionType =\n    | { type: ACTIONS.LOGIN_REQUEST }\n    | { type: ACTIONS.LOGIN_SUCCESS; payload: { address: string } }\n    | { type: ACTIONS.LOGIN_FAIL }\n    | { type: ACTIONS.LOGOUT }\n\nconst initialState = {\n    isLoading: false,\n    address: \"\",\n}\n\nexport const User = createContainer(useUser)\n\nconst { CONNECTOR_ID } = STORAGE_KEY\n\nfunction usePostLogout(onLogout: Function) {\n    const { active } = useWeb3React()\n    const previousSession = usePrevious(active)\n\n    useEffect(() => {\n        if (previousSession && !active) {\n            // clear up state when users are logs out from wallet connect\n            onLogout()\n        }\n    }, [previousSession, active, onLogout])\n}\n\nfunction useUser() {\n    const [state, dispatch] = useReducer(reducer, initialState)\n    const { active, account, activate, deactivate, chainId } = useWeb3React()\n    const [, setConnectorId] = useLocalStorage(CONNECTOR_ID.name, CONNECTOR_ID.defaultValue)\n    const { notifyError, closeNotify } = useNotification()\n    const wrongNetworkRef = useRef()\n\n    // NOTE: this will be called after user logout out\n    usePostLogout(() => {\n        setConnectorId(\"\")\n        dispatch({ type: ACTIONS.LOGOUT })\n        reset()\n    })\n\n    const login = useCallback(\n        (instance: AbstractConnector, connectorId: string, onActivate?: Function) => {\n            dispatch({ type: ACTIONS.LOGIN_REQUEST })\n            setConnectorId(connectorId)\n            activate(instance, () => {}, true)\n                .then(() => {\n                    if (onActivate) {\n                        onActivate()\n                    }\n                    logger.info(\"connect success\")\n                })\n                .catch(err => {\n                    setConnectorId(\"\")\n                    dispatch({ type: ACTIONS.LOGIN_FAIL })\n                    logger.error(err)\n                })\n        },\n        [dispatch, setConnectorId, activate],\n    )\n\n    const logout = useCallback(() => {\n        deactivate()\n    }, [deactivate])\n\n    useEffect(() => {\n        if (active && account && chainId) {\n            dispatch({ type: ACTIONS.LOGIN_SUCCESS, payload: { address: account } })\n            identify(account)\n            const isWrongNetwork = chainId !== CHAIN_ID.XDai\n            if (isWrongNetwork) {\n                // @ts-ignore\n                wrongNetworkRef.current = notifyError({\n                    title: \"Wrong network\",\n                    description: `Please switch network to xDai.`,\n                    isClosable: true,\n                    duration: null,\n                })\n            } else {\n                if (wrongNetworkRef.current) {\n                    closeNotify(wrongNetworkRef.current)\n                }\n            }\n        }\n    }, [account, active, chainId, notifyError, closeNotify])\n\n    // auto login\n    const [isTried, setIsTried] = useState(false)\n    const [connectorId] = useLocalStorage(CONNECTOR_ID.name, CONNECTOR_ID.defaultValue)\n    useEffect(() => {\n        const connector = SUPPORTED_WALLETS.find(walletInfo => walletInfo.id === connectorId)?.connector\n        if (!isTried && connector) {\n            logger.info(\"auto login...\")\n            login(connector, connectorId)\n            setIsTried(true)\n        }\n    }, [connectorId, isTried, login])\n\n    return {\n        state,\n        actions: {\n            login,\n            logout,\n        },\n    }\n}\n\nfunction reducer(state: typeof initialState, action: ActionType) {\n    switch (action.type) {\n        case ACTIONS.LOGIN_REQUEST: {\n            return { ...state, isLoading: true }\n        }\n        case ACTIONS.LOGIN_SUCCESS: {\n            const { address } = action.payload\n            return { ...state, isLoading: false, address }\n        }\n        case ACTIONS.LOGIN_FAIL: {\n            return {\n                ...state,\n                isLoading: false,\n            }\n        }\n        case ACTIONS.LOGOUT: {\n            return {\n                ...state,\n                address: \"\",\n            }\n        }\n        default:\n            throw new Error()\n    }\n}\n","import { useCallback } from \"react\"\nimport { useToast } from \"@chakra-ui/react\"\n\nconst defaultConfig = {\n    position: \"bottom\",\n    duration: 3000,\n    isClosable: true,\n}\n\nexport function useNotification() {\n    const toast = useToast()\n\n    const notifySuccess = useCallback(\n        payload =>\n            toast({\n                ...defaultConfig,\n                ...payload,\n                status: \"success\",\n            }),\n        [toast],\n    )\n\n    const notifyInfo = useCallback(\n        payload =>\n            toast({\n                ...defaultConfig,\n                ...payload,\n                status: \"info\",\n            }),\n        [toast],\n    )\n\n    const notifyError = useCallback(\n        payload =>\n            toast({\n                ...defaultConfig,\n                ...payload,\n                status: \"error\",\n            }),\n        [toast],\n    )\n\n    const closeNotify = useCallback(\n        toastRef => {\n            toast.close(toastRef)\n        },\n        [toast],\n    )\n\n    const notify = useCallback(\n        payload => {\n            toast({\n                ...defaultConfig,\n                ...payload,\n            })\n        },\n        [toast],\n    )\n\n    return {\n        notifySuccess,\n        notifyInfo,\n        notifyError,\n        closeNotify,\n        notify,\n    }\n}\n","import { useRef, useEffect } from \"react\"\n\nexport function usePrevious(value: any) {\n    // The ref object is a generic container whose current property is mutable ...\n    // ... and can hold any value, similar to an instance property on a class\n    const ref = useRef()\n\n    // Store current value in ref\n    useEffect(() => {\n        ref.current = value\n    }, [value]) // Only re-run if value changes\n\n    // Return previous value (happens before update in useEffect above)\n    return ref.current\n}\n","import { useCallback } from \"react\"\nimport { createContainer } from \"unstated-next\"\nimport { useImmerReducer } from \"use-immer\"\n\nenum ACTIONS {\n    TOGGLE_WALLET_MODAL = \"TOGGLE_WALLET_MODAL\",\n}\n\ntype ActionType = {\n    type: ACTIONS\n    payload?: any\n}\n\nconst initialState = {\n    modal: {\n        isWalletOpen: false,\n    },\n}\n\nfunction reducer(state: typeof initialState, action: ActionType) {\n    switch (action.type) {\n        case ACTIONS.TOGGLE_WALLET_MODAL: {\n            return {\n                ...state,\n                modal: {\n                    isWalletOpen: !state.modal.isWalletOpen,\n                },\n            }\n        }\n        default:\n            throw new Error()\n    }\n}\n\nfunction useGlobal() {\n    const [state, dispatch] = useImmerReducer(reducer, initialState)\n\n    const toggleWalletModal = useCallback(() => {\n        dispatch({ type: ACTIONS.TOGGLE_WALLET_MODAL })\n    }, [dispatch])\n\n    return {\n        state,\n        actions: {\n            toggleWalletModal,\n        },\n    }\n}\n\nexport const Global = createContainer(useGlobal)\n","import React, { useCallback } from \"react\"\nimport { Button, Flex, Image, Spacer } from \"@chakra-ui/react\"\nimport { AbstractConnector } from \"@web3-react/abstract-connector\"\nimport CheckSvg from \"../../asset/check.svg\"\nimport { User } from \"container/user\"\nimport { Global } from \"container/global\"\nimport { useWeb3React } from \"@web3-react/core\"\n\nfunction WalletButton({\n    src,\n    name,\n    connector,\n    id,\n}: {\n    src: string\n    name: string\n    connector: AbstractConnector\n    id: string\n}) {\n    const {\n        actions: { login },\n    } = User.useContainer()\n    const { connector: activeConnector } = useWeb3React()\n\n    const {\n        actions: { toggleWalletModal },\n    } = Global.useContainer()\n\n    const isActiveConnector = activeConnector === connector\n\n    const handleOnClick = useCallback(() => {\n        if (!isActiveConnector) {\n            login(connector, id)\n        }\n        toggleWalletModal()\n    }, [connector, login, toggleWalletModal, id, isActiveConnector])\n\n    return (\n        <Button\n            fontWeight=\"400\"\n            fontSize=\"md\"\n            justifyContent=\"left\"\n            bg=\"gray.900\"\n            onClick={handleOnClick}\n            _hover={{ bg: \"rgba(255, 255, 255, 0.16)\" }}\n        >\n            <Flex width=\"100%\" alignItems=\"center\">\n                <Image mr=\"10px\" src={src} boxSize={6} />\n                {name}\n                <Spacer />\n                {isActiveConnector && <Image src={CheckSvg} />}\n            </Flex>\n        </Button>\n    )\n}\n\nexport default WalletButton\n","import React, { useCallback } from \"react\"\nimport { Button } from \"@chakra-ui/react\"\nimport { User } from \"container/user\"\nimport { Global } from \"container/global\"\n\nfunction DisconnectButton() {\n    const {\n        actions: { logout },\n    } = User.useContainer()\n\n    const {\n        actions: { toggleWalletModal },\n    } = Global.useContainer()\n\n    const handleOnClick = useCallback(() => {\n        logout()\n        toggleWalletModal()\n    }, [logout, toggleWalletModal])\n\n    return (\n        <Button\n            fontWeight=\"400\"\n            fontSize=\"md\"\n            justifyContent=\"left\"\n            bg=\"gray.900\"\n            color=\"red.500\"\n            onClick={handleOnClick}\n            _hover={{ bg: \"rgba(255, 255, 255, 0.16)\" }}\n        >\n            Disconnect\n        </Button>\n    )\n}\n\nexport default DisconnectButton\n","import React from \"react\"\nimport { Modal, ModalBody, ModalCloseButton, ModalContent, ModalHeader, ModalOverlay, Stack } from \"@chakra-ui/react\"\nimport WalletButton from \"./WalletButton\"\nimport DisconnectButton from \"./DisconnectButton\"\nimport { WalletInfo, SUPPORTED_WALLETS } from \"../../constant/wallet\"\nimport { User } from \"container/user\"\nimport { Global } from \"container/global\"\n\nfunction WalletListModal() {\n    const {\n        state: { address },\n    } = User.useContainer()\n\n    const {\n        state: {\n            modal: { isWalletOpen },\n        },\n        actions: { toggleWalletModal },\n    } = Global.useContainer()\n\n    return (\n        <Modal isCentered={true} size=\"xs\" isOpen={isWalletOpen} onClose={toggleWalletModal}>\n            <ModalOverlay />\n            <ModalContent bg=\"gray.800\" color=\"gray.200\">\n                <ModalHeader fontWeight=\"400\" fontSize=\"sm\">\n                    Connect Wallet\n                </ModalHeader>\n                <ModalCloseButton />\n                <ModalBody pb=\"1.5rem\">\n                    <Stack spacing={2}>\n                        {SUPPORTED_WALLETS.map((value: WalletInfo) => {\n                            return (\n                                <WalletButton\n                                    key={value.id}\n                                    id={value.id}\n                                    name={value.name}\n                                    connector={value.connector}\n                                    src={require(`../../asset/wallet/${value.iconName}`).default}\n                                />\n                            )\n                        })}\n                        {address && <DisconnectButton />}\n                    </Stack>\n                </ModalBody>\n            </ModalContent>\n        </Modal>\n    )\n}\n\nexport default WalletListModal\n","import { Icon } from \"@chakra-ui/react\"\nimport React from \"react\"\n\nconst WalletFill = (props: any) => {\n    return (\n        <Icon width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n            <path\n                d=\"M18 3C19.103 3 20 3.897 20 5V7C21.103 7 22 7.897 22 9V19C22 20.103 21.103 21 20 21H5C3.794 21 2 20.201 2 18V6C2 4.346 3.346 3 5 3H18ZM18 5H5C4.448 5 4 5.449 4 6C4 6.551 4.448 7 5 7H18V5ZM14 17H16V15H18V13H16V11H14V13H12V15H14V17Z\"\n                fill=\"currentColor\"\n            />\n        </Icon>\n    )\n}\n\nexport default WalletFill\n","export function getShortenAccount(address: string) {\n    return address.substr(0, 6) + \"...\" + address.substr(-4)\n}\n","import React from \"react\"\nimport { Button } from \"@chakra-ui/react\"\nimport WalletFill from \"../Icon/WalletFill\"\nimport { Global } from \"container/global\"\nimport { getShortenAccount } from \"util/getShortenAddress\"\nimport { User } from \"container/user\"\n\nfunction ConnectBtn() {\n    const {\n        state: { address },\n    } = User.useContainer()\n\n    const {\n        actions: { toggleWalletModal },\n    } = Global.useContainer()\n\n    return (\n        <Button\n            size=\"sm\"\n            onClick={toggleWalletModal}\n            colorScheme=\"gray\"\n            variant=\"outline\"\n            leftIcon={<WalletFill boxSize={4} />}\n        >\n            {address ? getShortenAccount(address) : \"Connect\"}\n        </Button>\n    )\n}\n\nexport default ConnectBtn\n","import { Flex, Heading, Spacer } from \"@chakra-ui/react\"\n\nimport ConnectBtn from \"./ConnectBtn\"\nimport { Link } from \"react-router-dom\"\nimport React from \"react\"\n\nfunction Header() {\n    return (\n        <Flex h=\"64px\" alignItems=\"center\">\n            <Link to=\"/\">\n                <Heading size=\"md\">Vista Protocol</Heading>\n            </Link>\n            <Spacer />\n            <ConnectBtn />\n        </Flex>\n    )\n}\n\nexport default Header\n","import { Link, LinkProps } from \"@chakra-ui/react\"\n\nimport { ReactNode } from \"react\"\n\ninterface Props extends LinkProps {\n    href: string\n    children: ReactNode\n}\nexport function ExternalLink({ href, children, ...props }: Props) {\n    return (\n        <Link href={href} target=\"_blank\" rel=\"noreferrer noopener\" {...props}>\n            {children}\n        </Link>\n    )\n}\n","import { Button, Divider, HStack, Heading, Stack, Text } from \"@chakra-ui/react\"\n\nimport { ExternalLink } from \"component/ExternalLink\"\nimport { ExternalLinkIcon } from \"@chakra-ui/icons\"\n\nfunction GetStarted() {\n    return (\n        <Stack spacing={10}>\n            <Stack spacing={5}>\n                <Heading size=\"md\">About</Heading>\n                <Text>\n                    This is a lite version of Vista Protocol UI with essential features. Note that you need to manually switch to{\" \"}\n                    <strong>xDai network</strong> to trade.\n                </Text>\n                <HStack>\n                    <ExternalLink color=\"blue.500\" href=\"https://github.com/perpetual-protocol/perp-lite\" isExternal>\n                        Github <ExternalLinkIcon mx=\"2px\" />\n                    </ExternalLink>{\" \"}\n                    <ExternalLink color=\"blue.500\" href=\"https://discord.com/invite/mYKKRTn\" isExternal>\n                        Discord <ExternalLinkIcon mx=\"2px\" />\n                    </ExternalLink>\n                </HStack>\n            </Stack>\n            <Divider />\n            <Stack spacing={5}>\n                <Heading size=\"md\">Switch Network</Heading>\n                <Text>\n                    You're currently on <strong>Ethereum Mainnet</strong>{\" \"}\n                </Text>\n                <Button isFullWidth isDisabled colorScheme=\"blue\">\n                    Add / Switch to xDai Network\n                </Button>\n                <Text fontSize=\"sm\" color=\"gray.500\">\n                    This feature is not available for now.\n                </Text>\n            </Stack>\n        </Stack>\n    )\n}\n\nexport default GetStarted\n","import { Box, Text } from \"@chakra-ui/react\"\n\nfunction NoPosition() {\n    return (\n        <Box>\n            <Text size=\"md\" color=\"gray.400\">\n                No open positions.\n            </Text>\n        </Box>\n    )\n}\n\nexport default NoPosition\n","import { Box, Text } from \"@chakra-ui/react\"\n\nfunction NoWallet() {\n    return (\n        <Box>\n            <Text size=\"md\" color=\"gray.400\">\n                No connected wallet.\n            </Text>\n        </Box>\n    )\n}\n\nexport default NoWallet\n","import { Stack, Text } from \"@chakra-ui/react\"\nimport React from \"react\"\n\ninterface Props {\n    label: string\n    value: string\n}\n\nfunction DataUnit(props: Props) {\n    return (\n        <Stack spacing={0} dir=\"column\">\n            <Text fontSize=\"xs\" color=\"gray.500\" textTransform=\"uppercase\">\n                {props.label}\n            </Text>\n            <Text fontSize=\"md\" fontWeight=\"bold\">\n                {props.value}\n            </Text>\n        </Stack>\n    )\n}\n\nexport default DataUnit\n","import { useCallback } from \"react\"\nimport { createContainer } from \"unstated-next\"\nimport { useImmerReducer } from \"use-immer\"\n\nenum ACTIONS {\n    OPEN_CLOSE_POSITION_MODAL = \"OPEN_CLOSE_POSITION_MODAL\",\n    CLOSE_CLOSE_POSITION_MODAL = \"CLOSE_CLOSE_POSITION_MODAL\",\n    OPEN_ADJUST_MARGIN_MODAL = \"OPEN_ADJUST_MARGIN_MODAL\",\n    CLOSE_ADJUST_MARGIN_MODAL = \"CLOSE_ADJUST_MARGIN_MODAL\",\n}\n\ntype ActionType = {\n    type: ACTIONS\n    payload?: any\n}\n\nconst initialState = {\n    address: null,\n    baseAssetSymbol: null,\n    quoteAssetSymbol: null,\n    isClosePositionModalOpen: false,\n    isAdjustMarginModalOpen: false,\n}\n\nexport const Position = createContainer(usePosition)\n\nfunction usePosition() {\n    const [state, dispatch] = useImmerReducer(reducer, initialState)\n\n    const openClosePositionModal = useCallback(\n        (address: string, baseAssetSymbol: string, quoteAssetSymbol: string) => {\n            dispatch({\n                type: ACTIONS.OPEN_CLOSE_POSITION_MODAL,\n                payload: {\n                    address,\n                    baseAssetSymbol,\n                    quoteAssetSymbol,\n                },\n            })\n        },\n        [dispatch],\n    )\n\n    const closeClosePositionModal = useCallback(() => {\n        dispatch({ type: ACTIONS.CLOSE_CLOSE_POSITION_MODAL })\n    }, [dispatch])\n\n    const openAdjustMarginModal = useCallback(\n        (address: string, baseAssetSymbol: string, quoteAssetSymbol: string) => {\n            dispatch({\n                type: ACTIONS.OPEN_ADJUST_MARGIN_MODAL,\n                payload: {\n                    address,\n                    baseAssetSymbol,\n                    quoteAssetSymbol,\n                },\n            })\n        },\n        [dispatch],\n    )\n\n    const closeAdjustMarginModal = useCallback(() => {\n        dispatch({ type: ACTIONS.CLOSE_ADJUST_MARGIN_MODAL })\n    }, [dispatch])\n\n    return {\n        state,\n        openClosePositionModal,\n        closeClosePositionModal,\n        openAdjustMarginModal,\n        closeAdjustMarginModal,\n    }\n}\n\nfunction reducer(state: typeof initialState, action: ActionType) {\n    switch (action.type) {\n        case ACTIONS.OPEN_CLOSE_POSITION_MODAL: {\n            return {\n                ...state,\n                address: action.payload.address,\n                baseAssetSymbol: action.payload.baseAssetSymbol,\n                quoteAssetSymbol: action.payload.quoteAssetSymbol,\n                isClosePositionModalOpen: true,\n            }\n        }\n        case ACTIONS.CLOSE_CLOSE_POSITION_MODAL: {\n            return {\n                ...state,\n                address: null,\n                baseAssetSymbol: null,\n                quoteAssetSymbol: null,\n                isClosePositionModalOpen: false,\n            }\n        }\n        case ACTIONS.OPEN_ADJUST_MARGIN_MODAL: {\n            return {\n                ...state,\n                address: action.payload.address,\n                baseAssetSymbol: action.payload.baseAssetSymbol,\n                quoteAssetSymbol: action.payload.quoteAssetSymbol,\n                isAdjustMarginModalOpen: true,\n            }\n        }\n        case ACTIONS.CLOSE_ADJUST_MARGIN_MODAL: {\n            return {\n                ...state,\n                address: null,\n                baseAssetSymbol: null,\n                quoteAssetSymbol: null,\n                isAdjustMarginModalOpen: false,\n            }\n        }\n        default:\n            throw new Error()\n    }\n}\n","import { Badge, Box, Button, HStack, Heading, SimpleGrid, Spacer, Stack } from \"@chakra-ui/react\"\nimport { useCallback, useMemo } from \"react\"\n\nimport Big from \"big.js\"\nimport DataUnit from \"./DataUnit\"\nimport { Position } from \"container/position\"\nimport { PositionInfo } from \"constant/position\"\nimport { numberWithCommasUsdc } from \"util/format\"\n\ninterface PositionUnitProps {\n    data: PositionInfo\n}\n\nfunction PositionUnit({ data }: PositionUnitProps) {\n    const { openClosePositionModal, openAdjustMarginModal } = Position.useContainer()\n    const { address, baseAssetSymbol, quoteAssetSymbol, unrealizedPnl, size, margin, marginRatio, openNotional } = data\n    const isLongSide = size.gte(0)\n\n    const handleOnClosePositionClick = useCallback(() => {\n        openClosePositionModal(address, baseAssetSymbol, quoteAssetSymbol)\n    }, [address, baseAssetSymbol, quoteAssetSymbol, openClosePositionModal])\n\n    const handleOnAdjustMarginClick = useCallback(() => {\n        openAdjustMarginModal(address, baseAssetSymbol, quoteAssetSymbol)\n    }, [address, baseAssetSymbol, quoteAssetSymbol, openAdjustMarginModal])\n\n    /* prepare data for UI */\n    const pnlStr = useMemo(() => unrealizedPnl.toFixed(2), [unrealizedPnl])\n    const absSizeStr = useMemo(() => size.abs().toFixed(4), [size])\n    const leverageStr = useMemo(() => `${new Big(1).div(marginRatio).toFixed(2)}x`, [marginRatio])\n    const entryPriceStr = useMemo(() => numberWithCommasUsdc(openNotional.div(size).abs()), [openNotional, size])\n    const marginStr = useMemo(() => numberWithCommasUsdc(margin), [margin])\n    const marginRatioStr = useMemo(() => `${marginRatio.mul(100).toFixed(1)}%`, [marginRatio])\n\n    return useMemo(\n        () => (\n            <Box>\n                <Stack direction=\"column\" spacing={4} borderRadius=\"2xl\" borderWidth=\"1px\" borderColor=\"gray.200\" p={6}>\n                    <HStack>\n                        <Heading size=\"md\">{baseAssetSymbol}</Heading>\n                        <Badge colorScheme={isLongSide ? \"green\" : \"red\"}>{isLongSide ? \"Long\" : \"Short\"}</Badge>\n                    </HStack>\n                    <SimpleGrid minChildWidth={[\"40%\", \"30%\", \"20%\"]} spacing={4}>\n                        <DataUnit label=\"PnL\" value={pnlStr} />\n                        <DataUnit label=\"Position Size\" value={absSizeStr} />\n                        <DataUnit label=\"Leverage\" value={leverageStr} />\n                        <DataUnit label=\"Entry Price\" value={entryPriceStr} />\n                        {/* <DataUnit label=\"Est.Liq.Price\" value=\"943\" /> */}\n                        <DataUnit label=\"Margin\" value={marginStr} />\n                        <DataUnit label=\"Margin Ratio\" value={marginRatioStr} />\n                    </SimpleGrid>\n                    <Box display={[\"block\", \"flex\"]}>\n                        <Button onClick={handleOnClosePositionClick} mb={[4, 0]} colorScheme=\"blue\">\n                            Close Position\n                        </Button>\n                        <Spacer />\n                        <Button onClick={handleOnAdjustMarginClick}>Margin Management</Button>\n                    </Box>\n                </Stack>\n            </Box>\n        ),\n        [\n            absSizeStr,\n            baseAssetSymbol,\n            entryPriceStr,\n            handleOnAdjustMarginClick,\n            handleOnClosePositionClick,\n            isLongSide,\n            leverageStr,\n            marginRatioStr,\n            marginStr,\n            pnlStr,\n        ],\n    )\n}\n\nexport default PositionUnit\n","import { ContractCall, Contract as MulticallContract } from \"ethers-multicall\"\nimport { PnlCalcOption, PositionInfo } from \"constant/position\"\nimport { useCallback, useEffect, useState } from \"react\"\n\nimport { Amm } from \"container/amm\"\nimport ClearingHouseViewerArtifact from \"@perp/contract/build/contracts/src/ClearingHouseViewer.sol/ClearingHouseViewer.json\"\nimport { Connection } from \"container/connection\"\nimport { Contract } from \"container/contract\"\nimport NoPosition from \"./NoPosition\"\nimport NoWallet from \"./NoWallet\"\nimport PositionUnit from \"./PositionUnit\"\nimport { SimpleGrid } from \"@chakra-ui/layout\"\nimport { decimal2Big } from \"util/format\"\nimport { useInterval } from \"@chakra-ui/hooks\"\n\nfunction Position() {\n    const { account, xDaiMulticallProvider } = Connection.useContainer()\n    const { addressMap } = Contract.useContainer()\n    const { ammMap } = Amm.useContainer()\n    const [positionInfo, setPositionInfo] = useState<PositionInfo[]>([])\n\n    const getTraderPositionInfo = useCallback(async () => {\n        if (addressMap !== null && addressMap.ClearingHouseViewer && ammMap && account && xDaiMulticallProvider) {\n            try {\n                /* get address list from clearing house contract */\n                const clearingHouseViewerContract = new MulticallContract(\n                    addressMap.ClearingHouseViewer,\n                    ClearingHouseViewerArtifact.abi,\n                )\n\n                /* sort amm list by alphabetical */\n                const sortedAmmList = Object.values(ammMap).sort((a, b) =>\n                    a.baseAssetSymbol.localeCompare(b.baseAssetSymbol),\n                )\n\n                /**\n                 * NOTE:\n                 * If the rawPositionInfo data gonna take too much bandwidth,\n                 * think about slicing the one big multicall request,\n                 * and change the processedPositionInfo structure below.\n                 */\n                const rawPositionInfo = await xDaiMulticallProvider.all([\n                    /* dataGroup1: { size, margin, openNotional } = clearingHouseViewerContract.getPersonalPositionWithFundingPayment */\n                    ...((sortedAmmList.map(amm =>\n                        clearingHouseViewerContract.getPersonalPositionWithFundingPayment(amm.address, account),\n                    ) as unknown) as ContractCall[]),\n                    /* dataGroup2: { unrealizedPnl } = clearingHouseViewerContract.getUnrealizedPnl */\n                    ...((sortedAmmList.map(amm =>\n                        clearingHouseViewerContract.getUnrealizedPnl(amm.address, account, PnlCalcOption.SpotPrice),\n                    ) as unknown) as ContractCall[]),\n                ])\n                const dataGroup1 = rawPositionInfo.splice(0, sortedAmmList.length)\n                const dataGroup2 = rawPositionInfo.splice(0, sortedAmmList.length)\n\n                /* add { size, margin, openNotional } info into sortedAmmList */\n                const processedPositionInfo: any[] = dataGroup1.map((info: any, index: number) => ({\n                    ...sortedAmmList[index],\n                    size: decimal2Big(info.size),\n                    margin: decimal2Big(info.margin),\n                    openNotional: decimal2Big(info.openNotional),\n                }))\n\n                /* add { unrealizedPnl } info into sortedAmmList */\n                processedPositionInfo.forEach((info, index) => {\n                    info.unrealizedPnl = decimal2Big(dataGroup2[index])\n                })\n\n                /* filter out size zero case */\n                const _positionInfo: PositionInfo[] = processedPositionInfo.filter(info => !info.size.eq(0))\n\n                /**\n                 * NOTE:\n                 * Merge this section with the above xDaiMulticallProvider request,\n                 * so far we separate \"getMarginRatio\" until the following issue is fixed\n                 * https://github.com/perpetual-protocol/perp-contract/issues/475\n                 */\n                const marginRatioList = await xDaiMulticallProvider.all(\n                    (_positionInfo.map(position =>\n                        clearingHouseViewerContract.getMarginRatio(position.address, account),\n                    ) as unknown) as ContractCall[],\n                )\n                _positionInfo.forEach((info, index) => {\n                    info.marginRatio = decimal2Big(marginRatioList[index])\n                })\n\n                setPositionInfo(_positionInfo)\n            } catch (err) {\n                console.error(\"Get Trader Position Info Err:\", err)\n            }\n        } else if (positionInfo.length !== 0) {\n            setPositionInfo([])\n        }\n    }, [account, addressMap, ammMap, positionInfo.length, xDaiMulticallProvider])\n\n    useEffect(() => {\n        getTraderPositionInfo()\n    }, [getTraderPositionInfo])\n\n    /* update trader's position info per 5s */\n    useInterval(getTraderPositionInfo, 5000)\n\n    return (\n        <SimpleGrid columns={1} spacing={8}>\n            {!account && <NoWallet />}\n            {account && positionInfo.length === 0 && <NoPosition />}\n            {account &&\n                positionInfo.length !== 0 &&\n                positionInfo.map((info: PositionInfo, index: number) => (\n                    <PositionUnit key={info.baseAssetSymbol} data={info} />\n                ))}\n        </SimpleGrid>\n    )\n}\n\nexport default Position\n","import { BigNumber } from \"ethers\"\n\nconst MAX_GAS_LIMIT = 12500000\n\nexport class TxRejectError extends Error {\n    constructor() {\n        super()\n        this.name = \"Transaction Reject Error\"\n        this.message = \"\"\n    }\n}\n\n// These error classes will be used in the future when we refactor the error handling logic\nexport class ExceedMaximumGasLimitError extends Error {\n    public gasLimit: BigNumber\n    constructor(gasLimit: BigNumber) {\n        super()\n        this.name = `ExceedMaximumGasLimitError`\n        this.message = `The estimated gas limit ${gasLimit.toString()} is too high, which is larger than ${MAX_GAS_LIMIT}. Please contact our support.`\n        this.gasLimit = gasLimit\n    }\n}\n\nexport class EstimateGasError extends Error {\n    constructor(funcName: string) {\n        super()\n        this.name = `EstimateGasError`\n        this.message = `EstimatedGas for function \"${funcName}\" failed. Please contact our support.`\n    }\n}\n\nexport class BiconomyError extends Error {\n    constructor(message: string) {\n        super()\n        this.name = `BiconomyError`\n        this.message = `${message}`\n    }\n}\n\nexport class AmmError extends Error {\n    constructor(\n        public ammName: string,\n        public funcName: string,\n        public ammAddress: string,\n        public message: string = \"\",\n    ) {\n        super()\n        this.name = `AmmError:${ammName}:${funcName}`\n    }\n}\n","import { IS_MAINNET } from \"../constant\"\n\nexport function getEtherscanTxLink(txId: string = \"\") {\n    const prefix = IS_MAINNET ? \"\" : \"rinkeby.\"\n    return `https://${prefix}etherscan.io/tx/${txId}`\n}\n","import { BiconomyError, TxRejectError } from \"../../util/error\"\nimport React, { useEffect } from \"react\"\nimport { useCallback, useState } from \"react\"\n\nimport { BigNumber } from \"ethers\"\nimport { CHAIN_ID } from \"connector\"\nimport { Connection } from \"container/connection\"\nimport { ContractTransaction } from \"@ethersproject/contracts\"\nimport { ExternalLink } from \"component/ExternalLink\"\nimport { STORAGE_KEY } from \"constant/storage\"\nimport { TransactionReceipt } from \"@ethersproject/providers\"\nimport { User } from \"../user\"\nimport { createContainer } from \"unstated-next\"\nimport { getEtherscanTxLink } from \"util/link\"\nimport { logger } from \"lib/bugsnag/logger\"\nimport { useLocalStorage } from \"hook/useLocalStorage\"\nimport { useNotification } from \"../../hook/useNotification\"\n\nexport const Transaction = createContainer(useTransaction)\n\ninterface Msg {\n    title?: string\n    description?: string\n}\n\ninterface LatestTx {\n    action: string\n    successMsg?: Msg\n    errorMsg?: Msg\n    infoMsg?: Msg\n}\n\nexport enum TransactionAction {\n    GENERAL = \"general\",\n    APPROVE = \"approve\",\n}\n\nconst defaultOption = {\n    action: TransactionAction.GENERAL,\n    successMsg: {\n        title: \"Transaction Succeed\",\n        description: \"Amounts should be updated shortly.\",\n    },\n    errorMsg: {\n        title: \"Transaction Failed\",\n        description: \"\",\n    },\n    infoMsg: {\n        title: \"Transaction Sent\",\n        description: \"It might take a few minutes\",\n    },\n}\n\nconst { LATEST_TX_DATA } = STORAGE_KEY\nconst MAX_RETRY_TIMES = 5\n\nfunction useTransaction() {\n    const [error, setError] = useState<any>(null)\n    const [isLoading, setIsLoading] = useState(false)\n    const [receipts, setReceipts] = useState<TransactionReceipt[]>([])\n    const { notifyError, notifySuccess, notifyInfo } = useNotification()\n    const [latestTx, setLatestTx] = useState<LatestTx | null>(null)\n    const [latestTxData, setLatestTxData] = useLocalStorage(LATEST_TX_DATA.name, LATEST_TX_DATA.defaultValue)\n    const [isInitialized, setIsInitialized] = useState<boolean>(false)\n    const {\n        state: { address },\n    } = User.useContainer()\n\n    const { xDaiProvider, ethProvider, chainId } = Connection.useContainer()\n    const provider = chainId === CHAIN_ID.XDai ? xDaiProvider : ethProvider\n\n    const resetTxStatus = useCallback(() => {\n        setIsLoading(false)\n        setLatestTxData(\"\")\n    }, [setLatestTxData])\n\n    // TODO: need to handle speed up case\n    // monitor latestTx\n    useEffect(() => {\n        async function checkReceipt(triedTimes: number) {\n            const { txHash, successTitle, successDesc } = JSON.parse(latestTxData)\n            try {\n                const receipt = await provider.getTransactionReceipt(txHash)\n                if (receipt) {\n                    resetTxStatus()\n                    notifySuccess({\n                        title: <ExternalLink href={getEtherscanTxLink(txHash)}>{successTitle}</ExternalLink>,\n                        description: successDesc,\n                    })\n                } else if (triedTimes < MAX_RETRY_TIMES) {\n                    logger.info(\"triedTimes\", triedTimes)\n                    setTimeout(() => {\n                        checkReceipt(triedTimes + 1)\n                    }, 2000)\n                } else {\n                    resetTxStatus()\n                    notifyError({\n                        title: <ExternalLink href={getEtherscanTxLink(txHash)}>Latest Receipt Not Found</ExternalLink>,\n                        description: \"\",\n                    })\n                }\n            } catch (err) {\n                resetTxStatus()\n                logger.error(err)\n            }\n        }\n        if (!isInitialized) {\n            setIsInitialized(true)\n            if (latestTxData) {\n                setIsLoading(true)\n                checkReceipt(0)\n            }\n        }\n    }, [resetTxStatus, isInitialized, latestTxData, notifyError, notifySuccess, provider, setLatestTxData])\n\n    const preExecute = useCallback((option?: LatestTx) => {\n        const infoTitle = option?.infoMsg?.title || defaultOption.infoMsg.title\n        const infoDesc = option?.infoMsg?.description || defaultOption.infoMsg.description\n        const successTitle = option?.successMsg?.title || defaultOption.successMsg.title\n        const successDesc = option?.successMsg?.description || defaultOption.successMsg.description\n        const errorTitle = option?.errorMsg?.title || defaultOption.errorMsg.title\n        const errorDesc = option?.errorMsg?.description || defaultOption.errorMsg.description\n\n        setError(null)\n        setLatestTx({\n            action: option?.action || defaultOption.action,\n            infoMsg: { title: infoTitle, description: infoDesc },\n            successMsg: { title: successTitle, description: successDesc },\n            errorMsg: { title: errorTitle, description: errorDesc },\n        })\n\n        return {\n            infoTitle,\n            infoDesc,\n            successTitle,\n            successDesc,\n            errorTitle,\n            errorDesc,\n        }\n    }, [])\n\n    const userConfirmTx = useCallback(\n        async (txAction: Promise<ContractTransaction | string>, metaData: Record<string, string>) => {\n            const { infoTitle, infoDesc, successTitle, successDesc } = metaData\n            let tx, txHash\n            let isRejected = false\n            let isMetaTx = false\n            try {\n                setIsLoading(true)\n                tx = await txAction\n                isMetaTx = typeof tx === \"string\"\n                txHash = isMetaTx ? (tx as string) : (tx as ContractTransaction).hash\n                setLatestTxData(\n                    JSON.stringify({\n                        ...metaData,\n                        txHash,\n                    }),\n                )\n                if (!isMetaTx) {\n                    notifyInfo({\n                        title: <ExternalLink href={getEtherscanTxLink(txHash)}>{infoTitle}</ExternalLink>,\n                        description: infoDesc,\n                    })\n                } else {\n                    notifySuccess({\n                        title: <ExternalLink href={getEtherscanTxLink(txHash)}>{successTitle}</ExternalLink>,\n                        description: successDesc,\n                    })\n                }\n            } catch (err) {\n                if (err.code && err.code === 4001) {\n                    // it means user reject this tx\n                    isRejected = true\n                    setError(new TxRejectError())\n                    notifyError({\n                        title: \"Transaction Rejected\",\n                        description: \"Please confirm transaction to continue.\",\n                    })\n                } else if (err instanceof BiconomyError) {\n                    // failed tx via biconomy\n                    notifyError({\n                        title: \"Transaction Failed\",\n                        // description: `something wrong. please contact support`,\n                    })\n                    setError(err)\n                }\n                logger.error(err)\n                resetTxStatus()\n            }\n            return {\n                isRejected,\n                isMetaTx,\n                tx,\n                txHash,\n            }\n        },\n        [notifyInfo, notifySuccess, notifyError, setLatestTxData, resetTxStatus],\n    )\n\n    const execute = useCallback(\n        async (txAction: Promise<ContractTransaction | string>, option?: LatestTx) => {\n            const latestTxMetaData = preExecute(option)\n            const { successTitle, successDesc, errorTitle, errorDesc } = latestTxMetaData\n\n            let receipt: TransactionReceipt | null = null\n            const { tx, isRejected, isMetaTx, txHash } = await userConfirmTx(txAction, latestTxMetaData)\n\n            if (isRejected || isMetaTx) {\n                // NOTE: both cases are handled in `userConfirmTx`\n                // TODO: should interleave meta tx and contract tx\n                return\n            }\n\n            try {\n                receipt = await (tx as ContractTransaction).wait()\n                setReceipts(prev => [...prev, receipt as TransactionReceipt])\n                notifySuccess({\n                    title: <ExternalLink href={getEtherscanTxLink(txHash)}>{successTitle}</ExternalLink>,\n                    description: successDesc,\n                })\n            } catch (err) {\n                logger.error(err)\n                setError(err)\n                notifyError({\n                    title: <ExternalLink href={getEtherscanTxLink(txHash)}>{errorTitle}</ExternalLink>,\n                    description: errorDesc,\n                })\n            }\n            resetTxStatus()\n            return receipt\n        },\n        [notifyError, notifySuccess, preExecute, resetTxStatus, userConfirmTx],\n    )\n\n    const executeWithGasLimit = useCallback(\n        async (contract, funcName, args, option?: LatestTx) => {\n            const overrides = { from: address }\n            const gasLimitRatio = BigNumber.from(2)\n            let gasLimit: BigNumber\n            let receipt: TransactionReceipt | undefined | null = null\n\n            try {\n                gasLimit = await contract.estimateGas[funcName](...args, overrides)\n                receipt = await execute(\n                    contract[funcName](...args, { ...overrides, gasLimit: gasLimitRatio.mul(gasLimit) }),\n                    option,\n                )\n            } catch (err) {\n                logger.error(err)\n                setError(err)\n            }\n            return receipt\n        },\n        [execute, address],\n    )\n\n    return {\n        error,\n        receipts,\n        isLoading,\n        execute,\n        executeWithGasLimit,\n        latestTx,\n    }\n}\n","import { useEffect, useCallback, useRef } from \"react\"\nimport { Contract } from \"../container/contract\"\n\nexport function useContractCall(fn: Function, deps: any[]) {\n    const savedCallback = useRef<Function>()\n    const { isInitialized } = Contract.useContainer()\n\n    useEffect(() => {\n        savedCallback.current = fn\n    }, [fn])\n\n    const memoizedCallback = useCallback(\n        (...args) => {\n            if (isInitialized && savedCallback.current) {\n                const _fn = savedCallback.current\n                return _fn(...args)\n            }\n        },\n        // TODO: if we do `...deps` here, eslint won't help us find missing deps statically,\n        // we might need to find a way to fix it\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [isInitialized, ...deps],\n    )\n\n    return memoizedCallback\n}\n","import { useRef, useEffect } from \"react\"\n\ntype Callback = (...args: any[]) => void\n\nexport function useContractEvent(contract: any, eventName: string, callback: Callback) {\n    const savedCallback = useRef<Callback | null>()\n\n    // Remember the latest callback.\n    useEffect(() => {\n        savedCallback.current = callback\n    })\n\n    useEffect(() => {\n        function listener(...args: any[]) {\n            if (savedCallback.current) {\n                savedCallback.current(...args)\n            }\n        }\n        if (contract && eventName) {\n            contract.on(eventName, listener)\n\n            return () => {\n                contract.off(eventName, listener)\n            }\n        }\n    }, [contract, eventName])\n}\n","import { useState, useEffect, useCallback, useMemo } from \"react\"\nimport { Contract as MulticallContract } from \"ethers-multicall\"\nimport { constants } from \"ethers\"\nimport { Big } from \"big.js\"\nimport { Contract } from \"container/contract\"\nimport { BIG_ZERO } from \"../constant/number\"\nimport { Connection } from \"../container/connection\"\nimport { Transaction, TransactionAction } from \"../container/transaction\"\nimport { big2BigNum, bigNum2Big } from \"../util/format\"\nimport { useContractCall } from \"./useContractCall\"\nimport { CHAIN_ID } from \"connector\"\nimport { isAddress } from \"@ethersproject/address\"\nimport { useContractEvent } from \"./useContractEvent\"\n\nexport function useToken(address: string, decimals: number, chainId: CHAIN_ID) {\n    const { xDaiMulticallProvider, ethMulticallProvider, account, signer } = Connection.useContainer()\n    const { erc20: erc20Contract } = Contract.useContainer()\n    const { executeWithGasLimit } = Transaction.useContainer()\n    const [balance, setBalance] = useState(BIG_ZERO)\n    const [allowance, setAllowance] = useState<Record<string, Big>>({})\n    const [totalSupply, setTotalSupply] = useState(BIG_ZERO)\n\n    const multicallProvider = chainId === CHAIN_ID.XDai ? xDaiMulticallProvider : ethMulticallProvider\n    const erc20 = chainId === CHAIN_ID.XDai ? erc20Contract?.XDai : erc20Contract?.Eth\n\n    const contract = useMemo(() => {\n        return isAddress(address) ? erc20?.attach(address) || null : null\n    }, [erc20, address])\n\n    useEffect(() => {\n        async function fetchToken() {\n            if (erc20 && multicallProvider && address) {\n                const contract = new MulticallContract(address, erc20.interface.fragments)\n                const [totalSupply] = await multicallProvider.all([contract.totalSupply()])\n                setTotalSupply(bigNum2Big(totalSupply, decimals))\n            }\n        }\n        fetchToken()\n    }, [erc20, multicallProvider, address, decimals])\n\n    useEffect(() => {\n        async function fetchBalance() {\n            if (erc20 && multicallProvider && address && account) {\n                const contract = new MulticallContract(address, erc20.interface.fragments)\n                const [balance] = await multicallProvider.all([contract.balanceOf(account)])\n                setBalance(bigNum2Big(balance, decimals))\n            }\n        }\n        fetchBalance()\n    }, [erc20, multicallProvider, address, account, decimals])\n\n    const queryAllowanceBySpender = useCallback(\n        async (spender: string) => {\n            if (spender && contract && account) {\n                const _allowance = await contract.allowance(account, spender)\n                setAllowance(prev => ({\n                    ...prev,\n                    [spender]: bigNum2Big(_allowance, decimals),\n                }))\n            }\n        },\n        [contract, account, decimals],\n    )\n\n    const approve = useContractCall(\n        async (contractAddress: string, amount: Big) => {\n            const receipt = await executeWithGasLimit(\n                contract!.connect(signer),\n                \"approve\",\n                [contractAddress, big2BigNum(amount)],\n                {\n                    action: TransactionAction.APPROVE,\n                    successMsg: {\n                        description: \"\",\n                    },\n                },\n            )\n            return receipt\n        },\n        [executeWithGasLimit, signer, contract],\n    )\n\n    const approveInfinity = useContractCall(\n        async (contractAddress: string) => {\n            const receipt = await executeWithGasLimit(\n                contract!.connect(signer),\n                \"approve\",\n                [contractAddress, constants.MaxUint256],\n                {\n                    action: TransactionAction.APPROVE,\n                    successMsg: {\n                        description: \"\",\n                    },\n                },\n            )\n            return receipt\n        },\n        [executeWithGasLimit, signer, contract],\n    )\n\n    useContractEvent(contract, \"Transfer\", async (from: string, to: string) => {\n        if (contract && (from === account || to === account)) {\n            const balance = await contract.balanceOf(account)\n            setBalance(bigNum2Big(balance, decimals))\n        }\n    })\n\n    useContractEvent(contract, \"Approval\", async (owner: string, spender: string) => {\n        if (contract && owner === account) {\n            const allowance = await contract.allowance(owner, spender)\n            setAllowance(prev => ({\n                ...prev,\n                [spender]: bigNum2Big(allowance, decimals),\n            }))\n        }\n    })\n\n    return {\n        contract,\n        decimals,\n        totalSupply,\n        balance,\n        allowance,\n        queryAllowanceBySpender,\n        approve,\n        approveInfinity,\n    }\n}\n","import { Box, Button, FormHelperText, HStack } from \"@chakra-ui/react\"\nimport { CHAIN_ID } from \"connector\"\nimport { USDC_DECIMAL_DIGITS } from \"constant\"\nimport { Connection } from \"container/connection\"\nimport { Contract } from \"container/contract\"\nimport { useToken } from \"hook/useToken\"\nimport { useCallback } from \"react\"\nimport { numberWithCommasUsdc } from \"util/format\"\n\ninterface MyBalanceProps {\n    setCollateral: Function\n}\n\nfunction MyBalance({ setCollateral }: MyBalanceProps) {\n    const { account } = Connection.useContainer()\n    const { addressMap } = Contract.useContainer()\n\n    /* prepare balance data  */\n    const { balance } = useToken(addressMap ? addressMap.XDaiUsdc : \"\", USDC_DECIMAL_DIGITS, CHAIN_ID.XDai)\n\n    const handleOnClick = useCallback(() => {\n        /* make sure the precision will be controlled */\n        const fixedBalance = balance.toFixed(2)\n        setCollateral(fixedBalance)\n    }, [balance, setCollateral])\n\n    return (\n        <FormHelperText>\n            <HStack w=\"100%\" justifyContent=\"space-between\" alignItems=\"flex-start\">\n                <Box>My Balance : {account ? numberWithCommasUsdc(balance) : \"null\"}</Box>\n                {account && (\n                    <Button borderRadius=\"xl\" size=\"xs\" variant=\"outline\" onClick={handleOnClick}>\n                        MAX\n                    </Button>\n                )}\n            </HStack>\n        </FormHelperText>\n    )\n}\n\nexport default MyBalance\n","import { FormLabel, Text } from \"@chakra-ui/react\"\nimport React from \"react\"\n\ninterface Props {\n    children: boolean | React.ReactChild | React.ReactFragment | React.ReactPortal | null | undefined\n}\n\nfunction SmallFormLabel(props: Props) {\n    return (\n        <FormLabel>\n            <Text fontSize=\"xs\" color=\"gray.500\" textTransform=\"uppercase\">\n                {props.children}\n            </Text>\n        </FormLabel>\n    )\n}\n\nexport default SmallFormLabel\n","import { useMemo, useState } from \"react\"\nimport { createContainer } from \"unstated-next\"\nimport { Side } from \"constant\"\nimport Big from \"big.js\"\n\nexport const Trade = createContainer(useTrade)\n\nfunction useTrade() {\n    /* long = 1, short = 0 */\n    const [side, setSide] = useState<Side>(Side.Long)\n\n    /* min: 1, max: 10 */\n    const [leverage, setLeverage] = useState<number>(1)\n\n    /* min: 0% */\n    const [slippage, setSlippage] = useState<number>(0.5)\n\n    const [collateral, setCollateral] = useState<Big | null>(null)\n\n    return useMemo(\n        () => ({\n            side,\n            setSide,\n            leverage,\n            setLeverage,\n            slippage,\n            setSlippage,\n            collateral,\n            setCollateral,\n        }),\n        [leverage, collateral, side, slippage],\n    )\n}\n","import { useEffect, useState } from \"react\"\n\nconst DEFAULT_DELAY = 200\n\ninterface DebounceArgs<T> {\n    value: T\n    delay?: number\n    onBeforeDebounce?: Function\n    onAfterDebounce?: Function\n}\n\nexport function useDebounce<T>({ value, delay = DEFAULT_DELAY, onBeforeDebounce, onAfterDebounce }: DebounceArgs<T>) {\n    const [debouncedValue, setDebouncedValue] = useState<T>(value)\n\n    useEffect(() => {\n        if (onBeforeDebounce) {\n            onBeforeDebounce(value)\n        }\n\n        const handler = setTimeout(() => {\n            setDebouncedValue(value)\n            if (onAfterDebounce) {\n                onAfterDebounce(value)\n            }\n        }, delay)\n\n        return () => {\n            clearTimeout(handler)\n        }\n    }, [value, delay, onBeforeDebounce, onAfterDebounce])\n\n    return debouncedValue\n}\n","import { FormControl, InputGroup, InputRightElement, NumberInput, NumberInputField, Text } from \"@chakra-ui/react\"\nimport { useCallback, useEffect, useMemo, useState } from \"react\"\n\nimport { Amm } from \"container/amm\"\nimport Big from \"big.js\"\nimport MyBalance from \"./MyBalance\"\nimport SmallFormLabel from \"component/SmallFormLabel\"\nimport { Trade } from \"container/trade\"\nimport { USDC_PRECISION } from \"constant\"\nimport { formatInput } from \"util/format\"\nimport { useDebounce } from \"hook/useDebounce\"\n\nfunction Collateral() {\n    const { selectedAmm } = Amm.useContainer()\n    const { collateral, setCollateral } = Trade.useContainer()\n    const [_collateral, _setCollateral] = useState<string>(\"\")\n    const quoteAssetSymbol = selectedAmm?.quoteAssetSymbol || \"\"\n    const debouncedCollateral = useDebounce({ value: _collateral, delay: 500 })\n\n    const handleOnInput = useCallback(\n        e => {\n            const value = e.target.value\n            if (value >= 0) {\n                const formattedValue = formatInput(value, USDC_PRECISION)\n                _setCollateral(formattedValue)\n            }\n        },\n        [_setCollateral],\n    )\n\n    useEffect(() => {\n        /* reset collateral to null */\n        if (debouncedCollateral === \"\") {\n            setCollateral(null)\n            return\n        }\n        /* detect if the value is different */\n        const b_debouncedCollateral = new Big(debouncedCollateral)\n        if (!collateral?.eq(b_debouncedCollateral)) {\n            setCollateral(b_debouncedCollateral)\n        }\n    }, [collateral, debouncedCollateral, setCollateral])\n\n    return useMemo(\n        () => (\n            <FormControl id=\"margin\">\n                <SmallFormLabel>COLLATERAL</SmallFormLabel>\n                <NumberInput value={_collateral} onInput={handleOnInput}>\n                    <InputGroup>\n                        <NumberInputField />\n                        <InputRightElement w=\"54px\">\n                            <Text\n                                w=\"100%\"\n                                textAlign=\"center\"\n                                fontWeight=\"bold\"\n                                fontSize=\"xs\"\n                                color=\"blue.500\"\n                                textTransform=\"uppercase\"\n                            >\n                                {quoteAssetSymbol}\n                            </Text>\n                        </InputRightElement>\n                    </InputGroup>\n                </NumberInput>\n                <MyBalance setCollateral={_setCollateral} />\n            </FormControl>\n        ),\n        [_collateral, handleOnInput, quoteAssetSymbol],\n    )\n}\n\nexport default Collateral\n","import {\n    Box,\n    FormControl,\n    FormHelperText,\n    Slider,\n    SliderFilledTrack,\n    SliderThumb,\n    SliderTrack,\n    Text,\n} from \"@chakra-ui/react\"\nimport SmallFormLabel from \"component/SmallFormLabel\"\nimport { useCallback, useEffect, useMemo, useState } from \"react\"\nimport { Trade } from \"container/trade\"\nimport { useDebounce } from \"hook/useDebounce\"\n\nfunction Leverage() {\n    const { side, leverage, setLeverage } = Trade.useContainer()\n    const [_leverage, _setLeverage] = useState<number>(1)\n    const debouncedLeverage = useDebounce({ value: _leverage, delay: 500 })\n\n    const handleOnChange = useCallback(\n        (value: number) => {\n            if (value !== _leverage) {\n                _setLeverage(value)\n            }\n        },\n        [_leverage],\n    )\n\n    useEffect(() => {\n        if (debouncedLeverage !== leverage) {\n            setLeverage(debouncedLeverage)\n        }\n    }, [debouncedLeverage, leverage, setLeverage])\n\n    return useMemo(\n        () => (\n            <FormControl id=\"leverages\">\n                <SmallFormLabel>Leverage</SmallFormLabel>\n                <Box px={10} pt={4} pb={8} bg=\"blackAlpha.50\" borderRadius=\"xl\">\n                    <Slider\n                        onChange={handleOnChange}\n                        defaultValue={_leverage}\n                        min={1}\n                        max={10}\n                        step={0.5}\n                        colorScheme={side === 1 ? \"green\" : \"red\"}\n                    >\n                        <SliderTrack bg=\"gray.300\">\n                            <SliderFilledTrack />\n                        </SliderTrack>\n                        <SliderThumb\n                            _focus={{ boxShadow: \"2xl\" }}\n                            _hover={{ boxShadow: \"2xl\" }}\n                            _highlighted={{ boxShadow: \"2xl\" }}\n                            _grabbed={{ boxShadow: \"2xl\" }}\n                            _pressed={{ boxShadow: \"2xl\" }}\n                            _active={{\n                                userSelect: \"none\",\n                                pb: [\"50px\", 0],\n                                pt: [\"6px\", 0],\n                                height: [\"88px\", \"36px\"],\n                                transform: [\"translate(-50%,-70px)\", \"translate(-50%,-50%)\"],\n                                boxShadow: \"md\",\n                            }}\n                            transform={[\"translate(-50%,-50%)\", \"translate(-50%,-50%)\"]}\n                            h={9}\n                            w={12}\n                            bg={side === 1 ? \"green.50\" : \"red.50\"}\n                            boxShadow=\"2xl\"\n                        >\n                            <Text fontSize=\"sm\" fontWeight=\"bold\" color={side === 1 ? \"green.600\" : \"red.600\"}>\n                                {_leverage}×\n                            </Text>\n                        </SliderThumb>\n                    </Slider>\n                </Box>\n                <FormHelperText>Up to 10×</FormHelperText>\n            </FormControl>\n        ),\n        [handleOnChange, side, _leverage],\n    )\n}\n\nexport default Leverage\n","import { FormControl, Select } from \"@chakra-ui/react\"\nimport SmallFormLabel from \"component/SmallFormLabel\"\nimport React, { useCallback, useEffect, useMemo } from \"react\"\nimport { Amm as AmmType } from \"constant/amm\"\nimport { Amm } from \"container/amm\"\n\nfunction MarketSelector() {\n    const { isLoading: isLoadingAmmMap, ammMap, setSelectedAmm } = Amm.useContainer()\n\n    const sortedAmmList = useMemo(() => {\n        if (!ammMap) {\n            return []\n        }\n        return Object.values(ammMap).sort((a, b) => a.baseAssetSymbol.localeCompare(b.baseAssetSymbol))\n    }, [ammMap])\n\n    useEffect(() => {\n        /* use local storage to impl setDefaultSelectedAmm would be better */\n        function setDefaultSelectedAmm() {\n            setSelectedAmm(sortedAmmList[0])\n        }\n        if (sortedAmmList && sortedAmmList.length > 0) {\n            setDefaultSelectedAmm()\n        }\n    }, [setSelectedAmm, sortedAmmList])\n\n    const handleOnChange = useCallback(\n        e => {\n            const index = e.target.value\n            setSelectedAmm(sortedAmmList[index])\n        },\n        [sortedAmmList, setSelectedAmm],\n    )\n\n    return (\n        <FormControl id=\"market\">\n            <SmallFormLabel>Market</SmallFormLabel>\n            <Select onChange={handleOnChange} isDisabled={isLoadingAmmMap}>\n                {sortedAmmList.map((amm: AmmType, index: number) => (\n                    <option key={`${amm.baseAssetSymbol}-${amm.quoteAssetSymbol}`} value={index}>\n                        {amm.baseAssetSymbol} / {amm.quoteAssetSymbol}\n                    </option>\n                ))}\n            </Select>\n        </FormControl>\n    )\n}\n\nexport default MarketSelector\n","import { big2Decimal, bigNum2Big, decimal2Big } from \"util/format\"\nimport { useCallback, useEffect, useMemo, useState } from \"react\"\n\nimport { AmmError } from \"util/error\"\nimport Big from \"big.js\"\nimport { Connection } from \"container/connection\"\nimport { Contract } from \"container/contract\"\nimport { Dir } from \"constant\"\nimport { Contract as MulticallContract } from \"ethers-multicall\"\nimport { isAddress } from \"@ethersproject/address\"\nimport { useContractEvent } from \"./useContractEvent\"\n\nexport function useRealtimeAmm(address: string, name: string) {\n    const { xDaiMulticallProvider } = Connection.useContainer()\n    const { amm } = Contract.useContainer()\n    const [baseAssetReserve, setBaseAssetReserve] = useState<Big | null>(null)\n    const [quoteAssetReserve, setQuoteAssetReserve] = useState<Big | null>(null)\n\n    const contract = useMemo(() => {\n        return isAddress(address) ? amm?.attach(address) || null : null\n    }, [amm, address])\n\n    const getInputPrice = useCallback(\n        async (dir: Dir, notional: Big): Promise<Big | null> => {\n            if (contract) {\n                try {\n                    return decimal2Big(await contract.getInputPrice(dir, big2Decimal(notional)))\n                } catch (err) {\n                    throw new AmmError(name, \"GetInputPrice\", address)\n                }\n            }\n            return null\n        },\n        [address, contract, name],\n    )\n\n    const getOutputPrice = useCallback(\n        async (size: Big): Promise<Big | null> => {\n            if (contract) {\n                try {\n                    const dir: Dir = size.gt(0) ? Dir.AddToAmm : Dir.RemoveFromAmm\n                    return decimal2Big(await contract.getOutputPrice(dir, big2Decimal(size.abs())))\n                } catch (err) {\n                    throw new AmmError(name, \"GetOutputPrice\", address)\n                }\n            }\n            return null\n        },\n        [address, contract, name],\n    )\n\n    useEffect(() => {\n        async function getAssetReserve() {\n            if (xDaiMulticallProvider !== null && amm !== null && isAddress(address)) {\n                const multiContract = new MulticallContract(address, amm.interface.fragments)\n                const [quoteAssetReserve, baseAssetReserve] = await xDaiMulticallProvider.all([\n                    multiContract.quoteAssetReserve(),\n                    multiContract.baseAssetReserve(),\n                ])\n                setQuoteAssetReserve(bigNum2Big(quoteAssetReserve))\n                setBaseAssetReserve(bigNum2Big(baseAssetReserve))\n            }\n        }\n        getAssetReserve()\n    }, [address, amm, xDaiMulticallProvider])\n\n    /* will receive [quoteAssetReserve, baseAssetReserve, timestamp] */\n    useContractEvent(contract, \"ReserveSnapshotted\", (quoteAssetReserve, baseAssetReserve, _) => {\n        setQuoteAssetReserve(bigNum2Big(quoteAssetReserve))\n        setBaseAssetReserve(bigNum2Big(baseAssetReserve))\n    })\n\n    return {\n        contract,\n        baseAssetReserve,\n        quoteAssetReserve,\n        getInputPrice,\n        getOutputPrice,\n    }\n}\n","import { Dir, Side } from \"constant\"\nimport { useEffect, useState } from \"react\"\n\nimport { Amm } from \"container/amm\"\nimport { Trade } from \"container/trade\"\nimport { formatInput } from \"util/format\"\nimport { useRealtimeAmm } from \"hook/useRealtimeAmm\"\n\nexport function usePositionSize() {\n    const { selectedAmm } = Amm.useContainer()\n    const { collateral, leverage, side } = Trade.useContainer()\n    const dir = side === Side.Long ? Dir.AddToAmm : Dir.RemoveFromAmm\n\n    const ammAddress = selectedAmm?.address || \"\"\n    const ammName = selectedAmm?.baseAssetSymbol || \"\"\n    const { getInputPrice } = useRealtimeAmm(ammAddress, ammName)\n\n    const [positionSize, setPositionSize] = useState<string>(\"\")\n    const [isCalculating, setIsCalculating] = useState<boolean>(false)\n\n    /**\n     * 1. trigger by user\n     * 2. trigger by contract event\n     */\n\n    /* case1: trigger by user */\n    useEffect(() => {\n        async function updatePositionByUserControl() {\n            if (collateral === null) {\n                setPositionSize(\"\")\n                return\n            }\n\n            /* early return if the collateral is zero */\n            if (collateral.eq(0)) {\n                setPositionSize(\"0\")\n                return\n            }\n\n            setIsCalculating(true)\n\n            /* calculate the position size */\n            const notional = collateral.mul(leverage)\n            const positionReceived = await getInputPrice(dir, notional)\n\n            let formattedValue = \"\"\n            if (positionReceived !== null) {\n                formattedValue = formatInput(positionReceived.toString(), 7)\n            }\n\n            setPositionSize(formattedValue)\n            setIsCalculating(false)\n        }\n        updatePositionByUserControl()\n    }, [dir, getInputPrice, collateral, leverage])\n\n    return { positionSize, isCalculating, dir }\n}\n","import { FormControl, Input, InputGroup, InputRightElement, Text } from \"@chakra-ui/react\"\n\nimport { Amm } from \"container/amm\"\nimport SmallFormLabel from \"component/SmallFormLabel\"\nimport { usePositionSize } from \"./usePositionSize\"\n\nfunction Position() {\n    const { selectedAmm } = Amm.useContainer()\n    const { positionSize, isCalculating } = usePositionSize()\n    const baseAssetSymbol = selectedAmm?.baseAssetSymbol || \"\"\n\n    return (\n        <FormControl id=\"position\">\n            <SmallFormLabel>Position</SmallFormLabel>\n            <InputGroup>\n                <Input variant=\"filled\" isReadOnly value={isCalculating ? \"⃜⏳\" : positionSize} />\n                <InputRightElement w=\"54px\">\n                    <Text\n                        w=\"100%\"\n                        textAlign=\"center\"\n                        fontWeight=\"bold\"\n                        fontSize=\"xs\"\n                        color=\"gray.500\"\n                        textTransform=\"uppercase\"\n                    >\n                        {baseAssetSymbol}\n                    </Text>\n                </InputRightElement>\n            </InputGroup>\n        </FormControl>\n    )\n}\n\nexport default Position\n","import { ButtonGroup, Button } from \"@chakra-ui/react\"\nimport { useCallback } from \"react\"\nimport { Trade } from \"container/trade\"\nimport { Side } from \"constant\"\n\nfunction SideSwitcher() {\n    const { side, setSide } = Trade.useContainer()\n\n    const handleLongOnClick = useCallback(() => {\n        if (side !== Side.Long) {\n            setSide(Side.Long)\n        }\n    }, [setSide, side])\n\n    const handleShortOnClick = useCallback(() => {\n        if (side !== Side.Short) {\n            setSide(Side.Short)\n        }\n    }, [setSide, side])\n\n    return (\n        <ButtonGroup w=\"100%\" isAttached variant=\"solid\">\n            <Button\n                size=\"sm\"\n                isFullWidth\n                onClick={handleLongOnClick}\n                colorScheme={side === 1 ? \"green\" : \"gray\"}\n                mr=\"-px\"\n                variant=\"solid\"\n            >\n                Long\n            </Button>\n            <Button size=\"sm\" isFullWidth onClick={handleShortOnClick} colorScheme={side === 0 ? \"red\" : \"gray\"}>\n                Short\n            </Button>\n        </ButtonGroup>\n    )\n}\n\nexport default SideSwitcher\n","import {\n    FormControl,\n    FormHelperText,\n    NumberDecrementStepper,\n    NumberIncrementStepper,\n    NumberInput,\n    NumberInputField,\n    NumberInputStepper,\n    InputRightElement,\n    Text,\n} from \"@chakra-ui/react\"\nimport React, { useCallback, useMemo } from \"react\"\n\nimport SmallFormLabel from \"component/SmallFormLabel\"\nimport { Trade } from \"container/trade\"\n\nfunction Slippage() {\n    const { slippage, setSlippage } = Trade.useContainer()\n\n    const handleOnChange = useCallback(\n        value => {\n            if (value >= 0) {\n                setSlippage(value)\n            }\n        },\n        [setSlippage],\n    )\n    return useMemo(\n        () => (\n            <FormControl id=\"slippage\">\n                <SmallFormLabel>Slippage (%)</SmallFormLabel>\n                <NumberInput\n                    allowMouseWheel\n                    min={0}\n                    step={0.1}\n                    max={100}\n                    clampValueOnBlur={false}\n                    onChange={handleOnChange}\n                    value={slippage}\n                    focusInputOnChange={true}\n                >\n                    <NumberInputField />\n                    <NumberInputStepper>\n                        <NumberIncrementStepper />\n                        <NumberDecrementStepper />\n                    </NumberInputStepper>\n                    <InputRightElement w=\"54px\" mr={4}>\n                        <Text\n                            w=\"100%\"\n                            textAlign=\"center\"\n                            fontWeight=\"bold\"\n                            fontSize=\"xs\"\n                            color=\"gray.500\"\n                            textTransform=\"uppercase\"\n                        >\n                            %\n                        </Text>\n                    </InputRightElement>\n                </NumberInput>\n                <FormHelperText>\n                    To use custom slippage, please input manually. It also applies to closing position and margin\n                    adjustment.\n                </FormHelperText>\n            </FormControl>\n        ),\n        [handleOnChange, slippage],\n    )\n}\n\nexport default Slippage\n","import { BigNumber, ContractTransaction, Signer } from \"ethers\"\nimport { Decimal, Dir } from \"constant\"\n\nimport { ClearingHouse } from \"types/contracts\"\nimport { ClearingHouseActions } from \"./type\"\n\nexport class ContractExecutor implements ClearingHouseActions {\n    constructor(readonly contract: ClearingHouse, readonly signer: Signer | undefined) {\n        if (signer) {\n            this.contract = contract.connect(signer)\n        }\n    }\n\n    addMargin(ammAddress: string, increaseMargin: Decimal): Promise<ContractTransaction> {\n        return this.execute(\"addMargin\", [ammAddress, increaseMargin])\n    }\n\n    adjustPosition(ammAddress: string): Promise<ContractTransaction> {\n        return this.execute(\"adjustPosition\", [ammAddress])\n    }\n\n    closePosition(ammAddress: string, quoteAssetAmountLimit: Decimal): Promise<ContractTransaction> {\n        return this.execute(\"closePosition\", [ammAddress, quoteAssetAmountLimit])\n    }\n\n    openPosition(\n        ammAddress: string,\n        dir: Dir,\n        quoteAssetAmount: Decimal,\n        leverage: Decimal,\n        minBaseAssetAmount: Decimal,\n    ): Promise<ContractTransaction> {\n        return this.execute(\"openPosition\", [ammAddress, dir, quoteAssetAmount, leverage, minBaseAssetAmount])\n    }\n\n    removeMargin(ammAddress: string, decreaseMargin: Decimal): Promise<ContractTransaction> {\n        return this.execute(\"removeMargin\", [ammAddress, decreaseMargin])\n    }\n\n    async execute(funcName: string, args: any[]) {\n        const overrides = { from: this.contract.signer.getAddress() }\n\n        return this.contract[funcName](...args, {\n            ...overrides,\n            // NOTE: hard code the gasLimit, until estimateGas function can always return a reasonable number.\n            gasLimit: BigNumber.from(3_800_000),\n            // NOTE: Instead of using a lower customized gas price, we use the default gas price which is provided by the metamask.\n            // gasPrice: utils.parseUnits(\"2\", \"gwei\"),\n        })\n    }\n}\n","import { Dir, Network } from \"../../constant\"\nimport { big2Decimal, bigNum2Decimal } from \"util/format\"\nimport { useCallback, useMemo } from \"react\"\n\nimport { Big } from \"big.js\"\nimport { BigNumber } from \"ethers\"\nimport { ClearingHouseActions } from \"./type\"\nimport { Connection } from \"../connection\"\nimport { Contract } from \"../contract\"\nimport { ContractExecutor } from \"./ContractExecutor\"\nimport { Transaction } from \"../transaction\"\nimport { createContainer } from \"unstated-next\"\n\nexport const ClearingHouse = createContainer(useClearingHouse)\n\nexport interface Executors {\n    [Network.Xdai]: ClearingHouseActions\n}\n\nfunction useClearingHouse() {\n    const { signer } = Connection.useContainer()\n    const { clearingHouse, metaTxGateway } = Contract.useContainer()\n    const { execute } = Transaction.useContainer()\n\n    const executors: Executors | null = useMemo(() => {\n        if (!clearingHouse || !metaTxGateway || !signer) {\n            return null\n        }\n        return {\n            [Network.Xdai]: new ContractExecutor(clearingHouse, signer),\n        }\n    }, [clearingHouse, metaTxGateway, signer])\n\n    const currentExecutor = useMemo(() => {\n        return executors ? executors[Network.Xdai] : null\n    }, [executors])\n\n    const closePosition = useCallback(\n        (ammAddress: string, quoteAssetAmountLimit: Big) => {\n            if (currentExecutor) {\n                execute(currentExecutor.closePosition(ammAddress, big2Decimal(quoteAssetAmountLimit)))\n            }\n        },\n        [currentExecutor, execute],\n    )\n\n    const openPosition = useCallback(\n        (dir: Dir, ammAddress: string, quoteAssetAmount: Big, leverage: Big, minBaseAssetAmount: Big) => {\n            if (currentExecutor) {\n                execute(\n                    currentExecutor.openPosition(\n                        ammAddress,\n                        dir,\n                        big2Decimal(quoteAssetAmount),\n                        big2Decimal(leverage),\n                        big2Decimal(minBaseAssetAmount),\n                    ),\n                )\n            }\n        },\n        [currentExecutor, execute],\n    )\n\n    const addMargin = useCallback(\n        (ammAddress: string, increaseMargin: BigNumber) => {\n            if (currentExecutor) {\n                const d_increaseMargin = bigNum2Decimal(increaseMargin)\n                execute(currentExecutor.addMargin(ammAddress, d_increaseMargin))\n            }\n        },\n        [currentExecutor, execute],\n    )\n\n    const removeMargin = useCallback(\n        (ammAddress: string, reduceMargin: BigNumber) => {\n            if (currentExecutor) {\n                const d_reduceMargin = bigNum2Decimal(reduceMargin)\n                execute(currentExecutor.removeMargin(ammAddress, d_reduceMargin))\n            }\n        },\n        [currentExecutor, execute],\n    )\n\n    return {\n        openPosition,\n        closePosition,\n        addMargin,\n        removeMargin,\n    }\n}\n","import { Amm } from \"container/amm\"\nimport Big from \"big.js\"\nimport { Button } from \"@chakra-ui/react\"\nimport { ClearingHouse } from \"container/clearingHouse\"\nimport { Side } from \"constant\"\nimport { Trade } from \"container/trade\"\nimport { Transaction } from \"container/transaction\"\nimport { isAddress } from \"ethers/lib/utils\"\nimport { useCallback } from \"react\"\nimport { usePositionSize } from \"./usePositionSize\"\n\nfunction SendTxButton() {\n    const { selectedAmm } = Amm.useContainer()\n    const { slippage, side, collateral, leverage } = Trade.useContainer()\n    const { openPosition } = ClearingHouse.useContainer()\n    const { isLoading: isTxExecuting } = Transaction.useContainer()\n    const { positionSize, dir, isCalculating } = usePositionSize()\n    const ammAddress = selectedAmm?.address || \"\"\n\n    const isDisabled = isTxExecuting || isCalculating || collateral === null || collateral.eq(0)\n\n    const handleOnTrade = useCallback(async () => {\n        if (collateral && isAddress(ammAddress)) {\n            const _positionSize = new Big(positionSize)\n            const _leverage = new Big(leverage)\n            const _slippage = slippage / 100\n            const minPositionSizeReceived: Big =\n                side === Side.Long ? _positionSize.mul(1 - _slippage) : _positionSize.mul(1 + _slippage)\n            openPosition(dir, ammAddress, collateral, _leverage, minPositionSizeReceived)\n        }\n    }, [ammAddress, collateral, leverage, dir, openPosition, positionSize, side, slippage])\n\n    return (\n        <Button\n            size=\"md\"\n            disabled={isDisabled}\n            isLoading={isTxExecuting}\n            isFullWidth\n            colorScheme=\"blue\"\n            onClick={handleOnTrade}\n        >\n            Send Transaction\n        </Button>\n    )\n}\n\nexport default SendTxButton\n","import { Table, Tbody, Td, Tr } from \"@chakra-ui/react\"\n\nimport { Amm } from \"container/amm\"\nimport Big from \"big.js\"\nimport { Side } from \"constant\"\nimport { Trade } from \"container/trade\"\nimport { numberWithCommasUsdc } from \"util/format\"\nimport { useMemo } from \"react\"\nimport { useOpenedPositionSize } from \"./useOpenedPositionSize\"\nimport { usePositionSize } from \"./usePositionSize\"\nimport { useRealtimeAmm } from \"hook/useRealtimeAmm\"\n\nfunction TxInfoTable() {\n    const { selectedAmm } = Amm.useContainer()\n    const { collateral, leverage, side } = Trade.useContainer()\n    const { positionSize, isCalculating } = usePositionSize()\n\n    const ammAddress = selectedAmm?.address || \"\"\n    const ammName = selectedAmm?.baseAssetSymbol || \"\"\n    const { quoteAssetReserve, baseAssetReserve } = useRealtimeAmm(ammAddress, ammName)\n    const { size: openedSize, margin: openedMargin, unrealizedPnl, outputPrice } = useOpenedPositionSize(ammAddress)\n\n    /* prepare data for UI */\n    const entryPrice: Big | null = useMemo(() => {\n        if (!isCalculating && positionSize !== \"\" && collateral !== null) {\n            const b_positionSize = new Big(positionSize)\n            if (b_positionSize.eq(0)) {\n                return null\n            }\n            return collateral.mul(leverage).div(b_positionSize)\n        }\n        return null\n    }, [collateral, isCalculating, leverage, positionSize])\n\n    const fee: Big | null = useMemo(() => {\n        if (collateral !== null && selectedAmm !== null) {\n            const { tollRatio, spreadRatio } = selectedAmm\n            const notional = collateral.mul(leverage)\n            const tollFee = notional.mul(tollRatio)\n            const spreadFee = notional.mul(spreadRatio)\n            return tollFee.add(spreadFee)\n        }\n        return null\n    }, [collateral, leverage, selectedAmm])\n\n    const entryPriceStr = useMemo(() => {\n        if (entryPrice !== null) {\n            return numberWithCommasUsdc(entryPrice)\n        }\n        return \"-\"\n    }, [entryPrice])\n\n    const priceImpactStr = useMemo(() => {\n        if (entryPrice !== null && quoteAssetReserve !== null && baseAssetReserve !== null) {\n            const spotPrice = quoteAssetReserve.div(baseAssetReserve)\n            if (spotPrice.eq(0)) {\n                return \"-\"\n            }\n            return entryPrice.sub(spotPrice).div(spotPrice).mul(100).toFixed(2)\n        }\n        return \"-\"\n    }, [entryPrice, quoteAssetReserve, baseAssetReserve])\n\n    const feeStr = useMemo(() => {\n        if (fee !== null) {\n            return numberWithCommasUsdc(fee)\n        }\n        return \"-\"\n    }, [fee])\n\n    const totalStr = useMemo(() => {\n        /* TODO: positionSize should only be null or Big */\n        if (collateral !== null && fee !== null && positionSize !== \"\") {\n            if (\n                openedMargin !== null &&\n                openedSize !== null &&\n                outputPrice !== null &&\n                unrealizedPnl !== null &&\n                !openedSize.eq(0) &&\n                side !== (openedSize.gt(0) ? Side.Long : Side.Short)\n            ) {\n                const b_positionSize = new Big(positionSize)\n                if (b_positionSize.gt(openedSize.abs())) {\n                    /** case:\n                     * open an \"opposite side\" position\n                     * and the \"open size\" is \"bigger\" than the \"existing position\" size */\n                    /**\n                     * collateralToPay\n                     * = collateral - remainMargin\n                     * = (positionNotionalDiff / leverage) - remainMargin\n                     * = (newPositionNotional - oldPositionNotional) / leverage - remainMargin\n                     * = collateral - (oldPositionNotional / leverage) - remainMargin\n                     */\n                    const remainMargin = openedMargin.add(unrealizedPnl)\n                    const collateralToPay = collateral.sub(outputPrice.div(leverage)).sub(remainMargin)\n                    return numberWithCommasUsdc(fee.add(collateralToPay))\n                } else {\n                    /** case:\n                     * open an \"opposite side\" position\n                     * and the \"open size\" is \"small or equal\" to the \"existing position\" size */\n                    return numberWithCommasUsdc(fee)\n                }\n            } else {\n                /** case:\n                 * no existing position\n                 * or open a \"same side\" position\n                 */\n                return numberWithCommasUsdc(fee.add(collateral))\n            }\n        }\n        return \"-\"\n    }, [collateral, fee, leverage, openedMargin, openedSize, outputPrice, positionSize, side, unrealizedPnl])\n\n    return (\n        <Table size=\"sm\" borderRadius=\"12px\" overflow=\"hidden\" w=\"100%\" variant=\"simple\">\n            <Tbody>\n                <Tr>\n                    <Td>Entry Price</Td>\n                    <Td isNumeric>{entryPriceStr}</Td>\n                </Tr>\n                <Tr>\n                    <Td>Price Impact</Td>\n                    <Td isNumeric>{priceImpactStr}%</Td>\n                </Tr>\n                {/* <Tr>\n                    <Td>Liquidation Price</Td>\n                    <Td isNumeric>47.28</Td>\n                </Tr> */}\n                <Tr>\n                    <Td>Transaction Fee</Td>\n                    <Td isNumeric>{feeStr}</Td>\n                </Tr>\n                <Tr fontWeight=\"bold\">\n                    <Td>Total Cost</Td>\n                    <Td isNumeric>{totalStr}</Td>\n                </Tr>\n            </Tbody>\n        </Table>\n    )\n}\n\nexport default TxInfoTable\n","import { isAddress } from \"@ethersproject/address\"\nimport Big from \"big.js\"\nimport { BIG_ZERO, Dir, PnlCalcOption } from \"constant\"\nimport { Connection } from \"container/connection\"\nimport { Contract } from \"container/contract\"\nimport { useCallback, useEffect, useState } from \"react\"\nimport { decimal2Big } from \"util/format\"\nimport { Contract as MulticallContract } from \"ethers-multicall\"\nimport { big2Decimal } from \"util/format\"\nimport ClearingHouseViewerArtifact from \"@perp/contract/build/contracts/src/ClearingHouseViewer.sol/ClearingHouseViewer.json\"\n\nexport function useOpenedPositionSize(address: string) {\n    const { addressMap, amm } = Contract.useContainer()\n    const { account, xDaiMulticallProvider } = Connection.useContainer()\n\n    const [size, setSize] = useState<Big | null>(null)\n    const [margin, setMargin] = useState<Big | null>(null)\n    const [unrealizedPnl, setUnrealizedPnl] = useState<Big | null>(null)\n    const [outputPrice, setOutputPrice] = useState<Big | null>(null)\n\n    const updatePositionSize = useCallback(async () => {\n        if (\n            xDaiMulticallProvider !== null &&\n            amm !== null &&\n            addressMap !== null &&\n            isAddress(addressMap.ClearingHouseViewer) &&\n            account !== null &&\n            isAddress(address)\n        ) {\n            /* get { size, margin, unrealizedPnl } from clearingHouseViewerContract */\n            const clearingHouseViewerContract = new MulticallContract(\n                addressMap.ClearingHouseViewer,\n                ClearingHouseViewerArtifact.abi,\n            )\n            const data = await xDaiMulticallProvider.all([\n                clearingHouseViewerContract.getPersonalPositionWithFundingPayment(address, account),\n                clearingHouseViewerContract.getUnrealizedPnl(address, account, PnlCalcOption.SpotPrice),\n            ])\n\n            const { size, margin } = data[0]\n            const unrealizedPnl = data[1]\n\n            const b_size = decimal2Big(size)\n\n            let _outputPrice = null\n            if (b_size.eq(0)) {\n                _outputPrice = BIG_ZERO\n            } else {\n                const dir = b_size.gt(0) ? Dir.AddToAmm : Dir.RemoveFromAmm\n                _outputPrice = decimal2Big(await amm.attach(address).getOutputPrice(dir, big2Decimal(b_size.abs())))\n            }\n\n            setSize(b_size)\n            setMargin(decimal2Big(margin))\n            setUnrealizedPnl(decimal2Big(unrealizedPnl))\n            setOutputPrice(_outputPrice)\n        }\n    }, [xDaiMulticallProvider, amm, addressMap, account, address])\n\n    useEffect(() => {\n        updatePositionSize()\n    }, [updatePositionSize])\n\n    return {\n        size,\n        margin,\n        unrealizedPnl,\n        outputPrice,\n    }\n}\n","import { Box, Heading, Text, VStack } from \"@chakra-ui/react\"\nimport SendTxButton from \"./SendTxButton\"\nimport TxInfoTable from \"./TxInfoTable\"\n\nfunction Summary() {\n    return (\n        <>\n            <Heading w=\"full\" size=\"md\">\n                Transaction Summary\n            </Heading>\n            <VStack spacing={2} width=\"full\">\n                <SendTxButton />\n                <Text fontSize=\"sm\" color=\"gray.500\">\n                    Confirm in Metamask\n                </Text>\n            </VStack>\n            <Box width=\"100%\" borderStyle=\"solid\" borderWidth=\"1px\" borderColor=\"gray.200\" borderRadius=\"12px\">\n                <TxInfoTable />\n            </Box>\n        </>\n    )\n}\n\nexport default Summary\n","import { SimpleGrid, VStack, Box } from \"@chakra-ui/react\"\nimport { AdvancedRealTimeChart } from \"react-ts-tradingview-widgets\"\n\nimport Collateral from \"./Collateral\"\nimport Leverage from \"./Leverage\"\nimport MarketSelector from \"./MarketSelector\"\nimport Position from \"./Position\"\nimport React from \"react\"\nimport SideSwitcher from \"./SideSwitcher\"\nimport Slippage from \"./Slippage\"\nimport Summary from \"./Summary\"\n\nfunction Trade() {\n    return (\n        <SimpleGrid columns={[1, null, 2]} spacing={16}>\n            <VStack spacing={6} p={0}>\n                <SideSwitcher />\n                <MarketSelector />\n                <Collateral />\n                <Position />\n                <Leverage />\n                <Slippage />\n            </VStack>\n            <VStack p={0} spacing={6}>\n                <Summary />\n                <Box width=\"100%\" height=\"100%\">\n                    <AdvancedRealTimeChart theme=\"dark\" autosize />\n                </Box>\n            </VStack>\n        </SimpleGrid>\n    )\n}\n\nexport default Trade\n","import { Tab, TabList, TabPanel, TabPanels, Tabs } from \"@chakra-ui/react\"\nimport { useEffect, useState } from \"react\"\n\nimport { Connection } from \"container/connection\"\nimport GetStarted from \"./component/GetStarted\"\nimport Position from \"./component/Position\"\nimport TradeComponent from \"./component/Trade\"\n\nconst Home = () => {\n    // NOTE: Focus the trade tab once wallet is connected.\n    const [tabIndex, setTabIndex] = useState(0)\n    const { account } = Connection.useContainer()\n    useEffect(() => {\n        if (account) {\n            setTabIndex(1)\n        } else {\n            setTabIndex(0)\n        }\n    }, [account])\n\n    return (\n        <>\n            {/* Tabs */}\n            <Tabs size=\"md\" mt={5} index={tabIndex} onChange={index => setTabIndex(index)} variant=\"enclosed\">\n                <TabList>\n                    <Tab>Get Started</Tab>\n                    <Tab>Trade</Tab>\n                    <Tab>Positions</Tab>\n                </TabList>\n                <TabPanels>\n                    <TabPanel py={8} px={3}>\n                        <GetStarted />\n                    </TabPanel>\n                    <TabPanel py={8} px={3}>\n                        <TradeComponent />\n                    </TabPanel>\n                    <TabPanel py={8} px={3}>\n                        <Position />\n                    </TabPanel>\n                </TabPanels>\n            </Tabs>\n        </>\n    )\n}\n\nexport default Home\n","import { useRef, useEffect } from \"react\"\n\nexport function useInterval(callback: () => void, delay: number | null) {\n    const savedCallback = useRef<() => void | null>()\n\n    // Remember the latest callback.\n    useEffect(() => {\n        savedCallback.current = callback\n    })\n\n    // Set up the interval.\n    useEffect(() => {\n        function tick() {\n            if (typeof savedCallback?.current !== \"undefined\") {\n                savedCallback?.current()\n            }\n        }\n\n        if (delay !== null) {\n            const id = setInterval(tick, delay)\n            return () => clearInterval(id)\n        }\n    }, [delay])\n}\n","import {\n    Modal,\n    ModalOverlay,\n    ModalContent,\n    ModalHeader,\n    ModalCloseButton,\n    ModalBody,\n    VStack,\n    Heading,\n    Box,\n    Table,\n    Tbody,\n    Tr,\n    Td,\n    Divider,\n    ModalFooter,\n    Button,\n} from \"@chakra-ui/react\"\nimport { useCallback, useEffect, useMemo, useState } from \"react\"\nimport { Contract as MulticallContract } from \"ethers-multicall\"\nimport { PnlCalcOption } from \"constant/position\"\nimport { ClearingHouse } from \"container/clearingHouse\"\nimport { Trade } from \"container/trade\"\nimport { Transaction } from \"container/transaction\"\nimport { Connection } from \"container/connection\"\nimport { Contract } from \"container/contract\"\nimport { decimal2Big, big2Decimal, numberWithCommasUsdc, bigNum2Big } from \"util/format\"\nimport AmmArtifact from \"@perp/contract/build/contracts/src/Amm.sol/Amm.json\"\nimport ClearingHouseViewerArtifact from \"@perp/contract/build/contracts/src/ClearingHouseViewer.sol/ClearingHouseViewer.json\"\nimport { useInterval } from \"hook/useInterval\"\nimport Big from \"big.js\"\nimport { Dir } from \"constant\"\nimport { Position } from \"container/position\"\n\ninterface ClosePositionInfo {\n    notional: Big\n    size: Big\n    margin: Big\n    unrealizedPnl: Big\n    fee: Big\n}\n\nfunction ClosePositionModal() {\n    const {\n        state: { baseAssetSymbol, quoteAssetSymbol, address, isClosePositionModalOpen },\n        closeClosePositionModal,\n    } = Position.useContainer()\n    const { account, xDaiMulticallProvider } = Connection.useContainer()\n    const { addressMap } = Contract.useContainer()\n    const { closePosition } = ClearingHouse.useContainer()\n    const { isLoading: isTxLoading } = Transaction.useContainer()\n\n    const { slippage } = Trade.useContainer()\n\n    const [closePositionInfo, setClosePositionInfo] = useState<ClosePositionInfo | null>(null)\n\n    const handleOnClick = useCallback(async () => {\n        if (address && closePositionInfo !== null && closePositionInfo.notional && closePositionInfo.size) {\n            const { notional, size } = closePositionInfo\n            const slippageLimit = notional.mul(slippage / 100)\n            const quoteLimit = size.gt(0) ? notional.sub(slippageLimit) : notional.add(slippageLimit)\n            closePosition(address, quoteLimit)\n        }\n    }, [address, closePosition, closePositionInfo, slippage])\n\n    const getClosePositionInfo = useCallback(async () => {\n        if (account && addressMap && address && xDaiMulticallProvider) {\n            /* get { size, margin, unrealizedPnl } from clearingHouseViewerContract */\n            const clearingHouseViewerContract = new MulticallContract(\n                addressMap.ClearingHouseViewer,\n                ClearingHouseViewerArtifact.abi,\n            )\n            const rawClearingHouseViewerData = await xDaiMulticallProvider.all([\n                clearingHouseViewerContract.getPersonalPositionWithFundingPayment(address, account),\n                clearingHouseViewerContract.getUnrealizedPnl(address, account, PnlCalcOption.SpotPrice),\n            ])\n            const size = decimal2Big(rawClearingHouseViewerData[0].size)\n            const margin = decimal2Big(rawClearingHouseViewerData[0].margin)\n            const unrealizedPnl = decimal2Big(rawClearingHouseViewerData[1])\n\n            /* get { notional, tollRatio, spreadRatio } */\n            const ammContract = new MulticallContract(address, AmmArtifact.abi)\n            const dir: Dir = size.gt(0) ? Dir.AddToAmm : Dir.RemoveFromAmm\n            const rawAmmData = await xDaiMulticallProvider.all([\n                ammContract.getOutputPrice(dir, big2Decimal(size.abs())),\n                ammContract.tollRatio(),\n                ammContract.spreadRatio(),\n            ])\n            const [notional, tollRatio, spreadRatio] = rawAmmData\n            const b_tollRatio = bigNum2Big(tollRatio)\n            const b_spreadRatio = bigNum2Big(spreadRatio)\n            const b_notional = decimal2Big(notional)\n\n            /* calculate the toll fee for staker and the spread fee for insurance fund */\n            const tollFee = b_notional.mul(b_tollRatio)\n            const spreadFee = b_notional.mul(b_spreadRatio)\n            const fee = tollFee.add(spreadFee)\n\n            const _closePositionInfo = {\n                notional: b_notional,\n                size,\n                margin,\n                unrealizedPnl,\n                fee,\n            }\n\n            setClosePositionInfo(_closePositionInfo)\n        } else {\n            setClosePositionInfo(null)\n        }\n    }, [account, address, addressMap, xDaiMulticallProvider])\n\n    useEffect(() => {\n        getClosePositionInfo()\n    }, [getClosePositionInfo])\n\n    /**\n     * NOTE: higher frequency of info updating\n     * update trader's position info per 2s\n     */\n    useInterval(getClosePositionInfo, 2000)\n\n    /* prepare data for UI */\n    const exitPriceStr = useMemo(() => {\n        if (closePositionInfo === null) {\n            return \"-\"\n        }\n        const { notional, size } = closePositionInfo\n        if (size.eq(0)) {\n            return \"-\"\n        }\n        return numberWithCommasUsdc(notional.div(size.abs()))\n    }, [closePositionInfo])\n    const pnlStr = useMemo(() => {\n        if (closePositionInfo !== null && closePositionInfo.unrealizedPnl) {\n            return closePositionInfo.unrealizedPnl.toFixed(2)\n        }\n        return \"-\"\n    }, [closePositionInfo])\n    const marginStr = useMemo(() => {\n        if (closePositionInfo !== null && closePositionInfo.margin) {\n            return numberWithCommasUsdc(closePositionInfo.margin)\n        }\n        return \"-\"\n    }, [closePositionInfo])\n    const feeStr = useMemo(() => {\n        if (closePositionInfo !== null && closePositionInfo.fee) {\n            return closePositionInfo.fee.toFixed(2)\n        }\n        return \"-\"\n    }, [closePositionInfo])\n    const totalStr = useMemo(() => {\n        if (\n            closePositionInfo !== null &&\n            closePositionInfo.margin &&\n            closePositionInfo.unrealizedPnl &&\n            closePositionInfo.fee\n        ) {\n            const { margin, unrealizedPnl, fee } = closePositionInfo\n            return numberWithCommasUsdc(margin.add(unrealizedPnl).sub(fee))\n        }\n        return \"-\"\n    }, [closePositionInfo])\n\n    return useMemo(\n        () => (\n            <Modal\n                isCentered\n                motionPreset=\"slideInBottom\"\n                isOpen={isClosePositionModalOpen}\n                onClose={closeClosePositionModal}\n            >\n                <ModalOverlay />\n                <ModalContent borderRadius=\"2xl\" pb={3}>\n                    <ModalHeader>Close Position ({baseAssetSymbol})</ModalHeader>\n                    <ModalCloseButton />\n                    <ModalBody>\n                        <VStack spacing={5}>\n                            <Heading w=\"full\" size=\"sm\">\n                                Transaction Summary\n                            </Heading>\n                            <Box\n                                width=\"100%\"\n                                borderStyle=\"solid\"\n                                borderWidth=\"1px\"\n                                borderColor=\"gray.200\"\n                                borderRadius=\"12px\"\n                            >\n                                <Table size=\"sm\" borderRadius=\"12px\" overflow=\"hidden\" w=\"100%\" variant=\"simple\">\n                                    <Tbody>\n                                        <Tr fontWeight=\"bold\">\n                                            <Td>Exit Price</Td>\n                                            <Td isNumeric>\n                                                {exitPriceStr} {quoteAssetSymbol}\n                                            </Td>\n                                        </Tr>\n                                        <Tr>\n                                            <Td>Margin</Td>\n                                            <Td isNumeric>\n                                                {marginStr} {quoteAssetSymbol}\n                                            </Td>\n                                        </Tr>\n                                        <Tr>\n                                            <Td>PnL</Td>\n                                            <Td isNumeric>\n                                                {pnlStr} {quoteAssetSymbol}\n                                            </Td>\n                                        </Tr>\n                                        <Tr>\n                                            <Td>Transaction Fee</Td>\n                                            <Td isNumeric>\n                                                {feeStr} {quoteAssetSymbol}\n                                            </Td>\n                                        </Tr>\n                                        <Tr>\n                                            <Td>Total Value Received</Td>\n                                            <Td isNumeric>\n                                                {totalStr} {quoteAssetSymbol}\n                                            </Td>\n                                        </Tr>\n                                    </Tbody>\n                                </Table>\n                            </Box>\n                            <Divider />\n                        </VStack>\n                    </ModalBody>\n                    <ModalFooter>\n                        <Button\n                            isFullWidth\n                            colorScheme=\"blue\"\n                            size=\"md\"\n                            onClick={handleOnClick}\n                            isLoading={isTxLoading}\n                        >\n                            Close Position\n                        </Button>\n                    </ModalFooter>\n                </ModalContent>\n            </Modal>\n        ),\n        [\n            baseAssetSymbol,\n            quoteAssetSymbol,\n            closeClosePositionModal,\n            exitPriceStr,\n            feeStr,\n            handleOnClick,\n            isClosePositionModalOpen,\n            isTxLoading,\n            marginStr,\n            pnlStr,\n            totalStr,\n        ],\n    )\n}\n\nexport default ClosePositionModal\n","import { createContainer } from \"unstated-next\"\nimport { MarginDir } from \"constant\"\nimport { useState } from \"react\"\nimport Big from \"big.js\"\n\nexport const Margin = createContainer(useMargin)\n\nfunction useMargin() {\n    const [marginDir, setMarginDir] = useState<MarginDir>(MarginDir.Add)\n    const [margin, setMargin] = useState<Big | null>(null)\n\n    return {\n        marginDir,\n        setMarginDir,\n        margin,\n        setMargin,\n    }\n}\n","import { Button } from \"@chakra-ui/react\"\nimport { isAddress } from \"@ethersproject/address\"\nimport { MarginDir } from \"constant\"\nimport { ClearingHouse } from \"container/clearingHouse\"\nimport { Position } from \"container/position\"\nimport { Transaction } from \"container/transaction\"\nimport { useCallback } from \"react\"\nimport { big2BigNum } from \"util/format\"\nimport { Margin } from \"./container/margin\"\n\nfunction AdjustButton() {\n    const {\n        state: { address },\n    } = Position.useContainer()\n    const { addMargin, removeMargin } = ClearingHouse.useContainer()\n    const { marginDir, margin } = Margin.useContainer()\n    const { isLoading: isTxLoading } = Transaction.useContainer()\n\n    const handleOnClick = useCallback(() => {\n        if (!isAddress(address) || margin === null) {\n            return\n        }\n        if (marginDir === MarginDir.Add) {\n            addMargin(address, big2BigNum(margin))\n        } else if (marginDir === MarginDir.Reduce) {\n            removeMargin(address, big2BigNum(margin))\n        }\n    }, [addMargin, address, margin, marginDir, removeMargin])\n\n    return (\n        <Button isFullWidth colorScheme=\"blue\" size=\"md\" onClick={handleOnClick} isLoading={isTxLoading}>\n            Adjust\n        </Button>\n    )\n}\n\nexport default AdjustButton\n","import { ButtonGroup, Button } from \"@chakra-ui/react\"\nimport { MarginDir } from \"constant\"\nimport { Margin } from \"./container/margin\"\n\nfunction MarginDirSwitcher() {\n    const { marginDir, setMarginDir } = Margin.useContainer()\n\n    return (\n        <ButtonGroup w=\"100%\" isAttached variant=\"solid\">\n            <Button\n                size=\"sm\"\n                isFullWidth\n                onClick={() => setMarginDir(MarginDir.Add)}\n                colorScheme={marginDir === MarginDir.Add ? \"green\" : \"gray\"}\n                mr=\"-px\"\n                variant=\"solid\"\n            >\n                Add\n            </Button>\n            <Button\n                size=\"sm\"\n                isFullWidth\n                onClick={() => setMarginDir(MarginDir.Reduce)}\n                colorScheme={marginDir === MarginDir.Reduce ? \"red\" : \"gray\"}\n            >\n                Reduce\n            </Button>\n        </ButtonGroup>\n    )\n}\n\nexport default MarginDirSwitcher\n","import {\n    Box,\n    Button,\n    FormControl,\n    FormHelperText,\n    HStack,\n    InputGroup,\n    InputRightElement,\n    NumberInput,\n    NumberInputField,\n    Text,\n} from \"@chakra-ui/react\"\nimport { MarginDir, USDC_DECIMAL_DIGITS, USDC_PRECISION } from \"constant\"\nimport { formatInput, numberWithCommasUsdc } from \"util/format\"\nimport { useCallback, useEffect, useMemo, useState } from \"react\"\n\nimport Big from \"big.js\"\nimport { CHAIN_ID } from \"connector\"\nimport { Contract } from \"container/contract\"\nimport { Margin } from \"./container/margin\"\nimport { Position } from \"container/position\"\nimport SmallFormLabel from \"component/SmallFormLabel\"\nimport { useDebounce } from \"hook/useDebounce\"\nimport { useToken } from \"hook/useToken\"\n\nfunction MarginInput() {\n    const {\n        state: { quoteAssetSymbol },\n    } = Position.useContainer()\n    const { addressMap } = Contract.useContainer()\n    const { margin, setMargin, marginDir } = Margin.useContainer()\n    const { balance } = useToken(addressMap ? addressMap.XDaiUsdc : \"\", USDC_DECIMAL_DIGITS, CHAIN_ID.XDai)\n    const [_margin, _setMargin] = useState<string>(\"\")\n    const debouncedMargin = useDebounce({ value: _margin, delay: 500 })\n\n    const handleOnInput = useCallback(e => {\n        const value = e.target.value\n        if (value >= 0) {\n            const formattedValue = formatInput(value, USDC_PRECISION)\n            _setMargin(formattedValue)\n        }\n    }, [])\n\n    const handleOnClick = useCallback(() => {\n        /* make sure the precision will be controlled */\n        const fixedBalance = balance.toFixed(2)\n        _setMargin(fixedBalance)\n    }, [balance])\n\n    useEffect(() => {\n        /* reset margin to null */\n        if (debouncedMargin === \"\") {\n            setMargin(null)\n            return\n        }\n        /* detect if the value is different */\n        const b_debouncedMargin = new Big(debouncedMargin)\n        if (!margin?.eq(b_debouncedMargin)) {\n            setMargin(b_debouncedMargin)\n        }\n    }, [debouncedMargin, margin, setMargin])\n\n    return useMemo(\n        () => (\n            <FormControl id=\"margin\">\n                <SmallFormLabel>Margin</SmallFormLabel>\n                <NumberInput value={_margin} onInput={handleOnInput}>\n                    <InputGroup>\n                        <NumberInputField />\n                        <InputRightElement w=\"54px\">\n                            <Text\n                                w=\"100%\"\n                                textAlign=\"center\"\n                                fontWeight=\"bold\"\n                                fontSize=\"xs\"\n                                color=\"blue.500\"\n                                textTransform=\"uppercase\"\n                            >\n                                {quoteAssetSymbol}\n                            </Text>\n                        </InputRightElement>\n                    </InputGroup>\n                </NumberInput>\n                {marginDir === MarginDir.Add && (\n                    <FormHelperText>\n                        <HStack w=\"100%\" justifyContent=\"space-between\" alignItems=\"flex-start\">\n                            <Box>My Balance : {numberWithCommasUsdc(balance)}</Box>\n\n                            <Button borderRadius=\"xl\" size=\"xs\" variant=\"outline\" onClick={handleOnClick}>\n                                MAX\n                            </Button>\n                        </HStack>\n                    </FormHelperText>\n                )}\n            </FormControl>\n        ),\n        [_margin, balance, handleOnClick, handleOnInput, marginDir, quoteAssetSymbol],\n    )\n}\n\nexport default MarginInput\n","import { Heading, Box, Table, Tbody, Tr, Td } from \"@chakra-ui/react\"\nimport { Contract as MulticallContract } from \"ethers-multicall\"\nimport { Connection } from \"container/connection\"\nimport { Contract } from \"container/contract\"\nimport { Position } from \"container/position\"\nimport { useInterval } from \"hook/useInterval\"\nimport { useCallback, useEffect, useMemo, useState } from \"react\"\nimport ClearingHouseViewerArtifact from \"@perp/contract/build/contracts/src/ClearingHouseViewer.sol/ClearingHouseViewer.json\"\nimport { decimal2Big, numberWithCommasUsdc } from \"util/format\"\nimport { Margin } from \"./container/margin\"\nimport { MarginDir } from \"constant\"\nimport Big from \"big.js\"\n\ninterface MarginInfo {\n    margin: Big\n    marginRatio: Big\n    openNotional: Big\n}\n\nfunction UpdatedInfo() {\n    const {\n        state: { address, quoteAssetSymbol },\n    } = Position.useContainer()\n    const { account, xDaiMulticallProvider } = Connection.useContainer()\n    const { addressMap } = Contract.useContainer()\n    const { marginDir: adjustMarginDir, margin: adjustMargin } = Margin.useContainer()\n    const [marginInfo, setMarginInfo] = useState<MarginInfo | null>(null)\n\n    const getMarginInfo = useCallback(async () => {\n        if (account && addressMap && address && xDaiMulticallProvider) {\n            /* get { margin, openNotional } from clearingHouseViewerContract */\n            const clearingHouseViewerContract = new MulticallContract(\n                addressMap.ClearingHouseViewer,\n                ClearingHouseViewerArtifact.abi,\n            )\n            const rawData = await xDaiMulticallProvider.all([\n                clearingHouseViewerContract.getPersonalPositionWithFundingPayment(address, account),\n                clearingHouseViewerContract.getMarginRatio(address, account),\n            ])\n            const margin = decimal2Big(rawData[0].margin)\n            const openNotional = decimal2Big(rawData[0].openNotional)\n            const marginRatio = decimal2Big(rawData[1])\n            const _marginInfo = {\n                margin,\n                marginRatio,\n                openNotional,\n            }\n            setMarginInfo(_marginInfo)\n        } else {\n            setMarginInfo(null)\n        }\n    }, [account, address, addressMap, xDaiMulticallProvider])\n\n    useEffect(() => {\n        getMarginInfo()\n    }, [getMarginInfo])\n\n    /**\n     * NOTE: higher frequency of info updating\n     * update trader's position info per 2s\n     */\n    useInterval(getMarginInfo, 2000)\n\n    /* prepare data for UI */\n    const marginStr = useMemo(() => {\n        if (adjustMargin !== null && marginInfo !== null && marginInfo.margin) {\n            if (adjustMarginDir === MarginDir.Add) {\n                return numberWithCommasUsdc(marginInfo.margin.add(adjustMargin))\n            } else {\n                return numberWithCommasUsdc(marginInfo.margin.sub(adjustMargin))\n            }\n        }\n        return \"-\"\n    }, [adjustMargin, adjustMarginDir, marginInfo])\n    const marginRatioStr = useMemo(() => {\n        if (adjustMargin !== null && marginInfo !== null && marginInfo.marginRatio && marginInfo.openNotional) {\n            const { marginRatio, openNotional } = marginInfo\n            if (openNotional.eq(0)) {\n                return \"-\"\n            }\n            if (adjustMarginDir === MarginDir.Add) {\n                return marginRatio.mul(openNotional).add(adjustMargin).div(openNotional).mul(100).toFixed(1)\n            } else {\n                return marginRatio.mul(openNotional).sub(adjustMargin).div(openNotional).mul(100).toFixed(1)\n            }\n        }\n        return \"-\"\n    }, [adjustMargin, adjustMarginDir, marginInfo])\n    const leverageStr = useMemo(() => {\n        if (adjustMargin !== null && marginInfo !== null && marginInfo.marginRatio && marginInfo.openNotional) {\n            const { marginRatio, openNotional } = marginInfo\n            if (openNotional.eq(0)) {\n                return \"-\"\n            }\n            let newMarginRatio = null\n            if (adjustMarginDir === MarginDir.Add) {\n                newMarginRatio = marginRatio.mul(openNotional).add(adjustMargin).div(openNotional)\n            } else {\n                newMarginRatio = marginRatio.mul(openNotional).sub(adjustMargin).div(openNotional)\n            }\n            if (newMarginRatio.eq(0)) {\n                return \"-\"\n            }\n            return new Big(1).div(newMarginRatio).toFixed(2)\n        }\n        return \"-\"\n    }, [adjustMargin, adjustMarginDir, marginInfo])\n\n    return (\n        <>\n            <Heading w=\"full\" size=\"sm\">\n                Updated Position\n            </Heading>\n            <Box width=\"100%\" borderStyle=\"solid\" borderWidth=\"1px\" borderColor=\"gray.200\" borderRadius=\"12px\">\n                <Table size=\"sm\" borderRadius=\"12px\" overflow=\"hidden\" w=\"100%\" variant=\"simple\">\n                    <Tbody>\n                        <Tr>\n                            <Td>Margin</Td>\n                            <Td isNumeric>\n                                {marginStr} {quoteAssetSymbol}\n                            </Td>\n                        </Tr>\n                        <Tr>\n                            <Td>Margin Ratio</Td>\n                            <Td isNumeric>{marginRatioStr} %</Td>\n                        </Tr>\n                        <Tr>\n                            <Td>Leverage</Td>\n                            <Td isNumeric>{leverageStr} x</Td>\n                        </Tr>\n                    </Tbody>\n                </Table>\n            </Box>\n        </>\n    )\n}\n\nexport default UpdatedInfo\n","import {\n    Divider,\n    Modal,\n    ModalBody,\n    ModalCloseButton,\n    ModalContent,\n    ModalFooter,\n    ModalHeader,\n    ModalOverlay,\n    VStack,\n} from \"@chakra-ui/react\"\nimport AdjustButton from \"./AdjustButton\"\nimport MarginDirSwitcher from \"./MarginDirSwitcher\"\nimport MarginInput from \"./MarginInput\"\nimport UpdatedInfo from \"./UpdatedInfo\"\nimport { Margin } from \"./container/margin\"\nimport { useMemo } from \"react\"\nimport { Position } from \"container/position\"\n\nfunction AdjustMarginModal() {\n    const {\n        state: { isAdjustMarginModalOpen },\n        closeAdjustMarginModal,\n    } = Position.useContainer()\n\n    return useMemo(\n        () => (\n            <Margin.Provider>\n                <Modal\n                    isCentered\n                    motionPreset=\"slideInBottom\"\n                    isOpen={isAdjustMarginModalOpen}\n                    onClose={closeAdjustMarginModal}\n                >\n                    <ModalOverlay />\n                    <ModalContent borderRadius=\"2xl\" pb={3}>\n                        <ModalHeader>Adjust Margin</ModalHeader>\n                        <ModalCloseButton />\n                        <ModalBody>\n                            <VStack spacing={5}>\n                                <MarginDirSwitcher />\n                                <MarginInput />\n                                <Divider />\n                                <UpdatedInfo />\n                                <Divider />\n                            </VStack>\n                        </ModalBody>\n                        <ModalFooter>\n                            <AdjustButton />\n                        </ModalFooter>\n                    </ModalContent>\n                </Modal>\n            </Margin.Provider>\n        ),\n        [closeAdjustMarginModal, isAdjustMarginModalOpen],\n    )\n}\n\nexport default AdjustMarginModal\n","import { useLocalStorage } from \"hook/useLocalStorage\"\nimport { useState, useEffect } from \"react\"\nimport { logger } from \"lib/bugsnag/logger\"\nimport { STORAGE_KEY } from \"constant/storage\"\n\nconst { IS_DEBUG_MODE } = STORAGE_KEY\n\nexport function useIsBlockedRegion() {\n    const [isBlockedRegion, setIsBlockedRegion] = useState(false)\n    const [isDebugMode] = useLocalStorage(IS_DEBUG_MODE.name, IS_DEBUG_MODE.defaultValue)\n\n    useEffect(() => {\n        if (isDebugMode !== \"true\") {\n            const blockedList = process.env.REACT_APP_BLOCKED_REGION?.split(\",\") || []\n            if (blockedList.length === 0) {\n                return\n            }\n            try {\n                fetch(\"https://www.cloudflare.com/cdn-cgi/trace\")\n                    .then(res => res.text())\n                    .then(text => {\n                        const ret: Record<string, string> = {}\n                        text.split(\"\\n\").forEach(line => {\n                            const [key, value] = line.split(\"=\")\n                            ret[key] = value\n                        })\n                        const isBlocked = blockedList.some(location => location === ret.loc)\n                        setIsBlockedRegion(isBlocked)\n                    })\n            } catch (err) {\n                logger.error(err)\n            }\n        }\n    }, [isDebugMode, setIsBlockedRegion])\n\n    return isBlockedRegion\n}\n","import { Modal, ModalBody, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Text } from \"@chakra-ui/react\"\nimport { ExternalLink } from \"component/ExternalLink\"\nimport { useIsBlockedRegion } from \"./useIsBlockedRegion\"\n\nfunction BlockedRegionModal() {\n    const isBlockedRegion = useIsBlockedRegion()\n    return (\n        <Modal\n            scrollBehavior=\"inside\"\n            closeOnEsc={false}\n            closeOnOverlayClick={false}\n            isCentered\n            isOpen={isBlockedRegion}\n            onClose={() => {}}\n        >\n            <ModalOverlay />\n            <ModalContent>\n                <ModalHeader>Service Not Available in Your Region</ModalHeader>\n                <ModalBody>\n                    <Text>\n                        Sorry! For compliance reasons, this service is not accessible in your area. Use of VPN, Tor,\n                        proxies or other means to circumvent this restriction is a violation of our Terms of Service.\n                    </Text>\n                </ModalBody>\n                <ModalFooter justifyContent=\"flex-start\">\n                    For details, please see our&nbsp;\n                    <ExternalLink color=\"blue.500\" href=\"https://docs.perp.fi/library/terms-of-service\" isExternal>\n                        Terms of Service.\n                    </ExternalLink>\n                </ModalFooter>\n            </ModalContent>\n        </Modal>\n    )\n}\n\nexport default BlockedRegionModal\n","import {\n    Modal,\n    ModalOverlay,\n    ModalContent,\n    ModalHeader,\n    ModalBody,\n    Checkbox,\n    ModalFooter,\n    Button,\n    Text,\n} from \"@chakra-ui/react\"\nimport { ExternalLink } from \"component/ExternalLink\"\nimport { useLocalStorage } from \"hook/useLocalStorage\"\nimport { useCallback, useState } from \"react\"\nimport { STORAGE_KEY } from \"constant\"\n\nconst { IS_TOS_AGREED } = STORAGE_KEY\n\nfunction UserAgreementModal() {\n    const [isRead, setIsRead] = useState(false)\n    const [isTosAgreed, setIsTosAgreed] = useLocalStorage(IS_TOS_AGREED.name, IS_TOS_AGREED.defaultValue)\n\n    const handleOnCheck = useCallback(() => {\n        setIsRead(!isRead)\n    }, [isRead])\n\n    const handleOnClick = useCallback(() => {\n        setIsTosAgreed(\"true\")\n    }, [setIsTosAgreed])\n\n    return (\n        <Modal\n            scrollBehavior=\"inside\"\n            closeOnEsc={false}\n            closeOnOverlayClick={false}\n            isCentered\n            isOpen={isTosAgreed === \"false\"}\n            onClose={() => {}}\n        >\n            <ModalOverlay />\n            <ModalContent>\n                <ModalHeader>Welcome to PERP Lite</ModalHeader>\n                <ModalBody>\n                    <Text>\n                        Perpetual Protocol is a decentralized perpetual contract protocol with virtual AMMs to provide\n                        guaranteed liquidity. Please visit our\n                        <ExternalLink\n                            color=\"blue.500\"\n                            href=\"https://medium.com/@perpetualprotocol/a-deep-dive-into-our-virtual-amm-vamm-40345c522eeb\"\n                            isExternal\n                        >\n                            &nbsp;Docs&nbsp;\n                        </ExternalLink>\n                        to know more.\n                    </Text>\n                    <br />\n                    <Text>\n                        This is <strong>BETA</strong> Software — use at your own risk.\n                    </Text>\n                    <Checkbox size=\"md\" colorScheme=\"green\" onChange={handleOnCheck}>\n                        I have read and agreed to\n                        <ExternalLink color=\"blue.500\" href=\"https://docs.perp.fi/library/terms-of-service\" isExternal>\n                            &nbsp;Terms of Service&nbsp;\n                        </ExternalLink>\n                    </Checkbox>\n                </ModalBody>\n                <ModalFooter>\n                    <Button colorScheme=\"blue\" mr={3} onClick={handleOnClick} isDisabled={!isRead}>\n                        START\n                    </Button>\n                </ModalFooter>\n            </ModalContent>\n        </Modal>\n    )\n}\n\nexport default UserAgreementModal\n","import WalletListModal from \"component/WalletModal\"\nimport { Route, Switch } from \"react-router-dom\"\nimport Header from \"./component/Header\"\nimport Home from \"./page/Home\"\nimport \"focus-visible/dist/focus-visible\"\nimport { Container, Divider } from \"@chakra-ui/react\"\nimport ClosePositionModal from \"component/ClosePositionModal\"\nimport AdjustMarginModal from \"component/AdjustMarginModal\"\nimport BlockedRegionModal from \"component/BlockedRegionModal\"\nimport UserAgreementModal from \"component/UserAgreementModal\"\n\nexport const App = () => (\n    <Container maxW=\"container.lg\" pb={20} px={6}>\n        <Header />\n        <Divider />\n        <Switch>\n            <Route path=\"/\">\n                <Home />\n            </Route>\n        </Switch>\n        <WalletListModal />\n        <ClosePositionModal />\n        <AdjustMarginModal />\n        <UserAgreementModal />\n        {/* NOTE: BlockedRegionModal should be in the last one */}\n        <BlockedRegionModal />\n    </Container>\n)\n","import React from \"react\"\nimport { Global } from \"@emotion/react\"\n\nexport const Fonts = () => (\n    <Global\n        styles={`\n            @font-face {\n                font-family: 'CamberMedium';\n                font-style: normal;\n                font-weight: normal;\n                src: url('font/Ca1000-Md.woff') format('woff');\n                text-rendering: optimizeLegibility;\n            }\n\n            @font-face {\n                font-family: 'CamberBold';\n                font-style: normal;\n                font-weight: normal;\n                src: url('font/Ca1000-Bd.woff') format('woff');\n                text-rendering: optimizeLegibility;\n            }\n      `}\n    />\n)\n","import { Web3Provider } from \"@ethersproject/providers\"\n\nexport function getLibrary(provider: any): Web3Provider {\n    const library = new Web3Provider(provider, \"any\")\n    library.pollingInterval = 15000\n    return library\n}\n","import React, { ReactNode } from \"react\"\n\nimport { Web3ReactProvider } from \"@web3-react/core\"\nimport { getLibrary } from \"../../util/getLibrary\"\nimport { useInactiveListener } from \"../../hook/useActiveWeb3React\"\n\ninterface ProviderProps {\n    children: ReactNode | JSX.Element\n}\n\nfunction Web3ReactManager({ children }: ProviderProps) {\n    // NOTE: try to eagerly connect to an injected provider, if it exists and has granted access already.\n    // const triedEager = useEagerConnect()\n\n    // NOTE: when there's no account connected, react to logins (broadly speaking) on the injected provider, if it exists\n    // useInactiveListener(!triedEager)\n    useInactiveListener()\n\n    return <>{children}</>\n}\n\nexport function Web3Provider({ children }: ProviderProps) {\n    return (\n        <Web3ReactProvider getLibrary={getLibrary}>\n            <Web3ReactManager>{children}</Web3ReactManager>\n        </Web3ReactProvider>\n    )\n}\n","import { useEffect, useState } from \"react\"\n\nimport { injected } from \"../connector\"\nimport { logger } from \"lib/bugsnag/logger\"\nimport { useWeb3React as useWeb3ReactCore } from \"@web3-react/core\"\n\nexport function useEagerConnect() {\n    const { activate, active } = useWeb3ReactCore() // specifically using useWeb3ReactCore because of what this hook does\n    const [tried, setTried] = useState(false)\n\n    useEffect(() => {\n        injected.isAuthorized().then(isAuthorized => {\n            if (isAuthorized) {\n                activate(injected, undefined, true).catch(() => {\n                    setTried(true)\n                })\n            } else {\n                setTried(true)\n            }\n        })\n    }, [activate]) // intentionally only running on mount (make sure it's only mounted once :))\n\n    // if the connection worked, wait until we get confirmation of that to flip the flag\n    useEffect(() => {\n        if (active) {\n            setTried(true)\n        }\n    }, [active])\n\n    return tried\n}\n\n/**\n * Used for network and injected -\n * logs user in and out after checking what network they are on.\n */\nexport function useInactiveListener(suppress = false) {\n    const { active, error, activate } = useWeb3ReactCore() // specifically using useWeb3React because of what this hook does\n\n    useEffect(() => {\n        const { ethereum } = window\n\n        if (ethereum && ethereum.on && !active && !error && !suppress) {\n            const handleConnect = () => {\n                logger.info(\"connect...\")\n            }\n\n            const handleChainChanged = () => {\n                logger.info(\"chain changed...\")\n            }\n\n            const handleAccountsChanged = (accounts: string[]) => {\n                if (accounts.length > 0) {\n                    logger.info(\"account changed...\")\n                }\n            }\n\n            ethereum.on(\"connect\", handleConnect)\n            ethereum.on(\"chainChanged\", handleChainChanged)\n            ethereum.on(\"accountsChanged\", handleAccountsChanged)\n\n            return () => {\n                if (ethereum.removeListener) {\n                    ethereum.removeListener(\"connect\", handleConnect)\n                    ethereum.removeListener(\"chainChanged\", handleChainChanged)\n                    ethereum.removeListener(\"accountsChanged\", handleAccountsChanged)\n                }\n            }\n        }\n        return undefined\n    }, [active, error, suppress, activate])\n}\n","import { ReportHandler } from \"web-vitals\"\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry)\n            getFID(onPerfEntry)\n            getFCP(onPerfEntry)\n            getLCP(onPerfEntry)\n            getTTFB(onPerfEntry)\n        })\n    }\n}\n\nexport default reportWebVitals\n","import { track } from \"./base\"\n\n// NOTE: Unused for now.\n// interface UITrackPayload {\n//     path: string\n//     component: string\n//     [key: string]: string | number\n// }\n\nenum EventType {\n    Contract = \"contract\",\n    UI = \"ui\",\n}\n\nfunction contractTrack(funcName: string, args: any[]) {\n    track(funcName, { args, type: EventType.Contract })\n}\n\n// NOTE: Unused for now.\n// function uiTrack(funcName: string, payload: UITrackPayload) {\n//     track(funcName, { ...payload, type: EventType.UI })\n// }\n\n// NOTE: Unused for now.\n// function uiTrackLink(element: HTMLElement, funcName: string, payload: UITrackPayload) {\n//     trackLink(element, funcName, { ...payload, type: EventType.UI })\n// }\n\n// track meta transaction\nexport function trackSendTxToFuncRequest(funcName: string, args: any[]) {\n    contractTrack(`${funcName} - Transaction Requested`, args)\n}\nexport function trackSendTxToFuncSent(funcName: string, args: any[]) {\n    contractTrack(`${funcName} - Transaction Sent`, args)\n}\n","import { extendTheme } from \"@chakra-ui/react\"\nimport config from \"./config\"\nimport colors from \"./colors\"\nimport styles from \"./styles\"\nimport fonts from \"./fonts\"\nimport components from \"./components\"\nimport radii from \"./radii\"\n\nconst overrides = {\n    config,\n    colors,\n    styles,\n    fonts,\n    components,\n    radii,\n}\n\nexport default extendTheme(overrides)\n","import { ColorMode } from \"@chakra-ui/react\"\n\nconst config = {\n    initialColorMode: \"dark\" as ColorMode,\n    useSystemColorMode: false,\n}\n\nexport default config\n","const colors = {\n    red: {\n        500: \"rgba(229,62,62,1)\",\n        600: \"rgba(215,42,42,1)\",\n        700: \"rgba(178,45,45,1)\",\n        800: \"rgba(143,46,46,1)\",\n        900: \"rgba(111,44,44,1)\",\n        400: \"rgba(234,98,98,1)\",\n        300: \"rgba(239,135,135,1)\",\n        200: \"rgba(244,171,171,1)\",\n        100: \"rgba(249,207,207,1)\",\n        50: \"rgba(253,243,243,1)\",\n    },\n    gray: {\n        500: \"rgba(123,130,141,1)\",\n        600: \"rgba(95,100,108,1)\",\n        700: \"rgba(67,70,74,1)\",\n        800: \"rgba(38,40,42,1)\",\n        900: \"rgba(9,9,10,1)\",\n        400: \"rgba(145,153,167,1)\",\n        300: \"rgba(169,177,191,1)\",\n        200: \"rgba(194,201,213,1)\",\n        100: \"rgba(221,226,234,1)\",\n        50: \"rgba(250,251,252,1)\",\n    },\n    green: {\n        500: \"rgba(56,161,105,1)\",\n        600: \"rgba(50,133,89,1)\",\n        700: \"rgba(43,107,73,1)\",\n        800: \"rgba(35,81,57,1)\",\n        900: \"rgba(26,56,40,1)\",\n        400: \"rgba(64,200,127,1)\",\n        300: \"rgba(94,217,151,1)\",\n        200: \"rgba(127,231,175,1)\",\n        100: \"rgba(163,242,200,1)\",\n        50: \"rgba(202,250,224,1)\",\n    },\n    teal: {\n        500: \"rgba(49,151,149,1)\",\n        600: \"rgba(52,130,129,1)\",\n        700: \"rgba(53,111,110,1)\",\n        800: \"rgba(54,94,93,1)\",\n        900: \"rgba(52,77,77,1)\",\n        400: \"rgba(55,205,202,1)\",\n        300: \"rgba(95,225,223,1)\",\n        200: \"rgba(140,240,238,1)\",\n        100: \"rgba(190,250,249,1)\",\n        50: \"rgba(246,255,255,1)\",\n    },\n    perpetual: {\n        500: \"rgba(0,181,216,1)\",\n        600: \"rgba(12,150,177,1)\",\n        700: \"rgba(20,122,142,1)\",\n        800: \"rgba(25,96,110,1)\",\n        900: \"rgba(27,72,81,1)\",\n        400: \"rgba(8,215,255,1)\",\n        300: \"rgba(54,222,255,1)\",\n        200: \"rgba(101,230,255,1)\",\n        100: \"rgba(147,238,255,1)\",\n        50: \"rgba(194,245,255,1)\",\n    },\n    orange: {\n        500: \"rgba(255,149,0,1)\",\n        400: \"rgba(255,169,49,1)\",\n        300: \"rgba(255,190,98,1)\",\n        200: \"rgba(255,210,147,1)\",\n        100: \"rgba(255,230,196,1)\",\n        600: \"rgba(212,125,3,1)\",\n        700: \"rgba(170,101,4,1)\",\n        800: \"rgba(129,78,5,1)\",\n        900: \"rgba(90,54,5,1)\",\n        50: \"rgba(255,251,245,1)\",\n    },\n    logo: {\n        main: \"rgba(194,201,213,1)\",\n        sub: \"rgba(250,251,252,1)\",\n        accent: \"rgba(221,226,234,1)\",\n        textMain: \"rgba(250,251,252,1)\",\n        textSub: \"rgba(194,201,213,1)\",\n    },\n}\n\nexport default colors\n","const styles = {\n    global: (props: any) => ({\n        \".markdown\": {\n            h1: {\n                fontSize: \"4xl\",\n                fontFamily: \"heading\",\n                fontWeight: \"bold\",\n                mb: 2,\n                letterSpacing: \"tight\",\n            },\n            h2: {\n                fontSize: \"2xl\",\n                fontFamily: \"heading\",\n                fontWeight: \"bold\",\n                mb: 2,\n                letterSpacing: \"tight\",\n            },\n            h3: {\n                fontSize: \"xl\",\n                fontFamily: \"heading\",\n                fontWeight: \"bold\",\n                mb: 2,\n                letterSpacing: \"tight\",\n            },\n            h4: {\n                fontSize: \"lg\",\n                fontFamily: \"heading\",\n                fontWeight: \"bold\",\n                mb: 2,\n                letterSpacing: \"tight\",\n            },\n            h5: {\n                fontSize: \"md\",\n                fontFamily: \"heading\",\n                fontWeight: \"bold\",\n                mb: 2,\n                letterSpacing: \"tight\",\n            },\n            p: {\n                fontSize: \"md\",\n                lineHeight: \"1.4\",\n                mb: 2,\n            },\n            a: {\n                color: props.colorMode === \"dark\" ? \"cyan.100\" : \"cyan.600\",\n                textDecoration: \"underline\",\n            },\n            code: {\n                fontFamily: \"mono\",\n                fontSize: \"sm\",\n                fontWeight: \"bold\",\n                opacity: 0.75,\n            },\n            li: {\n                ml: \"2rem\",\n            },\n            \"ol, ul\": {\n                mt: 4,\n            },\n        },\n    }),\n}\n\nexport default styles\n","const fonts = {\n    heading: \"system-ui, sans-serif\",\n    subHeading: \"system-ui, sans-serif\",\n    body: \"system-ui, sans-serif\",\n    mono: \"Menlo, monospace\",\n}\n\nexport default fonts\n","const components = {\n    Button: {\n        sizes: {\n            lg: {\n                borderRadius: \"xl\",\n            },\n            md: {\n                borderRadius: \"xl\",\n            },\n            sm: {\n                borderRadius: \"2xl\",\n            },\n            xs: {\n                borderRadius: \"2xl\",\n            },\n        },\n    },\n    Heading: {\n        sizes: {\n            lg: {\n                fontFamily: \"subHeading\",\n                letterSpacing: \"tight\",\n            },\n            md: {\n                fontFamily: \"subHeading\",\n                letterSpacing: \"tight\",\n            },\n            sm: {\n                fontFamily: \"subHeading\",\n                letterSpacing: \"tighter\",\n            },\n            xs: {\n                fontFamily: \"subHeading\",\n                letterSpacing: \"tighter\",\n            },\n        },\n    },\n}\n\nexport default components\n","const radii = {\n    none: \"0px\",\n    base: \"4px\",\n    sm: \"2px\",\n    md: \"6px\",\n    lg: \"8px\",\n    xl: \"12px\",\n    \"2xl\": \"16px\",\n    \"3xl\": \"24px\",\n    full: \"9999px\",\n}\n\nexport default radii\n","import Bugsnag from \"@bugsnag/js\"\nimport BugsnagPluginReact from \"@bugsnag/plugin-react\"\nimport React from \"react\"\nimport { Stage } from \"constant\"\n\nexport function setupBugsnag() {\n    Bugsnag.start({\n        apiKey: process.env.REACT_APP_BUGSNAG_API_KEY || \"apiKey\",\n        appType: \"perp-lite\",\n        appVersion: process.env.REACT_APP_GITHUB_TAG,\n        releaseStage: process.env.REACT_APP_STAGE,\n        enabledReleaseStages: [Stage.Production, Stage.Staging],\n        plugins: [new BugsnagPluginReact()],\n    })\n}\n\nexport function createErrorBoundary() {\n    const plugin = Bugsnag.getPlugin(\"react\")\n    if (!plugin) {\n        return ({ children }: { children: React.ReactNode }) => <>{children}</>\n    }\n    return plugin.createErrorBoundary(React)\n}\n","import * as React from \"react\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nimport { createErrorBoundary, setupBugsnag } from \"./lib/bugsnag\"\n\nimport { Amm } from \"container/amm\"\nimport { App } from \"./App\"\nimport { BrowserRouter } from \"react-router-dom\"\nimport { ChakraProvider } from \"@chakra-ui/react\"\nimport { ClearingHouse } from \"container/clearingHouse\"\nimport { Connection } from \"./container/connection\"\nimport { Contract } from \"./container/contract\"\nimport { Fonts } from \"component/Font\"\nimport { Global } from \"container/global\"\nimport { MetaData } from \"./container/metadata\"\nimport { Position } from \"container/position\"\nimport ReactDOM from \"react-dom\"\nimport { Trade } from \"container/trade\"\nimport { Transaction } from \"./container/transaction\"\nimport { User } from \"./container/user\"\nimport { Web3Provider } from \"./container/web3\"\nimport reportWebVitals from \"./reportWebVitals\"\nimport { setupSegment } from \"./lib/segment\"\nimport theme from \"./theme\"\n\ndeclare global {\n    interface Window {\n        ethereum: any\n    }\n}\n\n// NOTE: third party services\nsetupSegment()\nsetupBugsnag()\nconst ErrorBoundary = createErrorBoundary()\n\nconst Providers = ((...providers: any[]) => ({ children }: { children: React.ReactNode }) => {\n    return providers.reduceRight((providers, provider) => {\n        const Provider = provider.component || provider\n        const props = provider.props || {}\n        return <Provider {...props}>{providers}</Provider>\n    }, children)\n})(\n    MetaData.Provider,\n    { component: ChakraProvider, props: { theme } },\n    Web3Provider,\n    BrowserRouter,\n    Global.Provider,\n    User.Provider,\n    Connection.Provider,\n    Transaction.Provider,\n    Contract.Provider,\n    Amm.Provider,\n    ClearingHouse.Provider,\n    Trade.Provider,\n    Position.Provider,\n)\n\nReactDOM.render(\n    <React.StrictMode>\n        <ErrorBoundary>\n            <Providers>\n                <Fonts />\n                <App />\n            </Providers>\n        </ErrorBoundary>\n    </React.StrictMode>,\n    document.getElementById(\"root\"),\n)\n\n/* NOTE:\n * If you want your app to work offline and load faster, you can change\n * unregister() to register() below. Note this comes with some pitfalls.\n * Learn more about service workers: https://cra.link/PWA\n **/\nserviceWorker.unregister()\n\n/* NOTE:\n * If you want to start measuring performance in your app, pass a function\n * to log results (for example: reportWebVitals(console.log))\n * or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n **/\nreportWebVitals()\n"],"sourceRoot":""}